% This program is copyright (C) 1982 by D. E. Knuth; all rights are reserved. 
% Copying of this file is authorized only if (1) you are D. E. Knuth, or if 
% (2) you make absolutely no changes to your copy. (The WEB system provides 
% for alterations via an auxiliary file; the master file should stay intact.) 
% See Appendix H of the WEB manual for hints on how to install this program. 
% And see Appendix A of the TRIP manual for details about how to validate it. 

% TeX is a trademark of the American Mathematical Society. 
% METAFONT is a trademark of Addison-Wesley Publishing Company. 

% Version 0 was released in September 1982 after it passed a variety of tests. 
% Version 1 was released in November 1983 after thorough testing. 
% Version 1.1 fixed ``disappearing font identifiers'' et alia (July 1984). 
% Version 1.2 allowed `0' in response to an error, et alia (October 1984). 
% Version 1.3 made memory allocation more flexible and local (November 1984). 
% Version 1.4 fixed accents right after line breaks, et alia (April 1985). 
% Version 1.5 fixed \the\toks after other expansion in \edefs (August 1985). 
% Version 2.0 (almost identical to 1.5) corresponds to 'Volume B' (April 1986). 
% Version 2.1 corrected anomalies in discretionary breaks (January 1987). 
% Version 2.2 corrected '(Please type...)' with null \endlinechar (April 1987). 
% Version 2.3 avoided incomplete page in premature termination (August 1987). 
% Version 2.4 fixed \noaligned rules in indented displays (August 1987). 
% Version 2.5 saved cur_order when expanding tokens (September 1987). 
% Version 2.6 added 10sp slop when shipping leaders (November 1987). 
% Version 2.7 improved rounding of negative-width characters (November 1987). 
% Version 2.8 fixed weird bug if no \patterns are used (December 1987). 
% Version 2.9 made \csname\endcsname's 'relax' local (December 1987). 
% Version 2.91 fixed \outer\def\a0{}\a\a bug (April 1988). 
% Version 2.92 fixed \patterns, also file names with complex macros (May 1988). 
% Version 2.93 fixed negative halving in allocator when mem_min<0 (June 1988). 
% Version 2.94 kept open_log_file from calling fatal_error (November 1988). 
% Version 2.95 solved that problem a better way (December 1988). 
% Version 2.96 corrected bug in 'Infinite shrinkage' recovery (January 1989). 
% Version 2.97 corrected blunder in creating 2.95 (February 1989). 
% Version 2.98 omitted save_for_after at outer level (March 1989). 
% Version 2.99 caught $$\begingroup\halign..$$ (June 1989). 
% Version 2.991 caught .5\ifdim.6... (June 1989). 
% Version 2.992 introduced major changes for 8-bit extensions (September 1989). 
% Version 2.993 fixed a save_stack synchronization bug et alia (December 1989). 
% Version 3.0 fixed unusual displays; was more \output robust (March 1990). 
% Version 3.1 fixed nullfont, disabled \write{\the\prevgraf} (September 1990). 
% Version 3.14 fixed unprintable font names and corrected typos (March 1991). 
% Version 3.141 more of same; reconstituted ligatures better (March 1992). 
% Version 3.1415 preserved nonexplicit kerns, tidied up (February 1993). 
% Version 3.14159 allowed fontmemsize to change; bulletproofing (March 1995). 
% Version 3.141592 fixed \xleaders, glueset, weird alignments (December 2002). 
% Version 3.1415926 was a general cleanup with minor fixes (February 2008). 
% Version 3.14159265 was similar (January 2014). 

% A reward of $327.68 will be paid to the first finder of any remaining bug. 

% Although considerable effort has been expended to make the TeX program 
% correct and reliable, no warranty is implied; the author disclaims any 
% obligation or liability for damages, including but not limited to 
% special, indirect, or consequential damages arising out of or in 
% connection with the use or performance of this software. This work has 
% been a ``labor of love'' and the author hopes that users enjoy it. 

% Here is TeX material that gets inserted after \input webmac 
\def\hang{\hangindent 3em\noindent\ignorespaces} 
\def\hangg#1 {\hang\hbox[#1 ]} 
\def\textindent#1{\hangindent2.5em\noindent\hbox to2.5em[\hss#1 ]\ignorespaces} 
\font\ninerm=cmr9 
\let\mc=\ninerm % medium caps for names like SAIL 
\def\PASCAL{Pascal} 
\def\ph{\hbox[Pascal-H]} 
\def\pct!{[\char`\%]} % percent sign in ordinary text 
\font\logo=logo10 % font used for the METAFONT logo 
\def\MF{[\logo META]\-[\logo FONT]} 
\def\<#1>{$\langle#1\rangle$} 
\def\section{\mathhexbox278} 

\def\(#1){} % this is used to make section names sort themselves better 
\def\9#1{} % this is used for sort keys in the index via @(*sort key][entry@*) 

\outer\def\N#1. \[#2]#3.{\MN#1.\vfil\eject % begin starred section 
  \def\rhead[PART #2:\uppercase[#3]] % define running headline 
  \message[*\modno] % progress report 
  \edef\next[\write\cont[\Z[\?#2]#3][\modno][\the\pageno]]]\next 
  \ifon\startsection[\bf\ignorespaces#3.\quad]\ignorespaces} 
\let\?=\relax % we want to be able to \write a \? 

\def\title{\TeX82} 
\def\topofcontents{\hsize 5.5in 
  \vglue 0pt plus 1fil minus 1.5in 
  \def\?##1][\hbox to 1in[\hfil##1.\ ]] 
  } 
\def\botofcontents{\vskip 0pt plus 1fil minus 1.5in} 
\pageno=3 
\def\glob{13} % this should be the section number of '<Global...>' 
\def\gglob{20, 26} % this should be the next two sections of '<Global...>' 


SPECIAL MODULE 1:  \[1] Introduction.

This is \TeX, a document compiler intended to produce typesetting of high 
quality. 
The \PASCAL\ program that follows is the definition of \TeX82, a standard 
(*PASCAL][\PASCAL*) 
(*TeX82][\TeX82*) 
version of \TeX\ that is designed to be highly portable so that identical output 
will be obtainable on a great variety of computers. 

The main purpose of the following program is to explain the algorithms of \TeX\ 
as clearly as possible. As a result, the program will not necessarily be very 
efficient when a particular \PASCAL\ compiler has translated it into a 
particular machine language. However, the program has been written so that it 
can be tuned to run efficiently in a wide variety of operating environments 
by making comparatively few changes. Such flexibility is possible because 
the documentation that follows is written in the \.{WEB} language, which is 
at a higher level than \PASCAL; the preprocessing step that converts \.{WEB} 
to \PASCAL\ is able to introduce most of the necessary refinements. 
Semi-automatic translation to other languages is also feasible, because the 
program below does not make extensive use of features that are peculiar to 
\PASCAL. 

A large piece of software like \TeX\ has inherent complexity that cannot 
be reduced below a certain level of difficulty, although each individual 
part is fairly simple by itself. The \.{WEB} language is intended to make 
the algorithms as readable as possible, by reflecting the way the 
individual program pieces fit together and by providing the 
cross-references that connect different parts. Detailed comments about 
what is going on, and about why things were done in certain ways, have 
been liberally sprinkled throughout the program.  These comments explain 
features of the implementation, but they rarely attempt to explain the 
\TeX\ language itself, since the reader is supposed to be familiar with 
{\sl The \TeX book}. 
(*WEB*) 
(*TeXbook][\sl The \TeX book*) 


MODULE2
The present implementation has a long ancestry, beginning in the summer 
of~1977, when Michael~F. Plass and Frank~M. Liang designed and coded 
a prototype 
(*Plass, Michael Frederick*) 
(*Liang, Franklin Mark*) 
(*Knuth, Donald Ervin*) 
based on some specifications that the author had made in May of that year. 
This original proto\TeX\ included macro definitions and elementary 
manipulations on boxes and glue, but it did not have line-breaking, 
page-breaking, mathematical formulas, alignment routines, error recovery, 
or the present semantic nest; furthermore, 
it used character lists instead of token lists, so that a control sequence 
like \.{\\halign} was represented by a list of seven characters. A 
complete version of \TeX\ was designed and coded by the author in late 
1977 and early 1978; that program, like its prototype, was written in the 
{\mc SAIL} language, for which an excellent debugging system was 
available. Preliminary plans to convert the {\mc SAIL} code into a form 
somewhat like the present ``web'' were developed by Luis Trabb~Pardo and 
(*Trabb Pardo, Luis Isidoro*) 
the author at the beginning of 1979, and a complete implementation was 
created by Ignacio~A. Zabala in 1979 and 1980. The \TeX82 program, which 
(*Zabala Salelles, Ignacio Andr\''es*) 
was written by the author during the latter part of 1981 and the early 
part of 1982, also incorporates ideas from the 1979 implementation of 
(*Guibas, Leonidas Ioannis*) 
(*Sedgewick, Robert*) 
(*Wyatt, Douglas Kirk*) 
\TeX\ in {\mc MESA} that was written by Leonidas Guibas, Robert Sedgewick, 
and Douglas Wyatt at the Xerox Palo Alto Research Center.  Several hundred 
refinements were introduced into \TeX82 based on the experiences gained with 
the original implementations, so that essentially every part of the system 
has been substantially improved. After the appearance of ``Version 0'' in 
September 1982, this program benefited greatly from the comments of 
many other people, notably David~R. Fuchs and Howard~W. Trickey. 
A final revision in September 1989 extended the input character set to 
eight-bit codes and introduced the ability to hyphenate words from 
different languages, based on some ideas of Michael~J. Ferguson. 
(*Fuchs, David Raymond*) 
(*Trickey, Howard Wellington*) 
(*Ferguson, Michael John*) 

No doubt there still is plenty of room for improvement, but the author 
is firmly committed to keeping \TeX82 ``frozen'' from now on; stability 
and reliability are to be its main virtues. 

On the other hand, the \.{WEB} description can be extended without changing 
the core of \TeX82 itself, and the program has been designed so that such 
extensions are not extremely difficult to make. 
The |banner| string defined here should be changed whenever \TeX\ 
undergoes any modifications, so that it will be clear which version of 
\TeX\ might be the guilty party when a problem arises. 
(*extensions to \TeX*) 
(*system dependencies*) 

If this program is changed, the resulting system should not be called 
`\TeX'; the official name `\TeX' by itself is reserved 
for software systems that are fully compatible with each other. 
A special test suite called the ``\.{TRIP} test'' is available for 
helping to determine whether a particular implementation deserves to be 
known as `\TeX' [cf.~Stanford Computer Science report CS1027, 
November 1984]. 


MODULE3
Different \PASCAL s have slightly different conventions, and the present 
(*PASCAL H}{\ph*) 
program expresses \TeX\ in terms of the \PASCAL\ that was 
available to the author in 1982. Constructions that apply to 
this particular compiler, which we shall call \ph, should help the 
reader see how to make an appropriate interface for other systems 
if necessary. (\ph\ is Charles Hedrick's modification of a compiler 
(*Hedrick, Charles Locke*) 
for the DECsystem-10 that was originally developed at the University of 
Hamburg; cf.\ {\sl SOFTWARE---Practice \AM\ Experience \bf6} (1976), 
29--42. The \TeX\ program below is intended to be adaptable, without 
extensive changes, to most other versions of \PASCAL, so it does not fully 
use the admirable features of \ph. Indeed, a conscious effort has been 
made here to avoid using several idiosyncratic features of standard 
\PASCAL\ itself, so that most of the code can be translated mechanically 
into other high-level languages. For example, the `\&{with}' and `\\{new}' 
features are not used, nor are pointer types, set types, or enumerated 
scalar types; there are no `\&{var}' parameters, except in the case of files; 
there are no tag fields on variant records; there are no assignments 
|real:=integer|; no procedures are declared local to other procedures.) 

The portions of this program that involve system-dependent code, where 
changes might be necessary because of differences between \PASCAL\ compilers 
and/or differences between 
operating systems, can be identified by looking at the sections whose 
numbers are listed under `system dependencies' in the index. Furthermore, 
the index entries for `dirty \PASCAL' list all places where the restrictions 
of \PASCAL\ have not been followed perfectly, for one reason or another. 
(*system dependencies*) 
(*dirty \PASCAL*) 

Incidentally, \PASCAL's standard |round| function can be problematical, 
because it disagrees with the IEEE floating-point standard. 
Many implementors have 
therefore chosen to substitute their own home-grown rounding procedure. 


MODULE4
The program begins with a normal \PASCAL\ program heading, whose 
components will be filled in later, using the conventions of \.{WEB}. 
(*WEB*) 
For example, the portion of the program called `\X\glob:Global 
variables\X' below will be replaced by a sequence of variable declarations 
that starts in $\section\glob$ of this documentation. In this way, we are able 
to define each individual global variable when we are prepared to 
understand what it means; we do not have to define all of the globals at 
once.  Cross references in $\section\glob$, where it says ``See also 
sections \gglob, \dots,'' also make it possible to look at the set of 
all global variables, if desired.  Similar remarks apply to the other 
portions of the program heading. 

Actually the heading shown here is not quite normal: The |program| line 
does not mention any |output| file, because \ph\ would ask the \TeX\ user 
to specify a file name if |output| were specified here. 
(*PASCAL H}{\ph*) 
(*system dependencies*) 


MODULE5
The overall \TeX\ program begins with the heading just shown, after which 
comes a bunch of procedure declarations and function declarations. 
Finally we will get to the main program, which begins with the 
comment `|start_here|'. If you want to skip down to the 
main program now, you can look up `|start_here|' in the index. 
But the author suggests that the best way to understand this program 
is to follow pretty much the order of \TeX's components as they appear in the 
\.{WEB} description you are now reading, since the present ordering is 
intended to combine the advantages of the ``bottom up'' and ``top down'' 
approaches to the problem of understanding a somewhat complicated system. 


MODULE6
Three labels must be declared in the main program, so we give them 
symbolic names. 


MODULE7
Some of the code below is intended to be used only when diagnosing the 
strange behavior that sometimes occurs when \TeX\ is being installed or 
when system wizards are fooling around with \TeX\ without quite knowing 
what they are doing. Such code will not normally be compiled; it is 
delimited by the codewords `$|debug|\ldots|gubed|$', with apologies 
to people who wish to preserve the purity of English. 

Similarly, there is some conditional code delimited by 
`$|stat|\ldots|tats|$' that is intended for use when statistics are to be 
kept about \TeX's memory usage.  The |stat| $\ldots$ |tats| code also 
implements diagnostic information for \.{\\tracingparagraphs} and 
\.{\\tracingpages}. 
(*debugging*) 


MODULE8
This program has two important variations: (1) There is a long and slow 
version called \.{INITEX}, which does the extra calculations needed to 
(*INITEX*) 
initialize \TeX's internal tables; and (2)~there is a shorter and faster 
production version, which cuts the initialization to a bare minimum. 
Parts of the program that are needed in (1) but not in (2) are delimited by 
the codewords `$|init|\ldots|tini|$'. 


MODULE9
If the first character of a \PASCAL\ comment is a dollar sign, 
\ph\ treats the comment as a list of ``compiler directives'' that will 
affect the translation of this program into machine language.  The 
directives shown below specify full checking and inclusion of the \PASCAL\ 
debugger when \TeX\ is being debugged, but they cause range checking and other 
redundant code to be eliminated when the production system is being generated. 
Arithmetic overflow will be detected in all cases. 
(*PASCAL H}{\ph*) 
(*system dependencies*) 
(*overflow in arithmetic*) 


MODULE10
This \TeX\ implementation conforms to the rules of the {\sl Pascal User 
(*PASCAL}{\PASCAL*) 
(*system dependencies*) 
Manual} published by Jensen and Wirth in 1975, except where system-dependent 
(*Wirth, Niklaus*) 
(*Jensen, Kathleen*) 
code is necessary to make a useful system program, and except in another 
respect where such conformity would unnecessarily obscure the meaning 
and clutter up the code: We assume that |case| statements may include a 
default case that applies if no matching label is found. Thus, we shall use 
constructions like 
$$\vbox{\halign{\ignorespaces#\hfil\cr 
|case x of|\cr 
1: $\langle\,$code for $x=1\,\rangle$;\cr 
3: $\langle\,$code for $x=3\,\rangle$;\cr 
|othercases| $\langle\,$code for |x<>1| and |x<>3|$\,\rangle$\cr 
|endcases|\cr}}$$ 
since most \PASCAL\ compilers have plugged this hole in the language by 
incorporating some sort of default mechanism. For example, the \ph\ 
compiler allows `|others|:' as a default label, and other \PASCAL s allow 
syntaxes like `\&{else}' or `\&{otherwise}' or `\\{otherwise}:', etc. The 
definitions of |othercases| and |endcases| should be changed to agree with 
local conventions.  Note that no semicolon appears before |endcases| in 
this program, so the definition of |endcases| should include a semicolon 
if the compiler wants one. (Of course, if no default mechanism is 
available, the |case| statements of \TeX\ will have to be laboriously 
extended by listing all remaining cases. People who are stuck with such 
\PASCAL s have, in fact, done this, successfully but not happily!) 
(*PASCAL H}{\ph*) 


MODULE11
The following parameters can be changed at compile time to extend or 
reduce \TeX's capacity. They may have different values in \.{INITEX} and 
in production versions of \TeX. 
(*INITEX*) 
(*system dependencies*) 


MODULE12
Like the preceding parameters, the following quantities can be changed 
at compile time to extend or reduce \TeX's capacity. But if they are changed, 
it is necessary to rerun the initialization program \.{INITEX} 
(*INITEX*) 
to generate new tables for the production \TeX\ program. 
One can't simply make helter-skelter changes to the following constants, 
since certain rather complex initialization 
numbers are computed from them. They are defined here using 
\.{WEB} macros, instead of being put into \PASCAL's |const| list, in order to 
emphasize this distinction. 


MODULE13
In case somebody has inadvertently made bad settings of the ``constants,'' 
\TeX\ checks them using a global variable called |bad|. 

This is the first of many sections of \TeX\ where global variables are 
defined. 


MODULE14
Later on we will say `\ignorespaces|if mem_max>=max_halfword then bad:=14|', 
or something similar. (We can't do that until |max_halfword| has been defined.) 


MODULE15
Labels are given symbolic names by the following definitions, so that 
occasional |goto| statements will be meaningful. We insert the label 
`|exit|' just before the `\ignorespaces|end|\unskip' of a procedure in 
which we have used the `|return|' statement defined below; the label 
`|restart|' is occasionally used at the very beginning of a procedure; and 
the label `|reswitch|' is occasionally used just prior to a |case| 
statement in which some cases change the conditions and we wish to branch 
to the newly applicable case.  Loops that are set up with the |loop| 
construction defined below are commonly exited by going to `|done|' or to 
`|found|' or to `|not_found|', and they are sometimes repeated by going to 
`|continue|'.  If two or more parts of a subroutine start differently but 
end up the same, the shared code may be gathered together at 
`|common_ending|'. 

Incidentally, this program never declares a label that isn't actually used, 
because some fussy \PASCAL\ compilers will complain about redundant labels. 


MODULE16
Here are some macros for common programming idioms. 


SPECIAL MODULE 17:  \[2] The character set.

In order to make \TeX\ readily portable to a wide variety of 
computers, all of its input text is converted to an internal eight-bit 
code that includes standard ASCII, the ``American Standard Code for 
Information Interchange.''  This conversion is done immediately when each 
character is read in. Conversely, characters are converted from ASCII to 
the user's external representation just before they are output to a 
text file. 

Such an internal code is relevant to users of \TeX\ primarily because it 
governs the positions of characters in the fonts. For example, the 
character `\.A' has ASCII code $65=65$, and when \TeX\ typesets 
this letter it specifies character number 65 in the current font. 
If that font actually has `\.A' in a different position, \TeX\ doesn't 
know what the real position is; the program that does the actual printing from 
\TeX's device-independent files is responsible for converting from ASCII to 
a particular font encoding. 
(*ASCII code*) 

\TeX's internal code also defines the value of constants 
that begin with a reverse apostrophe; and it provides an index to the 
\.{\\catcode}, \.{\\mathcode}, \.{\\uccode}, \.{\\lccode}, and \.{\\delcode} 
tables. 


MODULE18
Characters of text that have been converted to \TeX's internal form 
are said to be of type |ASCII_code|, which is a subrange of the integers. 


MODULE19
The original \PASCAL\ compiler was designed in the late 60s, when six-bit 
character sets were common, so it did not make provision for lowercase 
letters. Nowadays, of course, we need to deal with both capital and small 
letters in a convenient way, especially in a program for typesetting; 
so the present specification of \TeX\ has been written under the assumption 
that the \PASCAL\ compiler and run-time system permit the use of text files 
with more than 64 distinguishable characters. More precisely, we assume that 
the character set contains at least the letters and symbols associated 
with ASCII codes 32 through 126; all of these characters are now 
available on most computer terminals. 

Since we are dealing with more characters than were present in the first 
\PASCAL\ compilers, we have to decide what to call the associated data 
type. Some \PASCAL s use the original name |char| for the 
characters in text files, even though there now are more than 64 such 
characters, while other \PASCAL s consider |char| to be a 64-element 
subrange of a larger data type that has some other name. 

In order to accommodate this difference, we shall use the name |text_char| 
to stand for the data type of the characters that are converted to and 
from |ASCII_code| when they are input and output. We shall also assume 
that |text_char| consists of the elements |chr(first_text_char)| through 
|chr(last_text_char)|, inclusive. The following definitions should be 
adjusted if necessary. 
(*system dependencies*) 


MODULE20
The \TeX\ processor converts between ASCII code and 
the user's external character set by means of arrays |xord| and |xchr| 
that are analogous to \PASCAL's |ord| and |chr| functions. 


MODULE21
Since we are assuming that our \PASCAL\ system is able to read and 
write the visible characters of standard ASCII (although not 
necessarily using the ASCII codes to represent them), the following 
assignment statements initialize the standard part of the |xchr| array 
properly, without needing any system-dependent changes. On the other 
hand, it is possible to implement \TeX\ with less complete character 
sets, and in such cases it will be necessary to change something here. 
(*system dependencies*) 


MODULE22
Some of the ASCII codes without visible characters have been given symbolic 
names in this program because they are used with a special meaning. 


MODULE23
The ASCII code is ``standard'' only to a certain extent, since many 
computer installations have found it advantageous to have ready access 
to more than 94 printing characters. Appendix~C of {\sl The \TeX book\/} 
gives a complete specification of the intended correspondence between 
characters and \TeX's internal representation. 
(*TeXbook][\sl The \TeX book*) 

If \TeX\ is being used 
on a garden-variety \PASCAL\ for which only standard ASCII 
codes will appear in the input and output files, it doesn't really matter 
what codes are specified in |xchr[0..31]|, but the safest policy is to 
blank everything out by using the code shown below. 

However, other settings of |xchr| will make \TeX\ more friendly on 
computers that have an extended character set, so that users can type things 
like `\.^^Z' instead of `\.{\\ne}'. People with extended character sets can 
assign codes arbitrarily, giving an |xchr| equivalent to whatever 
characters the users of \TeX\ are allowed to have in their input files. 
It is best to make the codes correspond to the intended interpretations as 
shown in Appendix~C whenever possible; but this is not necessary. For 
example, in countries with an alphabet of more than 26 letters, it is 
usually best to map the additional letters into codes less than~32. 
To get the most ``permissive'' character set, change |' '| on the 
right of these assignment statements to |chr(i)|. 
(*character set dependencies*) 
(*system dependencies*) 


MODULE24
The following system-independent code makes the |xord| array contain a 
suitable inverse to the information in |xchr|. Note that if |xchr[i]=xchr[j]| 
where |i<j<127|, the value of |xord[xchr[i]]| will turn out to be 
|j| or more; hence, standard ASCII code numbers will be used instead of 
codes below 32 in case there is a coincidence. 


SPECIAL MODULE 25:  \[3] Input and output.

The bane of portability is the fact that different operating systems treat 
input and output quite differently, perhaps because computer scientists 
have not given sufficient attention to this problem. People have felt somehow 
that input and output are not part of ``real'' programming. Well, it is true 
that some kinds of programming are more fun than others. With existing 
input/output conventions being so diverse and so messy, the only sources of 
joy in such parts of the code are the rare occasions when one can find a 
way to make the program a little less bad than it might have been. We have 
two choices, either to attack I/O now and get it over with, or to postpone 
I/O until near the end. Neither prospect is very attractive, so let's 
get it over with. 

The basic operations we need to do are (1)~inputting and outputting of 
text, to or from a file or the user's terminal; (2)~inputting and 
outputting of eight-bit bytes, to or from a file; (3)~instructing the 
operating system to initiate (``open'') or to terminate (``close'') input or 
output from a specified file; (4)~testing whether the end of an input 
file has been reached. 

\TeX\ needs to deal with two kinds of files. 
We shall use the term |alpha_file| for a file that contains textual data, 
and the term |byte_file| for a file that contains eight-bit binary information. 
These two types turn out to be the same on many computers, but 
sometimes there is a significant distinction, so we shall be careful to 
distinguish between them. Standard protocols for transferring 
such files from computer to computer, via high-speed networks, are 
now becoming available to more and more communities of users. 

The program actually makes use also of a third kind of file, called a 
|word_file|, when dumping and reloading base information for its own 
initialization.  We shall define a word file later; but it will be possible 
for us to specify simple operations on word files before they are defined. 


MODULE26
Most of what we need to do with respect to input and output can be handled 
by the I/O facilities that are standard in \PASCAL, i.e., the routines 
called |get|, |put|, |eof|, and so on. But 
standard \PASCAL\ does not allow file variables to be associated with file 
names that are determined at run time, so it cannot be used to implement 
\TeX; some sort of extension to \PASCAL's ordinary |reset| and |rewrite| 
is crucial for our purposes. We shall assume that |name_of_file| is a variable 
of an appropriate type such that the \PASCAL\ run-time system being used to 
implement \TeX\ can open a file whose external name is specified by 
|name_of_file|. 
(*system dependencies*) 


MODULE27
The \ph\ compiler with which the present version of \TeX\ was prepared has 
extended the rules of \PASCAL\ in a very convenient way. To open file~|f|, 
we can write 
$$\vbox{\halign[#\hfil\qquad&#\hfil\cr 
|reset(f,(*\\[name]*),'/O')|&for input;\cr 
|rewrite(f,(*\\[name]*),'/O')|&for output.\cr]}$$ 
The `\\{name}' parameter, which is of type `{\bf packed array 
$[\langle\\{any}\rangle]$ of \\{char}}', stands for the name of 
the external file that is being opened for input or output. 
Blank spaces that might appear in \\{name} are ignored. 

The `\.{/O}' parameter tells the operating system not to issue its own 
error messages if something goes wrong. If a file of the specified name 
cannot be found, or if such a file cannot be opened for some other reason 
(e.g., someone may already be trying to write the same file), we will have 
|erstat(f)<>0| after an unsuccessful |reset| or |rewrite|.  This allows 
\TeX\ to undertake appropriate corrective action. 
(*PASCAL H}{\ph*) 
(*system dependencies*) 

\TeX's file-opening procedures return |false| if no file identified by 
|name_of_file| could be opened. 


MODULE28
Files can be closed with the \ph\ routine `|close(f)|', which 
(*PASCAL H}{\ph*) 
(*system dependencies*) 
should be used when all input or output with respect to |f| has been completed. 
This makes |f| available to be opened again, if desired; and if |f| was used for 
output, the |close| operation makes the corresponding external file appear 
on the user's area, ready to be read. 

These procedures should not generate error messages if a file is 
being closed before it has been successfully opened. 


MODULE29
Binary input and output are done with \PASCAL's ordinary |get| and |put| 
procedures, so we don't have to make any other special arrangements for 
binary~I/O. Text output is also easy to do with standard \PASCAL\ routines. 
The treatment of text input is more difficult, however, because 
of the necessary translation to |ASCII_code| values. 
\TeX's conventions should be efficient, and they should 
blend nicely with the user's operating environment. 


MODULE30
Input from text files is read one line at a time, using a routine called 
|input_ln|. This function is defined in terms of global variables called 
|buffer|, |first|, and |last| that will be described in detail later; for 
now, it suffices for us to know that |buffer| is an array of |ASCII_code| 
values, and that |first| and |last| are indices into this array 
representing the beginning and ending of a line of text. 


MODULE31
The |input_ln| function brings the next line of input from the specified 
file into available positions of the buffer array and returns the value 
|true|, unless the file has already been entirely read, in which case it 
returns |false| and sets |last:=first|.  In general, the |ASCII_code| 
numbers that represent the next line of the file are input into 
|buffer[first]|, |buffer[first+1]|, \dots, |buffer[last-1]|; and the 
global variable |last| is set equal to |first| plus the length of the 
line. Trailing blanks are removed from the line; thus, either |last=first| 
(in which case the line was entirely blank) or |buffer[last-1]<>' '|. 

An overflow error is given, however, if the normal actions of |input_ln| 
would make |last>=buf_size|; this is done so that other parts of \TeX\ 
can safely look at the contents of |buffer[last+1]| without overstepping 
the bounds of the |buffer| array. Upon entry to |input_ln|, the condition 
|first<buf_size| will always hold, so that there is always room for an 
``empty'' line. 

The variable |max_buf_stack|, which is used to keep track of how large 
the |buf_size| parameter must be to accommodate the present job, is 
also kept up to date by |input_ln|. 

If the |bypass_eoln| parameter is |true|, |input_ln| will do a |get| 
before looking at the first character of the line; this skips over 
an |eoln| that was in |f^|. The procedure does not do a |get| when it 
reaches the end of the line; therefore it can be used to acquire input 
from the user's terminal as well as from ordinary text files. 

Standard \PASCAL\ says that a file should have |eoln| immediately 
before |eof|, but \TeX\ needs only a weaker restriction: If |eof| 
occurs in the middle of a line, the system function |eoln| should return 
a |true| result (even though |f^| will be undefined). 

Since the inner loop of |input_ln| is part of \TeX's ``inner loop''---each 
character of input comes in at this place---it is wise to reduce system 
overhead by making use of special routines that read in an entire array 
of characters at once, if such routines are available. The following 
code uses standard \PASCAL\ to illustrate what needs to be done, but 
finer tuning is often possible at well-developed \PASCAL\ sites. 
(*inner loop*) 


MODULE32
The user's terminal acts essentially like other files of text, except 
that it is used both for input and for output. When the terminal is 
considered an input file, the file variable is called |term_in|, and when it 
is considered an output file the file variable is |term_out|. 
(*system dependencies*) 


MODULE33
Here is how to open the terminal files 
in \ph. The `\.{/I}' switch suppresses the first |get|. 
(*PASCAL H][\ph*) 
(*system dependencies*) 


MODULE34
Sometimes it is necessary to synchronize the input/output mixture that 
happens on the user's terminal, and three system-dependent 
procedures are used for this 
purpose. The first of these, |update_terminal|, is called when we want 
to make sure that everything we have output to the terminal so far has 
actually left the computer's internal buffers and been sent. 
The second, |clear_terminal|, is called when we wish to cancel any 
input that the user may have typed ahead (since we are about to 
issue an unexpected error message). The third, |wake_up_terminal|, 
is supposed to revive the terminal if the user has disabled it by 
some instruction to the operating system.  The following macros show how 
these operations can be specified in \ph: 
(*PASCAL H][\ph*) 
(*system dependencies*) 


MODULE35
We need a special routine to read the first line of \TeX\ input from 
the user's terminal. This line is different because it is read before we 
have opened the transcript file; there is sort of a ``chicken and 
egg'' problem here. If the user types `\.{\\input paper}' on the first 
line, or if some macro invoked by that line does such an \.{\\input}, 
the transcript file will be named `\.{paper.log}'; but if no \.{\\input} 
commands are performed during the first line of terminal input, the transcript 
file will acquire its default name `\.{texput.log}'. (The transcript file 
will not contain error messages generated by the first line before the 
first \.{\\input} command.) 
(*texput*) 

The first line is even more special if we are lucky enough to have an operating 
system that treats \TeX\ differently from a run-of-the-mill \PASCAL\ object 
program. It's nice to let the user start running a \TeX\ job by typing 
a command line like `\.{tex paper}'; in such a case, \TeX\ will operate 
as if the first line of input were `\.{paper}', i.e., the first line will 
consist of the remainder of the command line, after the part that invoked 
\TeX. 

The first line is special also because it may be read before \TeX\ has 
input a format file. In such cases, normal error messages cannot yet 
be given. The following code uses concepts that will be explained later. 
(If the \PASCAL\ compiler does not support non-local |goto|\unskip, the 
(*system dependencies*) 
statement `|goto final_end|' should be replaced by something that 
quietly terminates the program.) 


MODULE36
Different systems have different ways to get started. But regardless of 
what conventions are adopted, the routine that initializes the terminal 
should satisfy the following specifications: 

\yskip\textindent{1)}It should open file |term_in| for input from the 
  terminal. (The file |term_out| will already be open for output to the 
  terminal.) 

\textindent{2)}If the user has given a command line, this line should be 
  considered the first line of terminal input. Otherwise the 
  user should be prompted with `\.{**}', and the first line of input 
  should be whatever is typed in response. 

\textindent{3)}The first line of input, which might or might not be a 
  command line, should appear in locations |first| to |last-1| of the 
  |buffer| array. 

\textindent{4)}The global variable |loc| should be set so that the 
  character to be read next by \TeX\ is in |buffer[loc]|. This 
  character should not be blank, and we should have |loc<last|. 

\yskip\noindent(It may be necessary to prompt the user several times 
before a non-blank line comes in. The prompt is `\.{**}' instead of the 
later `\.*' because the meaning is slightly different: `\.{\\input}' need 
not be typed immediately after~`\.{**}'.) 


MODULE37
The following program does the required initialization 
without retrieving a possible command line. 
It should be clear how to modify this routine to deal with command lines, 
if the system permits them. 
(*system dependencies*) 


SPECIAL MODULE 38:  \[4] String handling.

Control sequence names and diagnostic messages are variable-length strings 
of eight-bit characters. Since \PASCAL\ does not have a well-developed string 
mechanism, \TeX\ does all of its string processing by homegrown methods. 

Elaborate facilities for dynamic strings are not needed, so all of the 
necessary operations can be handled with a simple data structure. 
The array |str_pool| contains all of the (eight-bit) ASCII codes in all 
of the strings, and the array |str_start| contains indices of the starting 
points of each string. Strings are referred to by integer numbers, so that 
string number |s| comprises the characters |str_pool[j]| for 
|str_start[s]<=j<str_start[s+1]|. Additional integer variables 
|pool_ptr| and |str_ptr| indicate the number of entries used so far 
in |str_pool| and |str_start|, respectively; locations 
|str_pool[pool_ptr]| and |str_start[str_ptr]| are 
ready for the next string to be allocated. 

String numbers 0 to 255 are reserved for strings that correspond to single 
ASCII characters. This is in accordance with the conventions of \.{WEB}, 
(*WEB*) 
which converts single-character strings into the ASCII code number of the 
single character involved, while it converts other strings into integers 
and builds a string pool file. Thus, when the string constant \.{'.'} appears 
in the program below, \.{WEB} converts it into the integer 46, which is the 
ASCII code for a period, while \.{WEB} will convert a string like \.{'hello'} 
into some integer greater than~255. String number 46 will presumably be the 
single character `\..'; but some ASCII codes have no standard visible 
representation, and \TeX\ sometimes needs to be able to print an arbitrary 
ASCII character, so the first 256 strings are used to specify exactly what 
should be printed for each of the 256 possibilities. 

Elements of the |str_pool| array must be ASCII codes that can actually 
be printed; i.e., they must have an |xchr| equivalent in the local 
character set. (This restriction applies only to preloaded strings, 
not to those generated dynamically by the user.) 

Some \PASCAL\ compilers won't pack integers into a single byte unless the 
integers lie in the range |-128..127|. To accommodate such systems 
we access the string pool only via macros that can easily be redefined. 
(*system dependencies*) 


MODULE39

MODULE40
Several of the elementary string operations are performed using \.{WEB} 
macros instead of \PASCAL\ procedures, because many of the 
operations are done quite frequently and we want to avoid the 
overhead of procedure calls. For example, here is 
a simple macro that computes the length of a string. 
(*WEB*) 


MODULE41
The length of the current string is called |cur_length|: 


MODULE42
Strings are created by appending character codes to |str_pool|. 
The |append_char| macro, defined here, does not check to see if the 
value of |pool_ptr| has gotten too high; this test is supposed to be 
made before |append_char| is used. There is also a |flush_char| 
macro, which erases the last character appended. 

To test if there is room to append |l| more characters to |str_pool|, 
we shall write |str_room(l)|, which aborts \TeX\ and gives an 
apologetic error message if there isn't enough room. 


MODULE43
Once a sequence of characters has been appended to |str_pool|, it 
officially becomes a string when the function |make_string| is called. 
This function returns the identification number of the new string as its 
value. 


MODULE44
To destroy the most recently made string, we say |flush_string|. 


MODULE45
The following subroutine compares string |s| with another string of the 
same length that appears in |buffer| starting at position |k|; 
the result is |true| if and only if the strings are equal. 
Empirical tests indicate that |str_eq_buf| is used in such a way that 
it tends to return |true| about 80 percent of the time. 


MODULE46
Here is a similar routine, but it compares two strings in the string pool, 
and it does not assume that they have the same length. 


MODULE47
The initial values of |str_pool|, |str_start|, |pool_ptr|, 
and |str_ptr| are computed by the \.{INITEX} program, based in part 
on the information that \.{WEB} has output while processing \TeX. 
(*INITEX*) 
(*string pool*) 


MODULE48

MODULE49
The first 128 strings will contain 95 standard ASCII characters, and the 
other 33 characters will be printed in three-symbol form like `\.{\^\^A}' 
unless a system-dependent change is made here. Installations that have 
an extended character set, where for example |xchr[26]=(*\.{\''^^Z\''}*)|, 
would like string 26 to be the single character 26 instead of the 
three characters 94, 94, 90 (\.{\^\^Z}). On the other hand, 
even people with an extended character set will want to represent string 
13 by \.{\^\^M}, since 13 is |carriage_return|; the idea is to 
produce visible strings instead of tabs or line-feeds or carriage-returns 
or bell-rings or characters that are treated anomalously in text files. 

Unprintable characters of codes 128--255 are, similarly, rendered 
\.{\^\^80}--\.{\^\^ff}. 

The boolean expression defined here should be |true| unless \TeX\ 
internal code number~|k| corresponds to a non-troublesome visible 
symbol in the local character set.  An appropriate formula for the 
extended character set recommended in {\sl The \TeX book\/} would, for 
example, be `|k in [0,8..10,12,13,27,127..255]|'. 
If character |k| cannot be printed, and |k<128|, then character |k+64| or 
|k-64| must be printable; moreover, ASCII codes |[33..38, 
48..57, 94, 97..102, 112..121]| must be printable. 
Thus, at least 81 printable characters are needed. 
(*TeXbook][\sl The \TeX book*) 
(*character set dependencies*) 
(*system dependencies*) 


MODULE50
When the \.{WEB} system program called \.{TANGLE} processes the \.{TEX.WEB} 
description that you are now reading, it outputs the \PASCAL\ program 
\.{TEX.PAS} and also a string pool file called \.{TEX.POOL}. The \.{INITEX} 
(*WEB*)(*INITEX*) 
program reads the latter file, where each string appears as a two-digit decimal 
length followed by the string itself, and the information is recorded in 
\TeX's string memory. 


MODULE51

MODULE52

MODULE53
The \.{WEB} operation \.{$} denotes the value that should be at the 
end of this \.{TEX.POOL} file; any other value means that the wrong pool 
file has been loaded. 
(*check sum*) 


SPECIAL MODULE 54:  \[5] On-line and off-line printing.

Messages that are sent to a user's terminal and to the transcript-log file 
are produced by several `|print|' procedures. These procedures will 
direct their output to a variety of places, based on the setting of 
the global variable |selector|, which has the following possible 
values: 

\yskip 
\hang |term_and_log|, the normal setting, prints on the terminal and on the 
  transcript file. 

\hang |log_only|, prints only on the transcript file. 

\hang |term_only|, prints only on the terminal. 

\hang |no_print|, doesn't print at all. This is used only in rare cases 
  before the transcript file is open. 

\hang |pseudo|, puts output into a cyclic buffer that is used 
  by the |show_context| routine; when we get to that routine we shall discuss 
  the reasoning behind this curious mode. 

\hang |new_string|, appends the output to the current string in the 
  string pool. 

\hang 0 to 15, prints on one of the sixteen files for \.{\\write} output. 

\yskip 
\noindent The symbolic names `|term_and_log|', etc., have been assigned 
numeric codes that satisfy the convenient relations |no_print+1=term_only|, 
|no_print+2=log_only|, |term_only+2=log_only+1=term_and_log|. 

Three additional global variables, |tally| and |term_offset| and 
|file_offset|, record the number of characters that have been printed 
since they were most recently cleared to zero. We use |tally| to record 
the length of (possibly very long) stretches of printing; |term_offset| 
and |file_offset|, on the other hand, keep track of how many characters 
have appeared so far on the current line that has been output to the 
terminal or to the transcript file, respectively. 


MODULE55

MODULE56
Macro abbreviations for output to the terminal and to the log file are 
defined here for convenience. Some systems need special conventions 
for terminal output, and it is possible to adhere to those conventions 
by changing |wterm|, |wterm_ln|, and |wterm_cr| in this section. 
(*system dependencies*) 


MODULE57
To end a line of text output, we call |print_ln|. 


MODULE58
The |print_char| procedure sends one character to the desired destination, 
using the |xchr| array to map it into an external character compatible with 
|input_ln|. All printing comes through |print_ln| or |print_char|. 


MODULE59
An entire string is output by calling |print|. Note that if we are outputting 
the single standard ASCII character \.c, we could call |print('c')|, since 
|'c'=99| is the number of a single-character string, as explained above. But 
|print_char('c')| is quicker, so \TeX\ goes directly to the |print_char| 
routine when it knows that this is safe. (The present implementation 
assumes that it is always safe to print a visible ASCII character.) 
(*system dependencies*) 


MODULE60
Control sequence names, file names, and strings constructed with 
\.{\\string} might contain |ASCII_code| values that can't 
be printed using |print_char|. Therefore we use |slow_print| for them: 


MODULE61
Here is the very first thing that \TeX\ prints: a headline that identifies 
the version number and format package. The |term_offset| variable is temporarily 
incorrect, but the discrepancy is not serious since we assume that the banner 
and format identifier together will occupy at most |max_print_line| 
character positions. 


MODULE62
The procedure |print_nl| is like |print|, but it makes sure that the 
string appears at the beginning of a new line. 


MODULE63
The procedure |print_esc| prints a string that is preceded by 
the user's escape character (which is usually a backslash). 


MODULE64
An array of digits in the range |0..15| is printed by |print_the_digs|. 


MODULE65
The following procedure, which prints out the decimal representation of a 
given integer |n|, has been written carefully so that it works properly 
if |n=0| or if |(-n)| would cause overflow. It does not apply |mod| or |div| 
to negative arguments, since such operations are not implemented consistently 
by all \PASCAL\ compilers. 


MODULE66
Here is a trivial procedure to print two digits; it is usually called with 
a parameter in the range |0<=n<=99|. 


MODULE67
Hexadecimal printing of nonnegative integers is accomplished by |print_hex|. 


MODULE68
Old versions of \TeX\ needed a procedure called |print_ASCII| whose function 
is now subsumed by |print|. We retain the old name here as a possible aid to 
future software arch\ae ologists. 


MODULE69
Roman numerals are produced by the |print_roman_int| routine.  Readers 
who like puzzles might enjoy trying to figure out how this tricky code 
works; therefore no explanation will be given. Notice that 1990 yields 
\.{mcmxc}, not \.{mxm}. 


MODULE70
The |print| subroutine will not print a string that is still being 
created. The following procedure will. 


MODULE71
Here is a procedure that asks the user to type a line of input, 
assuming that the |selector| setting is either |term_only| or |term_and_log|. 
The input is placed into locations |first| through |last-1| of the 
|buffer| array, and echoed on the transcript file if appropriate. 

This procedure is never called when |interaction<scroll_mode|. 


SPECIAL MODULE 72:  \[6] Reporting errors.

When something anomalous is detected, \TeX\ typically does something like this: 
$$\vbox{\halign{#\hfil\cr 
|print_err('Something anomalous has been detected');|\cr 
|help3('This is the first line of my offer to help.')|\cr 
|('This is the second line. I''m trying to')|\cr 
|('explain the best way for you to proceed.');|\cr 
|error;|\cr}}$$ 
A two-line help message would be given using |help2|, etc.; these informal 
helps should use simple vocabulary that complements the words used in the 
official error message that was printed. (Outside the U.S.A., the help 
messages should preferably be translated into the local vernacular. Each 
line of help is at most 60 characters long, in the present implementation, 
so that |max_print_line| will not be exceeded.) 

The |print_err| procedure supplies a `\.!' before the official message, 
and makes sure that the terminal is awake if a stop is going to occur. 
The |error| procedure supplies a `\..' after the official message, then it 
shows the location of the error; and if |interaction=error_stop_mode|, 
it also enters into a dialog with the user, during which time the help 
message may be printed. 
(*system dependencies*) 


MODULE73
The global variable |interaction| has four settings, representing increasing 
amounts of user interaction: 


MODULE74

INSERT: 'Set init...'
=interaction:=error_stop_mode; 


MODULE75
\TeX\ is careful not to call |error| when the print |selector| setting 
might be unusual. The only possible values of |selector| at the time of 
error messages are 

\yskip\hang|no_print| (when |interaction=batch_mode| 
  and |log_file| not yet open); 

\hang|term_only| (when |interaction>batch_mode| and |log_file| not yet open); 

\hang|log_only| (when |interaction=batch_mode| and |log_file| is open); 

\hang|term_and_log| (when |interaction>batch_mode| and |log_file| is open). 


MODULE76
A global variable |deletions_allowed| is set |false| if the |get_next| 
routine is active when |error| is called; this ensures that |get_next| 
and related routines like |get_token| will never be called recursively. 
A similar interlock is provided by |set_box_allowed|. 
(*recursion*) 

The global variable |history| records the worst level of error that 
has been detected. It has four possible values: |spotless|, |warning_issued|, 
|error_message_issued|, and |fatal_error_stop|. 

Another global variable, |error_count|, is increased by one when an 
|error| occurs without an interactive dialog, and it is reset to zero at 
the end of every paragraph.  If |error_count| reaches 100, \TeX\ decides 
that there is no point in continuing further. 


MODULE77
The value of |history| is initially |fatal_error_stop|, but it will 
be changed to |spotless| if \TeX\ survives the initialization process. 


MODULE78
Since errors can be detected almost anywhere in \TeX, we want to declare the 
error procedures near the beginning of the program. But the error procedures 
in turn use some other procedures, which need to be declared |forward| 
before we get to |error| itself. 

It is possible for |error| to be called recursively if some error arises 
when |get_token| is being used to delete a token, and/or if some fatal error 
occurs while \TeX\ is trying to fix a non-fatal one. But such recursion 
(*recursion*) 
is never more than two levels deep. 


MODULE79
Individual lines of help are recorded in the array |help_line|, which 
contains entries in positions |0..(help_ptr-1)|. They should be printed 
in reverse order, i.e., with |help_line[0]| appearing last. 


MODULE80

MODULE81
The |jump_out| procedure just cuts across all active procedure levels and 
goes to |end_of_TEX|. This is the only nontrivial |goto| statement in the 
whole program. It is used when there is no recovery from a particular error. 

Some \PASCAL\ compilers do not implement non-local |goto| statements. 
(*system dependencies*) 
In such cases the body of |jump_out| should simply be 
`|close_files_and_terminate|;\thinspace' followed by a call on some system 
procedure that quietly terminates the program. 


MODULE82
Here now is the general |error| routine. 


MODULE83

MODULE84
It is desirable to provide an `\.E' option here that gives the user 
an easy way to return from \TeX\ to the system editor, with the offending 
line ready to be edited. But such an extension requires some system 
wizardry, so the present implementation simply types out the name of the 
file that should be 
edited and the relevant line number. 
(*system dependencies*) 

There is a secret `\.D' option available when the debugging routines haven't 
been commented~out. 
(*debugging*) 


MODULE85

MODULE86
Here the author of \TeX\ apologizes for making use of the numerical 
relation between |'Q'|, |'R'|, |'S'|, and the desired interaction settings 
|batch_mode|, |nonstop_mode|, |scroll_mode|. 
(*Knuth, Donald Ervin*) 


MODULE87
When the following code is executed, |buffer[(first+1)..(last-1)]| may 
contain the material inserted by the user; otherwise another prompt will 
be given. In order to understand this part of the program fully, you need 
to be familiar with \TeX's input stacks. 


MODULE88
We allow deletion of up to 99 tokens at a time. 


MODULE89

MODULE90

MODULE91
A dozen or so error messages end with a parenthesized integer, so we 
save a teeny bit of program space by declaring the following procedure: 


MODULE92
In anomalous cases, the print selector might be in an unknown state; 
the following subroutine is called to fix things just enough to keep 
running a bit longer. 


MODULE93
The following procedure prints \TeX's last words before dying. 


MODULE94
Here is the most dreaded error message. 


MODULE95
The program might sometime run completely amok, at which point there is 
no choice but to stop. If no previous error has been detected, that's bad 
news; a message is printed that is really intended for the \TeX\ 
maintenance person instead of the user (unless the user has been 
particularly diabolical).  The index entries for `this can't happen' may 
help to pinpoint the problem. 
(*dry rot*) 


MODULE96
Users occasionally want to interrupt \TeX\ while it's running. 
If the \PASCAL\ runtime system allows this, one can implement 
a routine that sets the global variable |interrupt| to some nonzero value 
when such an interrupt is signalled. Otherwise there is probably at least 
a way to make |interrupt| nonzero using the \PASCAL\ debugger. 
(*system dependencies*) 
(*debugging*) 


MODULE97

MODULE98
When an interrupt has been detected, the program goes into its 
highest interaction level and lets the user have nearly the full flexibility of 
the |error| routine.  \TeX\ checks for interrupts only at times when it is 
safe to do this. 


SPECIAL MODULE 99:  \[7] Arithmetic with scaled dimensions.

The principal computations performed by \TeX\ are done entirely in terms of 
integers less than $2^{31}$ in magnitude; and divisions are done only when both 
dividend and divisor are nonnegative. Thus, the arithmetic specified in this 
program can be carried out in exactly the same way on a wide variety of 
computers, including some small ones. Why? Because the arithmetic 
calculations need to be spelled out precisely in order to guarantee that 
\TeX\ will produce identical output on different machines. If some 
quantities were rounded differently in different implementations, we would 
find that line breaks and even page breaks might occur in different places. 
Hence the arithmetic of \TeX\ has been designed with care, and systems that 
claim to be implementations of \TeX82 should follow precisely the 
(*TeX82}{\TeX82*) 
calculations as they appear in the present program. 

(Actually there are three places where \TeX\ uses |div| with a possibly negative 
numerator. These are harmless; see |div| in the index. Also if the user 
sets the \.{\\time} or the \.{\\year} to a negative value, some diagnostic 
information will involve negative-numerator division. The same remarks 
apply for |mod| as well as for |div|.) 


MODULE100
Here is a routine that calculates half of an integer, using an 
unambiguous convention with respect to signed odd numbers. 


MODULE101
Fixed-point arithmetic is done on {\sl scaled integers\/} that are multiples 
of $2^{-16}$. In other words, a binary point is assumed to be sixteen bit 
positions from the right end of a binary computer word. 


MODULE102
The following function is used to create a scaled integer from a given decimal 
fraction $(.d_0d_1\ldots d_{k-1})$, where |0<=k<=17|. The digit $d_i$ is 
given in |dig[i]|, and the calculation produces a correctly rounded result. 


MODULE103
Conversely, here is a procedure analogous to |print_int|. If the output 
of this procedure is subsequently read by \TeX\ and converted by the 
|round_decimals| routine above, it turns out that the original value will 
be reproduced exactly; the ``simplest'' such decimal number is output, 
but there is always at least one digit following the decimal point. 

The invariant relation in the \&{repeat} loop is that a sequence of 
decimal digits yet to be printed will yield the original number if and only if 
they form a fraction~$f$ in the range $s-\delta\L10\cdot2^{16}f<s$. 
We can stop if and only if $f=0$ satisfies this condition; the loop will 
terminate before $s$ can possibly become zero. 


MODULE104
Physical sizes that a \TeX\ user specifies for portions of documents are 
represented internally as scaled points. Thus, if we define an `sp' (scaled 
(*sp*) 
point) as a unit equal to $2^{-16}$ printer's points, every dimension 
inside of \TeX\ is an integer number of sp. There are exactly 
4,736,286.72 sp per inch.  Users are not allowed to specify dimensions 
larger than $2^{30}-1$ sp, which is a distance of about 18.892 feet (5.7583 
meters); two such quantities can be added without overflow on a 32-bit 
computer. 

The present implementation of \TeX\ does not check for overflow when 
(*overflow in arithmetic*) 
dimensions are added or subtracted. This could be done by inserting a 
few dozen tests of the form `\ignorespaces|if x>=1073741824 then 
(*\\{report\_overflow}*)|', but the chance of overflow is so remote that 
such tests do not seem worthwhile. 

\TeX\ needs to do only a few arithmetic operations on scaled quantities, 
other than addition and subtraction, and the following subroutines do most of 
the work. A single computation might use several subroutine calls, and it is 
desirable to avoid producing multiple error messages in case of arithmetic 
overflow; so the routines set the global variable |arith_error| to |true| 
instead of reporting errors directly to the user. Another global variable, 
|remainder|, holds the remainder after a division. 


MODULE105
The first arithmetical subroutine we need computes $nx+y$, where |x| 
and~|y| are |scaled| and |n| is an integer. We will also use it to 
multiply integers. 


MODULE106
We also need to divide scaled dimensions by integers. 


MODULE107
Then comes the multiplication of a scaled number by a fraction |n/d|, 
where |n| and |d| are nonnegative integers |<=(*$2^{16}$*)| and |d| is 
positive. It would be too dangerous to multiply by~|n| and then divide 
by~|d|, in separate operations, since overflow might well occur; and it 
would be too inaccurate to divide by |d| and then multiply by |n|. Hence 
this subroutine simulates 1.5-precision arithmetic. 


MODULE108
The next subroutine is used to compute the ``badness'' of glue, when a 
total~|t| is supposed to be made from amounts that sum to~|s|.  According 
to {\sl The \TeX book}, the badness of this situation is $100(t/s)^3$; 
however, badness is simply a heuristic, so we need not squeeze out the 
last drop of accuracy when computing it. All we really want is an 
approximation that has similar properties. 
(*TeXbook][\sl The \TeX book*) 

The actual method used to compute the badness is easier to read from the 
program than to describe in words. It produces an integer value that is a 
reasonably close approximation to $100(t/s)^3$, and all implementations 
of \TeX\ should use precisely this method. Any badness of $2^{13}$ or more is 
treated as infinitely bad, and represented by 10000. 

It is not difficult to prove that $$\hbox{|badness(t+1,s)>=badness(t,s) 
>=badness(t,s+1)|}.$$ The badness function defined here is capable of 
computing at most 1095 distinct values, but that is plenty. 


MODULE109
When \TeX\ ``packages'' a list into a box, it needs to calculate the 
proportionality ratio by which the glue inside the box should stretch 
or shrink. This calculation does not affect \TeX's decision making, 
so the precise details of rounding, etc., in the glue calculation are not 
of critical importance for the consistency of results on different computers. 

We shall use the type |glue_ratio| for such proportionality ratios. 
A glue ratio should take the same amount of memory as an 
|integer| (usually 32 bits) if it is to blend smoothly with \TeX's 
other data structures. Thus |glue_ratio| should be equivalent to 
|short_real| in some implementations of \PASCAL. Alternatively, 
it is possible to deal with glue ratios using nothing but fixed-point 
arithmetic; see {\sl TUGboat \bf3},1 (March 1982), 10--27. (But the 
routines cited there must be modified to allow negative glue ratios.) 
(*system dependencies*) 


SPECIAL MODULE 110:  \[8] Packed data.

In order to make efficient use of storage space, \TeX\ bases its major data 
structures on a |memory_word|, which contains either a (signed) integer, 
possibly scaled, or a (signed) |glue_ratio|, or a small number of 
fields that are one half or one quarter of the size used for storing 
integers. 

If |x| is a variable of type |memory_word|, it contains up to four 
fields that can be referred to as follows: 
$$\vbox{\halign[\hfil#&#\hfil&#\hfil\cr 
|x|&.|int|&(an |integer|)\cr 
|x|&.|sc|\qquad&(a |scaled| integer)\cr 
|x|&.|gr|&(a |glue_ratio|)\cr 
|x.hh.lh|, |x.hh|&.|rh|&(two halfword fields)\cr 
|x.hh.b0|, |x.hh.b1|, |x.hh|&.|rh|&(two quarterword fields, one halfword 
  field)\cr 
|x.qqqq.b0|, |x.qqqq.b1|, |x.qqqq|&.|b2|, |x.qqqq.b3|\hskip-100pt 
  &\qquad\qquad\qquad(four quarterword fields)\cr]}$$ 
This is somewhat cumbersome to write, and not very readable either, but 
macros will be used to make the notation shorter and more transparent. 
The \PASCAL\ code below gives a formal definition of |memory_word| and 
its subsidiary types, using packed variant records. \TeX\ makes no 
assumptions about the relative positions of the fields within a word. 

Since we are assuming 32-bit integers, a halfword must contain at least 
16 bits, and a quarterword must contain at least 8 bits. 
(*system dependencies*) 
But it doesn't hurt to have more bits; for example, with enough 36-bit 
words you might be able to have |mem_max| as large as 262142, which is 
eight times as much memory as anybody had during the first four years of 
\TeX's existence. 

N.B.: Valuable memory space will be dreadfully wasted unless \TeX\ is compiled 
by a \PASCAL\ that packs all of the |memory_word| variants into 
the space of a single integer. This means, for example, that |glue_ratio| 
words should be |short_real| instead of |real| on some computers. Some 
\PASCAL\ compilers will pack an integer whose subrange is `|0..255|' into 
an eight-bit field, but others insist on allocating space for an additional 
sign bit; on such systems you can get 256 values into a quarterword only 
if the subrange is `|-128..127|'. 

The present implementation tries to accommodate as many variations as possible, 
so it makes few assumptions. If integers having the subrange 
`|min_quarterword..max_quarterword|' can be packed into a quarterword, 
and if integers having the subrange `|min_halfword..max_halfword|' 
can be packed into a halfword, everything should work satisfactorily. 

It is usually most efficient to have |min_quarterword=min_halfword=0|, 
so one should try to achieve this unless it causes a severe problem. 
The values defined here are recommended for most 32-bit computers. 


MODULE111
Here are the inequalities that the quarterword and halfword values 
must satisfy (or rather, the inequalities that they mustn't satisfy): 


MODULE112
The operation of adding or subtracting |min_quarterword| occurs quite 
frequently in \TeX, so it is convenient to abbreviate this operation 
by using the macros |qi| and |qo| for input and output to and from 
quarterword format. 

The inner loop of \TeX\ will run faster with respect to compilers 
that don't optimize expressions like `|x+0|' and `|x-0|', if these 
macros are simplified in the obvious way when |min_quarterword=0|. 
(*inner loop*)(*system dependencies*) 


MODULE113
The reader should study the following definitions closely: 
(*system dependencies*) 


MODULE114
When debugging, we may want to print a |memory_word| without knowing 
what type it is; so we print it in all modes. 
(*dirty \PASCAL*)(*debugging*) 


SPECIAL MODULE 115:  \[9] Dynamic memory allocation.

The \TeX\ system does nearly all of its own memory allocation, so that it 
can readily be transported into environments that do not have automatic 
facilities for strings, garbage collection, etc., and so that it can be in 
control of what error messages the user receives. The dynamic storage 
requirements of \TeX\ are handled by providing a large array |mem| in 
which consecutive blocks of words are used as nodes by the \TeX\ routines. 

Pointer variables are indices into this array, or into another array 
called |eqtb| that will be explained later. A pointer variable might 
also be a special flag that lies outside the bounds of |mem|, so we 
allow pointers to assume any |halfword| value. The minimum halfword 
value represents a null pointer. \TeX\ does not assume that |mem[null]| exists. 


MODULE116
The |mem| array is divided into two regions that are allocated separately, 
but the dividing line between these two regions is not fixed; they grow 
together until finding their ``natural'' size in a particular job. 
Locations less than or equal to |lo_mem_max| are used for storing 
variable-length records consisting of two or more words each. This region 
is maintained using an algorithm similar to the one described in exercise 
2.5--19 of {\sl The Art of Computer Programming}. However, no size field 
appears in the allocated nodes; the program is responsible for knowing the 
relevant size when a node is freed. Locations greater than or equal to 
|hi_mem_min| are used for storing one-word records; a conventional 
\.{AVAIL} stack is used for allocation in this region. 

Locations of |mem| between |mem_bot| and |mem_top| may be dumped as part 
of preloaded format files, by the \.{INITEX} preprocessor. 
(*INITEX*) 
Production versions of \TeX\ may extend the memory at both ends in order to 
provide more space; locations between |mem_min| and |mem_bot| are always 
used for variable-size nodes, and locations between |mem_top| and |mem_max| 
are always used for single-word nodes. 

The key pointers that govern |mem| allocation have a prescribed order: 
$$\advance\thickmuskip-2mu 
\hbox{|null<=mem_min<=mem_bot<lo_mem_max< 
  hi_mem_min<mem_top<=mem_end<=mem_max|.}$$ 

Empirical tests show that the present implementation of \TeX\ tends to 
spend about 9\pct! of its running time allocating nodes, and about 6\pct! 
deallocating them after their use. 


MODULE117
In order to study the memory requirements of particular applications, it 
is possible to prepare a version of \TeX\ that keeps track of current and 
maximum memory usage. When code between the delimiters |stat| $\ldots$ 
|tats| is not ``commented out,'' \TeX\ will run a bit slower but it will 
report these statistics when |tracing_stats| is sufficiently large. 


MODULE118
Let's consider the one-word memory region first, since it's the 
simplest. The pointer variable |mem_end| holds the highest-numbered location 
of |mem| that has ever been used. The free locations of |mem| that 
occur between |hi_mem_min| and |mem_end|, inclusive, are of type 
|two_halves|, and we write |info(p)| and |link(p)| for the |lh| 
and |rh| fields of |mem[p]| when it is of this type. The single-word 
free locations form a linked list 
$$|avail|,\;\hbox{|link(avail)|},\;\hbox{|link(link(avail))|},\;\ldots$$ 
terminated by |null|. 


MODULE119
If memory is exhausted, it might mean that the user has forgotten 
a right brace. We will define some procedures later that try to help 
pinpoint the trouble. 


MODULE120
The function |get_avail| returns a pointer to a new one-word node whose 
|link| field is null. However, \TeX\ will halt if there is no more room left. 
(*inner loop*) 

If the available-space list is empty, i.e., if |avail=null|, 
we try first to increase |mem_end|. If that cannot be done, i.e., if 
|mem_end=mem_max|, we try to decrease |hi_mem_min|. If that cannot be 
done, i.e., if |hi_mem_min=lo_mem_max+1|, we have to quit. 


MODULE121
Conversely, a one-word node is recycled by calling |free_avail|. 
This routine is part of \TeX's ``inner loop,'' so we want it to be fast. 
(*inner loop*) 


MODULE122
There's also a |fast_get_avail| routine, which saves the procedure-call 
overhead at the expense of extra programming. This routine is used in 
the places that would otherwise account for the most calls of |get_avail|. 
(*inner loop*) 


MODULE123
The procedure |flush_list(p)| frees an entire linked list of 
one-word nodes that starts at position |p|. 
(*inner loop*) 


MODULE124
The available-space list that keeps track of the variable-size portion 
of |mem| is a nonempty, doubly-linked circular list of empty nodes, 
pointed to by the roving pointer |rover|. 

Each empty node has size 2 or more; the first word contains the special 
value |max_halfword| in its |link| field and the size in its |info| field; 
the second word contains the two pointers for double linking. 

Each nonempty node also has size 2 or more. Its first word is of type 
|two_halves|\kern-1pt, and its |link| field is never equal to |max_halfword|. 
Otherwise there is complete flexibility with respect to the contents 
of its other fields and its other words. 

(We require |mem_max<max_halfword| because terrible things can happen 
when |max_halfword| appears in the |link| field of a nonempty node.) 


MODULE125
A call to |get_node| with argument |s| returns a pointer to a new node 
of size~|s|, which must be 2~or more. The |link| field of the first word 
of this new node is set to null. An overflow stop occurs if no suitable 
space exists. 

If |get_node| is called with $s=2^{30}$, it simply merges adjacent free 
areas and returns the value |max_halfword|. 


MODULE126
The lower part of |mem| grows by 1000 words at a time, unless 
we are very close to going under. When it grows, we simply link 
a new node into the available-space list. This method of controlled 
growth helps to keep the |mem| usage consecutive when \TeX\ is 
implemented on ``virtual memory'' systems. 
(*virtual memory*) 


MODULE127
Empirical tests show that the routine in this section performs a 
node-merging operation about 0.75 times per allocation, on the average, 
after which it finds that |r>p+1| about 95\pct! of the time. 


MODULE128

MODULE129
Here we delete node |p| from the ring, and let |rover| rove around. 


MODULE130
Conversely, when some variable-size node |p| of size |s| is no longer needed, 
the operation |free_node(p,s)| will make its words available, by inserting 
|p| as a new empty node just before where |rover| now points. 
(*inner loop*) 


MODULE131
Just before \.{INITEX} writes out the memory, it sorts the doubly linked 
available space list. The list is probably very short at such times, so a 
simple insertion sort is used. The smallest available location will be 
pointed to by |rover|, the next-smallest by |rlink(rover)|, etc. 


MODULE132
The following |while| loop is guaranteed to 
terminate, since the list that starts at 
|rover| ends with |max_halfword| during the sorting procedure. 


SPECIAL MODULE 133:  \[10] Data structures for boxes and their friends.

From the computer's standpoint, \TeX's chief mission is to create 
horizontal and vertical lists. We shall now investigate how the elements 
of these lists are represented internally as nodes in the dynamic memory. 

A horizontal or vertical list is linked together by |link| fields in 
the first word of each node. Individual nodes represent boxes, glue, 
penalties, or special things like discretionary hyphens; because of this 
variety, some nodes are longer than others, and we must distinguish different 
kinds of nodes. We do this by putting a `|type|' field in the first word, 
together with the link and an optional `|subtype|'. 


MODULE134
A |char_node|, which represents a single character, is the most important 
kind of node because it accounts for the vast majority of all boxes. 
Special precautions are therefore taken to ensure that a |char_node| does 
not take up much memory space. Every such node is one word long, and in fact 
it is identifiable by this property, since other kinds of nodes have at least 
two words, and they appear in |mem| locations less than |hi_mem_min|. 
This makes it possible to omit the |type| field in a |char_node|, leaving 
us room for two bytes that identify a |font| and a |character| within 
that font. 

Note that the format of a |char_node| allows for up to 256 different 
fonts and up to 256 characters per font; but most implementations will 
probably limit the total number of fonts to fewer than 75 per job, 
and most fonts will stick to characters whose codes are 
less than 128 (since higher codes 
are more difficult to access on most keyboards). 

Extensions of \TeX\ intended for oriental languages will need even more 
than $256\times256$ possible characters, when we consider different sizes 
(*oriental characters*)(*Chinese characters*)(*Japanese characters*) 
and styles of type.  It is suggested that Chinese and Japanese fonts be 
handled by representing such characters in two consecutive |char_node| 
entries: The first of these has |font=font_base|, and its |link| points 
to the second; 
the second identifies the font and the character dimensions. 
The saving feature about oriental characters is that most of them have 
the same box dimensions. The |character| field of the first |char_node| 
is a ``\\{charext}'' that distinguishes between graphic symbols whose 
dimensions are identical for typesetting purposes. (See the \MF\ manual.) 
Such an extension of \TeX\ would not be difficult; further details are 
left to the reader. 

In order to make sure that the |character| code fits in a quarterword, 
\TeX\ adds the quantity |min_quarterword| to the actual code. 

Character nodes appear only in horizontal lists, never in vertical lists. 


MODULE135
An |hlist_node| stands for a box that was made from a horizontal list. 
Each |hlist_node| is seven words long, and contains the following fields 
(in addition to the mandatory |type| and |link|, which we shall not 
mention explicitly when discussing the other node types): The |height| and 
|width| and |depth| are scaled integers denoting the dimensions of the 
box.  There is also a |shift_amount| field, a scaled integer indicating 
how much this box should be lowered (if it appears in a horizontal list), 
or how much it should be moved to the right (if it appears in a vertical 
list). There is a |list_ptr| field, which points to the beginning of the 
list from which this box was fabricated; if |list_ptr| is |null|, the box 
is empty. Finally, there are three fields that represent the setting of 
the glue:  |glue_set(p)| is a word of type |glue_ratio| that represents 
the proportionality constant for glue setting; |glue_sign(p)| is 
|stretching| or |shrinking| or |normal| depending on whether or not the 
glue should stretch or shrink or remain rigid; and |glue_order(p)| 
specifies the order of infinity to which glue setting applies (|normal|, 
|fil|, |fill|, or |filll|). The |subtype| field is not used. 


MODULE136
The |new_null_box| function returns a pointer to an |hlist_node| in 
which all subfields have the values corresponding to `\.{\\hbox\[\]}'. 
The |subtype| field is set to |min_quarterword|, since that's the desired 
|span_count| value if this |hlist_node| is changed to an |unset_node|. 


MODULE137
A |vlist_node| is like an |hlist_node| in all respects except that it 
contains a vertical list. 


MODULE138
A |rule_node| stands for a solid black rectangle; it has |width|, 
|depth|, and |height| fields just as in an |hlist_node|. However, if 
any of these dimensions is $-2^{30}$, the actual value will be determined 
by running the rule up to the boundary of the innermost enclosing box. 
This is called a ``running dimension.'' The |width| is never running in 
an hlist; the |height| and |depth| are never running in a~vlist. 


MODULE139
A new rule node is delivered by the |new_rule| function. It 
makes all the dimensions ``running,'' so you have to change the 
ones that are not allowed to run. 


MODULE140
Insertions are represented by |ins_node| records, where the |subtype| 
indicates the corresponding box number. For example, `\.{\\insert 250}' 
leads to an |ins_node| whose |subtype| is |250+min_quarterword|. 
The |height| field of an |ins_node| is slightly misnamed; it actually holds 
the natural height plus depth of the vertical list being inserted. 
The |depth| field holds the |split_max_depth| to be used in case this 
insertion is split, and the |split_top_ptr| points to the corresponding 
|split_top_skip|. The |float_cost| field holds the |floating_penalty| that 
will be used if this insertion floats to a subsequent page after a 
split insertion of the same class.  There is one more field, the 
|ins_ptr|, which points to the beginning of the vlist for the insertion. 


MODULE141
A |mark_node| has a |mark_ptr| field that points to the reference count 
of a token list that contains the user's \.{\\mark} text. 
This field occupies a full word instead of a halfword, because 
there's nothing to put in the other halfword; it is easier in \PASCAL\ to 
use the full word than to risk leaving garbage in the unused half. 


MODULE142
An |adjust_node|, which occurs only in horizontal lists, 
specifies material that will be moved out into the surrounding 
vertical list; i.e., it is used to implement \TeX's `\.{\\vadjust}' 
operation.  The |adjust_ptr| field points to the vlist containing this 
material. 


MODULE143
A |ligature_node|, which occurs only in horizontal lists, specifies 
a character that was fabricated from the interaction of two or more 
actual characters.  The second word of the node, which is called the 
|lig_char| word, contains |font| and |character| fields just as in a 
|char_node|. The characters that generated the ligature have not been 
forgotten, since they are needed for diagnostic messages and for 
hyphenation; the |lig_ptr| field points to a linked list of character 
nodes for all original characters that have been deleted. (This list 
might be empty if the characters that generated the ligature were 
retained in other nodes.) 

The |subtype| field is 0, plus 2 and/or 1 if the original source of the 
ligature included implicit left and/or right boundaries. 


MODULE144
The |new_ligature| function creates a ligature node having given 
contents of the |font|, |character|, and |lig_ptr| fields. We also have 
a |new_lig_item| function, which returns a two-word node having a given 
|character| field. Such nodes are used for temporary processing as ligatures 
are being created. 


MODULE145
A |disc_node|, which occurs only in horizontal lists, specifies a 
``dis\-cretion\-ary'' line break. If such a break occurs at node |p|, the text 
that starts at |pre_break(p)| will precede the break, the text that starts at 
|post_break(p)| will follow the break, and text that appears in the next 
|replace_count(p)| nodes will be ignored. For example, an ordinary 
discretionary hyphen, indicated by `\.{\\-}', yields a |disc_node| with 
|pre_break| pointing to a |char_node| containing a hyphen, |post_break=null|, 
and |replace_count=0|. All three of the discretionary texts must be 
lists that consist entirely of character, kern, box, rule, and ligature nodes. 

If |pre_break(p)=null|, the |ex_hyphen_penalty| will be charged for this 
break.  Otherwise the |hyphen_penalty| will be charged.  The texts will 
actually be substituted into the list by the line-breaking algorithm if it 
decides to make the break, and the discretionary node will disappear at 
that time; thus, the output routine sees only discretionaries that were 
not chosen. 


MODULE146
A |whatsit_node| is a wild card reserved for extensions to \TeX. The 
|subtype| field in its first word says what `\\{whatsit}' it is, and 
implicitly determines the node size (which must be 2 or more) and the 
format of the remaining words. When a |whatsit_node| is encountered 
in a list, special actions are invoked; knowledgeable people who are 
careful not to mess up the rest of \TeX\ are able to make \TeX\ do new 
things by adding code at the end of the program. For example, there 
might be a `\TeX nicolor' extension to specify different colors of ink, 
(*extensions to \TeX*) 
and the whatsit node might contain the desired parameters. 

The present implementation of \TeX\ treats the features associated with 
`\.{\\write}' and `\.{\\special}' as if they were extensions, in order to 
illustrate how such routines might be coded. We shall defer further 
discussion of extensions until the end of this program. 


MODULE147
A |math_node|, which occurs only in horizontal lists, appears before and 
after mathematical formulas. The |subtype| field is |before| before the 
formula and |after| after it. There is a |width| field, which represents 
the amount of surrounding space inserted by \.{\\mathsurround}. 


MODULE148
\TeX\ makes use of the fact that |hlist_node|, |vlist_node|, 
|rule_node|, |ins_node|, |mark_node|, |adjust_node|, |ligature_node|, 
|disc_node|, |whatsit_node|, and |math_node| are at the low end of the 
type codes, by permitting a break at glue in a list if and only if the 
|type| of the previous node is less than |math_node|. Furthermore, a 
node is discarded after a break if its type is |math_node| or~more. 


MODULE149
A |glue_node| represents glue in a list. However, it is really only 
a pointer to a separate glue specification, since \TeX\ makes use of the 
fact that many essentially identical nodes of glue are usually present. 
If |p| points to a |glue_node|, |glue_ptr(p)| points to 
another packet of words that specify the stretch and shrink components, etc. 

Glue nodes also serve to represent leaders; the |subtype| is used to 
distinguish between ordinary glue (which is called |normal|) and the three 
kinds of leaders (which are called |a_leaders|, |c_leaders|, and |x_leaders|). 
The |leader_ptr| field points to a rule node or to a box node containing the 
leaders; it is set to |null| in ordinary glue nodes. 

Many kinds of glue are computed from \TeX's ``skip'' parameters, and 
it is helpful to know which parameter has led to a particular glue node. 
Therefore the |subtype| is set to indicate the source of glue, whenever 
it originated as a parameter. We will be defining symbolic names for the 
parameter numbers later (e.g., |line_skip_code=0|, |baseline_skip_code=1|, 
etc.); it suffices for now to say that the |subtype| of parametric glue 
will be the same as the parameter number, plus~one. 

In math formulas there are two more possibilities for the |subtype| in a 
glue node: |mu_glue| denotes an \.{\\mskip} (where the units are scaled \.{mu} 
instead of scaled \.{pt}); and |cond_math_glue| denotes the `\.{\\nonscript}' 
feature that cancels the glue node immediately following if it appears 
in a subscript. 


MODULE150
A glue specification has a halfword reference count in its first word, 
(*reference counts*) 
representing |null| plus the number of glue nodes that point to it (less one). 
Note that the reference count appears in the same position as 
the |link| field in list nodes; this is the field that is initialized 
to |null| when a node is allocated, and it is also the field that is flagged 
by |empty_flag| in empty nodes. 

Glue specifications also contain three |scaled| fields, for the |width|, 
|stretch|, and |shrink| dimensions. Finally, there are two one-byte 
fields called |stretch_order| and |shrink_order|; these contain the 
orders of infinity (|normal|, |fil|, |fill|, or |filll|) 
corresponding to the stretch and shrink values. 


MODULE151
Here is a function that returns a pointer to a copy of a glue spec. 
The reference count in the copy is |null|, because there is assumed 
to be exactly one reference to the new specification. 


MODULE152
And here's a function that creates a glue node for a given parameter 
identified by its code number; for example, 
|new_param_glue(line_skip_code)| returns a pointer to a glue node for the 
current \.{\\lineskip}. 


MODULE153
Glue nodes that are more or less anonymous are created by |new_glue|, 
whose argument points to a glue specification. 


MODULE154
Still another subroutine is needed: This one is sort of a combination 
of |new_param_glue| and |new_glue|. It creates a glue node for one of 
the current glue parameters, but it makes a fresh copy of the glue 
specification, since that specification will probably be subject to change, 
while the parameter will stay put. The global variable |temp_ptr| is 
set to the address of the new spec. 


MODULE155
A |kern_node| has a |width| field to specify a (normally negative) 
amount of spacing. This spacing correction appears in horizontal lists 
between letters like A and V when the font designer said that it looks 
better to move them closer together or further apart. A kern node can 
also appear in a vertical list, when its `|width|' denotes additional 
spacing in the vertical direction. The |subtype| is either |normal| (for 
kerns inserted from font information or math mode calculations) or |explicit| 
(for kerns inserted from \.{\\kern} and \.{\\/} commands) or |acc_kern| 
(for kerns inserted from non-math accents) or |mu_glue| (for kerns 
inserted from \.{\\mkern} specifications in math formulas). 


MODULE156
The |new_kern| function creates a kern node having a given width. 


MODULE157
A |penalty_node| specifies the penalty associated with line or page 
breaking, in its |penalty| field. This field is a fullword integer, but 
the full range of integer values is not used: Any penalty |>=10000| is 
treated as infinity, and no break will be allowed for such high values. 
Similarly, any penalty |<=-10000| is treated as negative infinity, and a 
break will be forced. 


MODULE158
Anyone who has been reading the last few sections of the program will 
be able to guess what comes next. 


MODULE159
You might think that we have introduced enough node types by now. Well, 
almost, but there is one more: An |unset_node| has nearly the same format 
as an |hlist_node| or |vlist_node|; it is used for entries in \.{\\halign} 
or \.{\\valign} that are not yet in their final form, since the box 
dimensions are their ``natural'' sizes before any glue adjustment has been 
made. The |glue_set| word is not present; instead, we have a |glue_stretch| 
field, which contains the total stretch of order |glue_order| that is 
present in the hlist or vlist being boxed. 
Similarly, the |shift_amount| field is replaced by a |glue_shrink| field, 
containing the total shrink of order |glue_sign| that is present. 
The |subtype| field is called |span_count|; an unset box typically 
contains the data for |qo(span_count)+1| columns. 
Unset nodes will be changed to box nodes when alignment is completed. 


MODULE160
In fact, there are still more types coming. When we get to math formula 
processing we will see that a |style_node| has |type=14|; and a number 
of larger type codes will also be defined, for use in math mode only. 


MODULE161
Warning: If any changes are made to these data structure layouts, such as 
changing any of the node sizes or even reordering the words of nodes, 
the |copy_node_list| procedure and the memory initialization code 
below may have to be changed. Such potentially dangerous parts of the 
program are listed in the index under `data structure assumptions'. 
(*data structure assumptions*) 
However, other references to the nodes are made symbolically in terms of 
the \.{WEB} macro definitions above, so that format changes will leave 
\TeX's other algorithms intact. 
(*system dependencies*) 


SPECIAL MODULE 162:  \[11] Memory layout.

Some areas of |mem| are dedicated to fixed usage, since static allocation is 
more efficient than dynamic allocation when we can get away with it. For 
example, locations |mem_bot| to |mem_bot+3| are always used to store the 
specification for glue that is `\.{0pt plus 0pt minus 0pt}'. The 
following macro definitions accomplish the static allocation by giving 
symbolic names to the fixed positions. Static variable-size nodes appear 
in locations |mem_bot| through |lo_mem_stat_max|, and static single-word nodes 
appear in locations |hi_mem_stat_min| through |mem_top|, inclusive. It is 
harmless to let |lig_trick| and |garbage| share the same location of |mem|. 


MODULE163
The following code gets |mem| off to a good start, when \TeX\ is 
initializing itself the slow~way. 


MODULE164

MODULE165
If \TeX\ is extended improperly, the |mem| array might get screwed up. 
For example, some pointers might be wrong, or some ``dead'' nodes might not 
have been freed when the last reference to them disappeared. Procedures 
|check_mem| and |search_mem| are available to help diagnose such 
problems. These procedures make use of two arrays called |free| and 
|was_free| that are present only if \TeX's debugging routines have 
been included. (You may want to decrease the size of |mem| while you 
(*debugging*) 
are debugging.) 


MODULE166

MODULE167
Procedure |check_mem| makes sure that the available space lists of 
|mem| are well formed, and it optionally prints out all locations 
that are reserved now but were free the last time this procedure was called. 


MODULE168

MODULE169

MODULE170

MODULE171

MODULE172
The |search_mem| procedure attempts to answer the question ``Who points 
to node~|p|?'' In doing so, it fetches |link| and |info| fields of |mem| 
that might not be of type |two_halves|. Strictly speaking, this is 
(*dirty \PASCAL*) 
undefined in \PASCAL, and it can lead to ``false drops'' (words that seem to 
point to |p| purely by coincidence). But for debugging purposes, we want 
to rule out the places that do {\sl not\/} point to |p|, so a few false 
drops are tolerable. 


SPECIAL MODULE 173:  \[12] Displaying boxes.

We can reinforce our knowledge of the data structures just introduced 
by considering two procedures that display a list in symbolic form. 
The first of these, called |short_display|, is used in ``overfull box'' 
messages to give the top-level description of a list. The other one, 
called |show_node_list|, prints a detailed description of exactly what 
is in the data structure. 

The philosophy of |short_display| is to ignore the fine points about exactly 
what is inside boxes, except that ligatures and discretionary breaks are 
expanded. As a result, |short_display| is a recursive procedure, but the 
recursion is never more than one level deep. 
(*recursion*) 

A global variable |font_in_short_display| keeps track of the font code that 
is assumed to be present when |short_display| begins; deviations from this 
font will be printed. 


MODULE174
Boxes, rules, inserts, whatsits, marks, and things in general that are 
sort of ``complicated'' are indicated only by printing `\.{[]}'. 


MODULE175

MODULE176
The |show_node_list| routine requires some auxiliary subroutines: one to 
print a font-and-character combination, one to print a token list without 
its reference count, and one to print a rule dimension. 


MODULE177
Then there is a subroutine that prints glue stretch and shrink, possibly 
followed by the name of finite units: 


MODULE178
The next subroutine prints a whole glue specification. 


MODULE179
We also need to declare some procedures that appear later in this 
documentation. 


MODULE180
Since boxes can be inside of boxes, |show_node_list| is inherently recursive, 
(*recursion*) 
up to a given maximum number of levels.  The history of nesting is indicated 
by the current string, which will be printed at the beginning of each line; 
the length of this string, namely |cur_length|, is the depth of nesting. 

Recursive calls on |show_node_list| therefore use the following pattern: 


MODULE181
A global variable called |depth_threshold| is used to record the maximum 
depth of nesting for which |show_node_list| will show information.  If we 
have |depth_threshold=0|, for example, only the top level information will 
be given and no sublists will be traversed. Another global variable, called 
|breadth_max|, tells the maximum number of items to show at each level; 
|breadth_max| had better be positive, or you won't see anything. 


MODULE182
Now we are ready for |show_node_list| itself. This procedure has been 
written to be ``extra robust'' in the sense that it should not crash or get 
into a loop even if the data structures have been messed up by bugs in 
the rest of the program. You can safely call its parent routine 
|show_box(p)| for arbitrary values of |p| when you are debugging \TeX. 
However, in the presence of bad data, the procedure may 
(*dirty \PASCAL*)(*debugging*) 
fetch a |memory_word| whose variant is different from the way it was stored; 
for example, it might try to read |mem[p].hh| when |mem[p]| 
contains a scaled integer, if |p| is a pointer that has been 
clobbered or chosen at random. 


MODULE183

MODULE184

MODULE185

MODULE186
The code will have to change in this place if |glue_ratio| is 
a structured type instead of an ordinary |real|. Note that this routine 
should avoid arithmetic errors even if the |glue_set| field holds an 
arbitrary random value. The following code assumes that a properly 
formed nonzero |real| number has absolute value $2^{20}$ or more when 
it is regarded as an integer; this precaution was adequate to prevent 
floating point underflow on the author's computer. 
(*system dependencies*) 
(*dirty \PASCAL*) 


MODULE187

MODULE188

MODULE189

MODULE190

MODULE191
An ``explicit'' kern value is indicated implicitly by an explicit space. 


MODULE192

MODULE193

MODULE194

MODULE195
The |post_break| list of a discretionary node is indicated by a prefixed 
`\.{\char'174]' instead of the `\..' before the |pre_break| list. 


MODULE196

MODULE197

MODULE198
The recursive machinery is started by calling |show_box|. 
(*recursion*) 


SPECIAL MODULE 199:  \[13] Destroying boxes.

When we are done with a node list, we are obliged to return it to free 
storage, including all of its sublists. The recursive procedure 
|flush_node_list| does this for us. 


MODULE200
First, however, we shall consider two non-recursive procedures that do 
simpler tasks. The first of these, |delete_token_ref|, is called when 
a pointer to a token list's reference count is being removed. This means 
that the token list should disappear if the reference count was |null|, 
otherwise the count should be decreased by one. 
(*reference counts*) 


MODULE201
Similarly, |delete_glue_ref| is called when a pointer to a glue 
specification is being withdrawn. 
(*reference counts*) 

MODULE202
Now we are ready to delete any node list, recursively. 
In practice, the nodes deleted are usually charnodes (about 2/3 of the time), 
and they are glue nodes in about half of the remaining cases. 
(*recursion*) 


SPECIAL MODULE 203:  \[14] Copying boxes.

Another recursive operation that acts on boxes is sometimes needed: The 
procedure |copy_node_list| returns a pointer to another node list that has 
the same structure and meaning as the original. Note that since glue 
specifications and token lists have reference counts, we need not make 
copies of them. Reference counts can never get too large to fit in a 
halfword, since each pointer to a node is in a different memory address, 
and the total number of memory addresses fits in a halfword. 
(*recursion*) 
(*reference counts*) 

(Well, there actually are also references from outside |mem|; if the 
|save_stack| is made arbitrarily large, it would theoretically be possible 
to break \TeX\ by overflowing a reference count. But who would want to do that?) 


MODULE204
The copying procedure copies words en masse without bothering 
to look at their individual fields. If the node format changes---for 
example, if the size is altered, or if some link field is moved to another 
relative position---then this code may need to be changed too. 
(*data structure assumptions*) 


MODULE205

MODULE206

SPECIAL MODULE 207:  \[15] The command codes.

Before we can go any further, we need to define symbolic names for the internal 
code numbers that represent the various commands obeyed by \TeX. These codes 
are somewhat arbitrary, but not completely so. For example, the command 
codes for character types are fixed by the language, since a user says, 
e.g., `\.[\\catcode \`\\\${} = 3]' to make \.[\char'44} a math delimiter, 
and the command code |math_shift| is equal to~3. Some other codes have 
been made adjacent so that |case| statements in the program need not consider 
cases that are widely spaced, or so that |case| statements can be replaced 
by |if| statements. 

At any rate, here is the list, for future reference. First come the 
``catcode'' commands, several of which share their numeric codes with 
ordinary commands when the catcode cannot emerge from \TeX's scanning routine. 


MODULE208
Next are the ordinary run-of-the-mill command codes.  Codes that are 
|min_internal| or more represent internal quantities that might be 
expanded by `\.{\\the}'. 


MODULE209
The next codes are special; they all relate to mode-independent 
assignment of values to \TeX's internal registers or tables. 
Codes that are |max_internal| or less represent internal quantities 
that might be expanded by `\.{\\the}'. 


MODULE210
The remaining command codes are extra special, since they cannot get through 
\TeX's scanner to the main control routine. They have been given values higher 
than |max_command| so that their special nature is easily discernible. 
The ``expandable'' commands come first. 


SPECIAL MODULE 211:  \[16] The semantic nest.

\TeX\ is typically in the midst of building many lists at once. For example, 
when a math formula is being processed, \TeX\ is in math mode and 
working on an mlist; this formula has temporarily interrupted \TeX\ from 
being in horizontal mode and building the hlist of a paragraph; and this 
paragraph has temporarily interrupted \TeX\ from being in vertical mode 
and building the vlist for the next page of a document. Similarly, when a 
\.{\\vbox} occurs inside of an \.{\\hbox}, \TeX\ is temporarily 
interrupted from working in restricted horizontal mode, and it enters 
internal vertical mode.  The ``semantic nest'' is a stack that 
keeps track of what lists and modes are currently suspended. 

At each level of processing we are in one of six modes: 

\yskip\hang|vmode| stands for vertical mode (the page builder); 

\hang|hmode| stands for horizontal mode (the paragraph builder); 

\hang|mmode| stands for displayed formula mode; 

\hang|-vmode| stands for internal vertical mode (e.g., in a \.{\\vbox}); 

\hang|-hmode| stands for restricted horizontal mode (e.g., in an \.{\\hbox}); 

\hang|-mmode| stands for math formula mode (not displayed). 

\yskip\noindent The mode is temporarily set to zero while processing \.{\\write} 
texts in the |ship_out| routine. 

Numeric values are assigned to |vmode|, |hmode|, and |mmode| so that 
\TeX's ``big semantic switch'' can select the appropriate thing to 
do by computing the value |abs(mode)+cur_cmd|, where |mode| is the current 
mode and |cur_cmd| is the current command code. 


MODULE212
The state of affairs at any semantic level can be represented by 
five values: 

\yskip\hang|mode| is the number representing the semantic mode, as 
just explained. 

\yskip\hang|head| is a |pointer| to a list head for the list being built; 
|link(head)| therefore points to the first element of the list, or 
to |null| if the list is empty. 

\yskip\hang|tail| is a |pointer| to the final node of the list being 
built; thus, |tail=head| if and only if the list is empty. 

\yskip\hang|prev_graf| is the number of lines of the current paragraph that 
have already been put into the present vertical list. 

\yskip\hang|aux| is an auxiliary |memory_word| that gives further information 
that is needed to characterize the situation. 

\yskip\noindent 
In vertical mode, |aux| is also known as |prev_depth|; it is the scaled 
value representing the depth of the previous box, for use in baseline 
calculations, or it is |<=-1000|pt if the next box on the vertical list is to 
be exempt from baseline calculations.  In horizontal mode, |aux| is also 
known as |space_factor| and |clang|; it holds the current space factor used in 
spacing calculations, and the current language used for hyphenation. 
(The value of |clang| is undefined in restricted horizontal mode.) 
In math mode, |aux| is also known as |incompleat_noad|; if 
not |null|, it points to a record that represents the numerator of a 
generalized fraction for which the denominator is currently being formed 
in the current list. 

There is also a sixth quantity, |mode_line|, which correlates 
the semantic nest with the user's input; |mode_line| contains the source 
line number at which the current level of nesting was entered. The negative 
of this line number is the |mode_line| at the level of the 
user's output routine. 

In horizontal mode, the |prev_graf| field is used for initial language data. 

The semantic nest is an array called |nest| that holds the |mode|, |head|, 
|tail|, |prev_graf|, |aux|, and |mode_line| values for all semantic levels 
below the currently active one. Information about the currently active 
level is kept in the global quantities |mode|, |head|, |tail|, |prev_graf|, 
|aux|, and |mode_line|, which live in a \PASCAL\ record that is ready to 
be pushed onto |nest| if necessary. 


MODULE213

MODULE214
Here is a common way to make the current list grow: 


MODULE215
We will see later that the vertical list at the bottom semantic level is split 
into two parts; the ``current page'' runs from |page_head| to |page_tail|, 
and the ``contribution list'' runs from |contrib_head| to |tail| of 
semantic level zero. The idea is that contributions are first formed in 
vertical mode, then ``contributed'' to the current page (during which time 
the page-breaking decisions are made). For now, we don't need to know 
any more details about the page-building process. 


MODULE216
When \TeX's work on one level is interrupted, the state is saved by 
calling |push_nest|. This routine changes |head| and |tail| so that 
a new (empty) list is begun; it does not change |mode| or |aux|. 


MODULE217
Conversely, when \TeX\ is finished on the current level, the former 
state is restored by calling |pop_nest|. This routine will never be 
called at the lowest semantic level, nor will it be called unless |head| 
is a node that should be returned to free memory. 


MODULE218
Here is a procedure that displays what \TeX\ is working on, at all levels. 


MODULE219

SPECIAL MODULE 220:  \[17] The table of equivalents.

Now that we have studied the data structures for \TeX's semantic routines, 
we ought to consider the data structures used by its syntactic routines. In 
other words, our next concern will be 
the tables that \TeX\ looks at when it is scanning 
what the user has written. 

The biggest and most important such table is called |eqtb|. It holds the 
current ``equivalents'' of things; i.e., it explains what things mean 
or what their current values are, for all quantities that are subject to 
the nesting structure provided by \TeX's grouping mechanism. There are six 
parts to |eqtb|: 

\yskip\hangg 1) |eqtb[active_base..(hash_base-1)]| holds the current 
equivalents of single-character control sequences. 

\yskip\hangg 2) |eqtb[hash_base..(glue_base-1)]| holds the current 
equivalents of multiletter control sequences. 

\yskip\hangg 3) |eqtb[glue_base..(local_base-1)]| holds the current 
equivalents of glue parameters like the current baselineskip. 

\yskip\hangg 4) |eqtb[local_base..(int_base-1)]| holds the current 
equivalents of local halfword quantities like the current box registers, 
the current ``catcodes,'' the current font, and a pointer to the current 
paragraph shape. 

\yskip\hangg 5) |eqtb[int_base..(dimen_base-1)]| holds the current 
equivalents of fullword integer parameters like the current hyphenation 
penalty. 

\yskip\hangg 6) |eqtb[dimen_base..eqtb_size]| holds the current equivalents 
of fullword dimension parameters like the current hsize or amount of 
hanging indentation. 

\yskip\noindent Note that, for example, the current amount of 
baselineskip glue is determined by the setting of a particular location 
in region~3 of |eqtb|, while the current meaning of the control sequence 
`\.{\\baselineskip}' (which might have been changed by \.{\\def} or 
\.{\\let}) appears in region~2. 


MODULE221
Each entry in |eqtb| is a |memory_word|. Most of these words are of type 
|two_halves|, and subdivided into three fields: 

\yskip\hangg 1) The |eq_level| (a quarterword) is the level of grouping at 
which this equivalent was defined. If the level is |level_zero|, the 
equivalent has never been defined; |level_one| refers to the outer level 
(outside of all groups), and this level is also used for global 
definitions that never go away. Higher levels are for equivalents that 
will disappear at the end of their group.  (*global definitions*) 

\yskip\hangg 2) The |eq_type| (another quarterword) specifies what kind of 
entry this is. There are many types, since each \TeX\ primitive like 
\.{\\hbox}, \.{\\def}, etc., has its own special code. The list of 
command codes above includes all possible settings of the |eq_type| field. 

\yskip\hangg 3) The |equiv| (a halfword) is the current equivalent value. 
This may be a font number, a pointer into |mem|, or a variety of other 
things. 


MODULE222
Many locations in |eqtb| have symbolic names. The purpose of the next 
paragraphs is to define these names, and to set up the initial values of the 
equivalents. 

In the first region we have 256 equivalents for ``active characters'' that 
act as control sequences, followed by 256 equivalents for single-character 
control sequences. 

Then comes region~2, which corresponds to the hash table that we will 
define later.  The maximum address in this region is used for a dummy 
control sequence that is perpetually undefined. There also are several 
locations for control sequences that are perpetually defined 
(since they are used in error recovery). 


MODULE223
Here is a routine that displays the current meaning of an |eqtb| entry 
in region 1 or~2. (Similar routines for the other regions will appear 
below.) 


MODULE224
Region 3 of |eqtb| contains the 256 \.{\\skip} registers, as well as the 
glue parameters defined here. It is important that the ``muskip'' 
parameters have larger numbers than the others. 


MODULE225
Sometimes we need to convert \TeX's internal code numbers into symbolic 
form. The |print_skip_param| routine gives the symbolic name of a glue 
parameter. 


MODULE226
The symbolic names for glue parameters are put into \TeX's hash table 
by using the routine called |primitive|, defined below. Let us enter them 
now, so that we don't have to list all those parameter names anywhere else. 


MODULE227

MODULE228
All glue parameters and registers are initially `\.{0pt plus0pt minus0pt}'. 


MODULE229

MODULE230
Region 4 of |eqtb| contains the local quantities defined here. The 
bulk of this region is taken up by five tables that are indexed by eight-bit 
characters; these tables are important to both the syntactic and semantic 
portions of \TeX. There are also a bunch of special things like font and 
token parameters, as well as the tables of \.{\\toks} and \.{\\box} 
registers. 


MODULE231

MODULE232
We initialize most things to null or undefined values. An undefined font 
is represented by the internal code |font_base|. 

However, the character code tables are given initial values based on the 
conventional interpretation of ASCII code. These initial values should 
not be changed when \TeX\ is adapted for use with non-English languages; 
all changes to the initialization conventions should be made in format 
packages, not in \TeX\ itself, so that global interchange of formats is 
possible. 


MODULE233

MODULE234

MODULE235

MODULE236
Region 5 of |eqtb| contains the integer parameters and registers defined 
here, as well as the |del_code| table. The latter table differs from the 
|cat_code..math_code| tables that precede it, since delimiter codes are 
fullword integers while the other kinds of codes occupy at most a 
halfword. This is what makes region~5 different from region~4. We will 
store the |eq_level| information in an auxiliary array of quarterwords 
that will be defined later. 


MODULE237
We can print the symbolic name of an integer parameter as follows. 


MODULE238
The integer parameter names must be entered into the hash table. 


MODULE239

MODULE240
The integer parameters should really be initialized by a macro package; 
the following initialization does the minimum to keep \TeX\ from 
complete failure. 
(*null delimiter*) 


MODULE241
The following procedure, which is called just before \TeX\ initializes its 
input and output, establishes the initial values of the date and time. 
(*system dependencies*) 
Since standard \PASCAL\ cannot provide such information, something special 
is needed. The program here simply specifies July 4, 1776, at noon; but 
users probably want a better approximation to the truth. 


MODULE242

MODULE243

INSERT: 'Set variable |c| to the current escape character'
=c:=escape_char 


MODULE244

INSERT: 'Character |s| is the current new-line character'
=s=new_line_char 


MODULE245
\TeX\ is occasionally supposed to print diagnostic information that 
goes only into the transcript file, unless |tracing_online| is positive. 
Here are two routines that adjust the destination of print commands: 


MODULE246
Of course we had better declare another global variable, if the previous 
routines are going to work. 


MODULE247
The final region of |eqtb| contains the dimension parameters defined 
here, and the 256 \.{\\dimen} registers. 


MODULE248

MODULE249

MODULE250

MODULE251

MODULE252
Here is a procedure that displays the contents of |eqtb[n]| 
symbolically. 


MODULE253
The last two regions of |eqtb| have fullword values instead of the 
three fields |eq_level|, |eq_type|, and |equiv|. An |eq_type| is unnecessary, 
but \TeX\ needs to store the |eq_level| information in another array 
called |xeq_level|. 


MODULE254

MODULE255
When the debugging routine |search_mem| is looking for pointers having a 
given value, it is interested only in regions 1 to~3 of~|eqtb|, and in the 
first part of region~4. 


SPECIAL MODULE 256:  \[18] The hash table.

Control sequences are stored and retrieved by means of a fairly standard hash 
table algorithm called the method of ``coalescing lists'' (cf.\ Algorithm 6.4C 
in {\sl The Art of Computer Programming\/}). Once a control sequence enters the 
table, it is never removed, because there are complicated situations 
involving \.{\\gdef} where the removal of a control sequence at the end of 
a group would be a mistake preventable only by the introduction of a 
complicated reference-count mechanism. 

The actual sequence of letters forming a control sequence identifier is 
stored in the |str_pool| array together with all the other strings. An 
auxiliary array |hash| consists of items with two halfword fields per 
word. The first of these, called |next(p)|, points to the next identifier 
belonging to the same coalesced list as the identifier corresponding to~|p|; 
and the other, called |text(p)|, points to the |str_start| entry for 
|p|'s identifier. If position~|p| of the hash table is empty, we have 
|text(p)=0|; if position |p| is either empty or the end of a coalesced 
hash list, we have |next(p)=0|. An auxiliary pointer variable called 
|hash_used| is maintained in such a way that all locations |p>=hash_used| 
are nonempty. The global variable |cs_count| tells how many multiletter 
control sequences have been defined, if statistics are being kept. 

A global boolean variable called |no_new_control_sequence| is set to 
|true| during the time that new hash table entries are forbidden. 


MODULE257

MODULE258

MODULE259
Here is the subroutine that searches the hash table for an identifier 
that matches a given string of length |l>1| appearing in |buffer[j.. 
(j+l-1)]|. If the identifier is found, the corresponding hash table address 
is returned. Otherwise, if the global variable |no_new_control_sequence| 
is |true|, the dummy address |undefined_control_sequence| is returned. 
Otherwise the identifier is inserted into the hash table and its location 
is returned. 


MODULE260

MODULE261
The value of |hash_prime| should be roughly 85\pct! of |hash_size|, and it 
should be a prime number.  The theory of hashing tells us to expect fewer 
than two table probes, on the average, when the search is successful. 
[See J.~S. Vitter, {\sl Journal of the ACM\/ \bf30} (1983), 231--258.] 
(*Vitter, Jeffrey Scott*) 


MODULE262
Single-character control sequences do not need to be looked up in a hash 
table, since we can use the character code itself as a direct address. 
The procedure |print_cs| prints the name of a control sequence, given 
a pointer to its address in |eqtb|. A space is printed after the name 
unless it is a single nonletter or an active character. This procedure 
might be invoked with invalid data, so it is ``extra robust.'' The 
individual characters must be printed one at a time using |print|, since 
they may be unprintable. 


MODULE263
Here is a similar procedure; it avoids the error checks, and it never 
prints a space after the control sequence. 


MODULE264
We need to put \TeX's ``primitive'' control sequences into the hash 
table, together with their command code (which will be the |eq_type|) 
and an operand (which will be the |equiv|). The |primitive| procedure 
does this, in a way that no \TeX\ user can. The global value |cur_val| 
contains the new |eqtb| pointer after |primitive| has acted. 


MODULE265
Many of \TeX's primitives need no |equiv|, since they are identifiable 
by their |eq_type| alone. These primitives are loaded into the hash table 
as follows: 


MODULE266
Each primitive has a corresponding inverse, so that it is possible to 
display the cryptic numeric contents of |eqtb| in symbolic form. 
Every call of |primitive| in this program is therefore accompanied by some 
straightforward code that forms part of the |print_cmd_chr| routine 
below. 


MODULE267
We will deal with the other primitives later, at some point in the program 
where their |eq_type| and |equiv| values are more meaningful.  For example, 
the primitives for math mode will be loaded when we consider the routines 
that deal with formulas. It is easy to find where each particular 
primitive was treated by looking in the index at the end; for example, the 
section where |'radical'| entered |eqtb| is listed under `\.{\\radical} 
primitive'. (Primitives consisting of a single nonalphabetic character, 
like `\.{\\/}', are listed under `Single-character primitives'.) 
(*Single-character primitives*) 

Meanwhile, this is a convenient place to catch up on something we were unable 
to do before the hash table was defined: 


SPECIAL MODULE 268:  \[19] Saving and restoring equivalents.

The nested structure provided by `$\.{\char'173}\ldots\.{\char'175}$' groups 
in \TeX\ means that |eqtb| entries valid in outer groups should be saved 
and restored later if they are overridden inside the braces. When a new |eqtb| 
value is being assigned, the program therefore checks to see if the previous 
entry belongs to an outer level. In such a case, the old value is placed 
on the |save_stack| just before the new value enters |eqtb|. At the 
end of a grouping level, i.e., when the right brace is sensed, the 
|save_stack| is used to restore the outer values, and the inner ones are 
destroyed. 

Entries on the |save_stack| are of type |memory_word|. The top item on 
this stack is |save_stack[p]|, where |p=save_ptr-1|; it contains three 
fields called |save_type|, |save_level|, and |save_index|, and it is 
interpreted in one of four ways: 

\yskip\hangg 1) If |save_type(p)=restore_old_value|, then 
|save_index(p)| is a location in |eqtb| whose current value should 
be destroyed at the end of the current group and replaced by |save_stack[p-1]|. 
Furthermore if |save_index(p)>=int_base|, then |save_level(p)| 
should replace the corresponding entry in |xeq_level|. 

\yskip\hangg 2) If |save_type(p)=restore_zero|, then |save_index(p)| 
is a location in |eqtb| whose current value should be destroyed at the end 
of the current group, when it should be 
replaced by the current value of |eqtb[undefined_control_sequence]|. 

\yskip\hangg 3) If |save_type(p)=insert_token|, then |save_index(p)| 
is a token that should be inserted into \TeX's input when the current 
group ends. 

\yskip\hangg 4) If |save_type(p)=level_boundary|, then |save_level(p)| 
is a code explaining what kind of group we were previously in, and 
|save_index(p)| points to the level boundary word at the bottom of 
the entries for that group. 


MODULE269
Here are the group codes that are used to discriminate between different 
kinds of groups. They allow \TeX\ to decide what special actions, if any, 
should be performed when a group ends. 
\def\grp{\.[\char'173...\char'175]} 

Some groups are not supposed to be ended by right braces. For example, 
the `\.\$' that begins a math formula causes a |math_shift_group| to 
be started, and this should be terminated by a matching `\.\$'. Similarly, 
a group that starts with \.{\\left} should end with \.{\\right}, and 
one that starts with \.{\\begingroup} should end with \.{\\endgroup}. 


MODULE270
The global variable |cur_group| keeps track of what sort of group we are 
currently in. Another global variable, |cur_boundary|, points to the 
topmost |level_boundary| word.  And |cur_level| is the current depth of 
nesting. The routines are designed to preserve the condition that no entry 
in the |save_stack| or in |eqtb| ever has a level greater than |cur_level|. 


MODULE271

MODULE272
At this time it might be a good idea for the reader to review the introduction 
to |eqtb| that was given above just before the long lists of parameter names. 
Recall that the ``outer level'' of the program is |level_one|, since 
undefined control sequences are assumed to be ``defined'' at |level_zero|. 


MODULE273
The following macro is used to test if there is room for up to six more 
entries on |save_stack|. By making a conservative test like this, we can 
get by with testing for overflow in only a few places. 


MODULE274
Procedure |new_save_level| is called when a group begins. The 
argument is a group identification code like `|hbox_group|'. After 
calling this routine, it is safe to put five more entries on |save_stack|. 

In some cases integer-valued items are placed onto the 
|save_stack| just below a |level_boundary| word, because this is a 
convenient place to keep information that is supposed to ``pop up'' just 
when the group has finished. 
For example, when `\.{\\hbox to 100pt}\grp' is being treated, the 100pt 
dimension is stored on |save_stack| just before |new_save_level| is 
called. 

We use the notation |saved(k)| to stand for an integer item that 
appears in location |save_ptr+k| of the save stack. 


MODULE275
Just before an entry of |eqtb| is changed, the following procedure should 
be called to update the other data structures properly. It is important 
to keep in mind that reference counts in |mem| include references from 
within |save_stack|, so these counts must be handled carefully. 
(*reference counts*) 


MODULE276
To save a value of |eqtb[p]| that was established at level |l|, we 
can use the following subroutine. 


MODULE277
The procedure |eq_define| defines an |eqtb| entry having specified 
|eq_type| and |equiv| fields, and saves the former value if appropriate. 
This procedure is used only for entries in the first four regions of |eqtb|, 
i.e., only for entries that have |eq_type| and |equiv| fields. 
After calling this routine, it is safe to put four more entries on 
|save_stack|, provided that there was room for four more entries before 
the call, since |eq_save| makes the necessary test. 


MODULE278
The counterpart of |eq_define| for the remaining (fullword) positions in 
|eqtb| is called |eq_word_define|. Since |xeq_level[p]>=level_one| for all 
|p|, a `|restore_zero|' will never be used in this case. 


MODULE279
The |eq_define| and |eq_word_define| routines take care of local definitions. 
(*global definitions*) 
Global definitions are done in almost the same way, but there is no need 
to save old values, and the new value is associated with |level_one|. 


MODULE280
Subroutine |save_for_after| puts a token on the stack for save-keeping. 


MODULE281
The |unsave| routine goes the other way, taking items off of |save_stack|. 
This routine takes care of restoration when a level ends; everything 
belonging to the topmost group is cleared off of the save stack. 


MODULE282

MODULE283
A global definition, which sets the level to |level_one|, 
(*global definitions*) 
will not be undone by |unsave|. If at least one global definition of 
|eqtb[p]| has been carried out within the group that just ended, the 
last such definition will therefore survive. 


MODULE284

MODULE285
When looking for possible pointers to a memory location, it is helpful 
to look for references from |eqtb| that might be waiting on the 
save stack. Of course, we might find spurious pointers too; but this 
routine is merely an aid when debugging, and at such times we are 
grateful for any scraps of information, even if they prove to be irrelevant. 
(*dirty \PASCAL*) 


MODULE286
Most of the parameters kept in |eqtb| can be changed freely, but there's 
an exception:  The magnification should not be used with two different 
values during any \TeX\ job, since a single magnification is applied to an 
entire run. The global variable |mag_set| is set to the current magnification 
whenever it becomes necessary to ``freeze'' it at a particular value. 


MODULE287

MODULE288
The |prepare_mag| subroutine is called whenever \TeX\ wants to use |mag| 
for magnification. 


SPECIAL MODULE 289:  \[20] Token lists.

A \TeX\ token is either a character or a control sequence, and it is 
(*token*) 
represented internally in one of two ways: (1)~A character whose ASCII 
code number is |c| and whose command code is |m| is represented as the 
number $2^8m+c$; the command code is in the range |1<=m<=14|. (2)~A control 
sequence whose |eqtb| address is |p| is represented as the number 
|cs_token_flag+p|. Here |cs_token_flag=(*$2^{12}-1$*)| is larger than 
$2^8m+c$, yet it is small enough that |cs_token_flag+p< max_halfword|; 
thus, a token fits comfortably in a halfword. 

A token |t| represents a |left_brace| command if and only if 
|t<left_brace_limit|; it represents a |right_brace| command if and only if 
we have |left_brace_limit<=t<right_brace_limit|; and it represents a |match| or 
|end_match| command if and only if |match_token<=t<=end_match_token|. 
The following definitions take care of these token-oriented constants 
and a few others. 


MODULE290

MODULE291
A token list is a singly linked list of one-word nodes in |mem|, where 
each word contains a token and a link. Macro definitions, output-routine 
definitions, marks, \.{\\write} texts, and a few other things 
are remembered by \TeX\ in the form 
of token lists, usually preceded by a node with a reference count in its 
|token_ref_count| field. The token stored in location |p| is called 
|info(p)|. 

Three special commands appear in the token lists of macro definitions. 
When |m=match|, it means that \TeX\ should scan a parameter 
for the current macro; when |m=end_match|, it means that parameter 
matching should end and \TeX\ should start reading the macro text; and 
when |m=out_param|, it means that \TeX\ should insert parameter 
number |c| into the text at this point. 

The enclosing \.{\char'173} and \.{\char'175} characters of a macro 
definition are omitted, but the final right brace of an output routine 
is included at the end of its token list. 

Here is an example macro definition that illustrates these conventions. 
After \TeX\ processes the text 
$$\.{\\def\\mac a\#1\#2 \\b \[\#1\\-a \#\#1\#2 \#2\]}$$ 
the definition of \.{\\mac} is represented as a token list containing 
$$\def\,{\hskip2pt} 
\vbox{\halign[\hfil#\hfil\cr 
(reference count), |letter|\,\.a, |match|\,\#, |match|\,\#, |spacer|\,\.\ , 
\.[\\b], |end_match|,\cr 
|out_param|\,1, \.[\\-], |letter|\,\.a, |spacer|\,\.\ , |mac_param|\,\#, 
|other_char|\,\.1,\cr 
|out_param|\,2, |spacer|\,\.\ , |out_param|\,2.\cr]}$$ 
The procedure |scan_toks| builds such token lists, and |macro_call| 
does the parameter matching. 
(*reference counts*) 

Examples such as 
$$\.{\\def\\m\[\\def\\m\[a\]\ b\]}$$ 
explain why reference counts would be needed even if \TeX\ had no \.{\\let} 
operation: When the token list for \.{\\m} is being read, the redefinition of 
\.{\\m} changes the |eqtb| entry before the token list has been fully 
consumed, so we dare not simply destroy a token list when its 
control sequence is being redefined. 

If the parameter-matching part of a definition ends with `\.{\#\[]', 
the corresponding token list will have `\.\[' just before the `|end_match|' 
and also at the very end. The first `\.\[' is used to delimit the parameter; the 
second one keeps the first from disappearing. 


MODULE292
The procedure |show_token_list|, which prints a symbolic form of 
the token list that starts at a given node |p|, illustrates these 
conventions. The token list being displayed should not begin with a reference 
count. However, the procedure is intended to be robust, so that if the 
memory links are awry or if |p| is not really a pointer to a token list, 
nothing catastrophic will happen. 

An additional parameter |q| is also given; this parameter is either null 
or it points to a node in the token list where a certain magic computation 
takes place that will be explained later. (Basically, |q| is non-null when 
we are printing the two-line context information at the time of an error 
message; |q| marks the place corresponding to where the second line 
should begin.) 

For example, if |p| points to the node containing the first \.a in the 
token list above, then |show_token_list| will print the string 
$$\hbox[`\.[a\#1\#2\ \\b\ ->\#1\\-a\ \#\#1\#2\ \#2]';]$$ 
and if |q| points to the node containing the second \.a, 
the magic computation will be performed just before the second \.a is printed. 

The generation will stop, and `\.[\\ETC.]' will be printed, if the length 
of printing exceeds a given limit~|l|. Anomalous entries are printed in the 
form of control sequences that are not followed by a blank space, e.g., 
`\.[\\BAD.]'; this cannot be confused with actual control sequences because 
a real control sequence named \.[BAD] would come out `\.[\\BAD\ ]'. 


MODULE293

MODULE294
The procedure usually ``learns'' the character code used for macro 
parameters by seeing one in a |match| command before it runs into any 
|out_param| commands. 


MODULE295
Here's the way we sometimes want to display a token list, given a pointer 
to its reference count; the pointer may be null. 


MODULE296
The |print_meaning| subroutine displays |cur_cmd| and |cur_chr| in 
symbolic form, including the expansion of a macro or mark. 


SPECIAL MODULE 297:  \[21] Introduction to the syntactic routines.

Let's pause a moment now and try to look at the Big Picture. 
The \TeX\ program consists of three main parts: syntactic routines, 
semantic routines, and output routines. The chief purpose of the 
syntactic routines is to deliver the user's input to the semantic routines, 
one token at a time. The semantic routines act as an interpreter 
responding to these tokens, which may be regarded as commands. And the 
output routines are periodically called on to convert box-and-glue 
lists into a compact set of instructions that will be sent 
to a typesetter. We have discussed the basic data structures and utility 
routines of \TeX, so we are good and ready to plunge into the real activity by 
considering the syntactic routines. 

Our current goal is to come to grips with the |get_next| procedure, 
which is the keystone of \TeX's input mechanism. Each call of |get_next| 
sets the value of three variables |cur_cmd|, |cur_chr|, and |cur_cs|, 
representing the next input token. 
$$\vbox[\halign[#\hfil\cr 
  \hbox[|cur_cmd| denotes a command code from the long list of codes 
   given above;]\cr 
  \hbox[|cur_chr| denotes a character code or other modifier of the command 
   code;]\cr 
  \hbox[|cur_cs| is the |eqtb| location of the current control sequence,]\cr 
  \hbox[\qquad if the current token was a control sequence, 
   otherwise it's zero.]\cr]]$$ 
Underlying this external behavior of |get_next| is all the machinery 
necessary to convert from character files to tokens. At a given time we 
may be only partially finished with the reading of several files (for 
which \.[\\input] was specified), and partially finished with the expansion 
of some user-defined macros and/or some macro parameters, and partially 
finished with the generation of some text in a template for \.[\\halign], 
and so on. When reading a character file, special characters must be 
classified as math delimiters, etc.; comments and extra blank spaces must 
be removed, paragraphs must be recognized, and control sequences must be 
found in the hash table. Furthermore there are occasions in which the 
scanning routines have looked ahead for a word like `\.[plus]' but only 
part of that word was found, hence a few characters must be put back 
into the input and scanned again. 

To handle these situations, which might all be present simultaneously, 
\TeX\ uses various stacks that hold information about the incomplete 
activities, and there is a finite state control for each level of the 
input mechanism. These stacks record the current state of an implicitly 
recursive process, but the |get_next| procedure is not recursive. 
Therefore it will not be difficult to translate these algorithms into 
low-level languages that do not support recursion. 


MODULE298
The |print_cmd_chr| routine prints a symbolic interpretation of a 
command code and its modifier. This is used in certain `\.[You can\'t]' 
error messages, and in the implementation of diagnostic routines like 
\.[\\show]. 

The body of |print_cmd_chr| is a rather tedious listing of print 
commands, and most of it is essentially an inverse to the |primitive| 
routine that enters a \TeX\ primitive into |eqtb|. Therefore much of 
this procedure appears elsewhere in the program, 
together with the corresponding |primitive| calls. 


MODULE299
Here is a procedure that displays the current command. 


SPECIAL MODULE 300:  \[22] Input stacks and states.

This implementation of 
\TeX\ uses two different conventions for representing sequential stacks. 
(*stack conventions*)(*conventions for representing stacks*) 

\yskip\hangg 1) If there is frequent access to the top entry, and if the 
stack is essentially never empty, then the top entry is kept in a global 
variable (even better would be a machine register), and the other entries 
appear in the array $\\[stack][0\to(\\[ptr]-1)]$. For example, the 
semantic stack described above is handled this way, and so is the input 
stack that we are about to study. 

\yskip\hangg 2) If there is infrequent top access, the entire stack contents 
are in the array $\\[stack][0\to(\\[ptr]-1)]$. For example, the |save_stack| 
is treated this way, as we have seen. 

\yskip\noindent 
The state of \TeX's input mechanism appears in the input stack, whose 
entries are records with six fields, called |state|, |index|, |start|, |loc|, 
|limit|, and |name|. This stack is maintained with 
convention~(1), so it is declared in the following way: 


MODULE301

MODULE302
We've already defined the special variable |loc==cur_input.loc_field| 
in our discussion of basic input-output routines. The other components of 
|cur_input| are defined in the same way: 


MODULE303
Let's look more closely now at the control variables 
(|state|,~|index|,~|start|,~|loc|,~|limit|,~|name|), 
assuming that \TeX\ is reading a line of characters that have been input 
from some file or from the user's terminal. There is an array called 
|buffer| that acts as a stack of all lines of characters that are 
currently being read from files, including all lines on subsidiary 
levels of the input stack that are not yet completed. \TeX\ will return to 
the other lines when it is finished with the present input file. 

(Incidentally, on a machine with byte-oriented addressing, it might be 
appropriate to combine |buffer| with the |str_pool| array, 
letting the buffer entries grow downward from the top of the string pool 
and checking that these two tables don't bump into each other.) 

The line we are currently working on begins in position |start| of the 
buffer; the next character we are about to read is |buffer[loc]|; and 
|limit| is the location of the last character present.  If |loc>limit|, 
the line has been completely read. Usually |buffer[limit]| is the 
|end_line_char|, denoting the end of a line, but this is not 
true if the current line is an insertion that was entered on the user's 
terminal in response to an error message. 

The |name| variable is a string number that designates the name of 
the current file, if we are reading a text file. It is zero if we 
are reading from the terminal; it is |n+1| if we are reading from 
input stream |n|, where |0<=n<=16|. (Input stream 16 stands for 
an invalid stream number; in such cases the input is actually from 
the terminal, under control of the procedure |read_toks|.) 

The |state| variable has one of three values, when we are scanning such 
files: 
$$\baselineskip 15pt\vbox[\halign[#\hfil\cr 
1) |state=mid_line| is the normal state.\cr 
2) |state=skip_blanks| is like |mid_line|, but blanks are ignored.\cr 
3) |state=new_line| is the state at the beginning of a line.\cr]]$$ 
These state values are assigned numeric codes so that if we add the state 
code to the next character's command code, we get distinct values. For 
example, `|mid_line+spacer|' stands for the case that a blank 
space character occurs in the middle of a line when it is not being 
ignored; after this case is processed, the next value of |state| will 
be |skip_blanks|. 


MODULE304
Additional information about the current line is available via the 
|index| variable, which counts how many lines of characters are present 
in the buffer below the current level. We have |index=0| when reading 
from the terminal and prompting the user for each line; then if the user types, 
e.g., `\.[\\input paper]', we will have |index=1| while reading 
the file \.[paper.tex]. However, it does not follow that |index| is the 
same as the input stack pointer, since many of the levels on the input 
stack may come from token lists. For example, the instruction `\.[\\input 
paper]' might occur in a token list. 

The global variable |in_open| is equal to the |index| 
value of the highest non-token-list level. Thus, the number of partially read 
lines in the buffer is |in_open+1|, and we have |in_open=index| 
when we are not reading a token list. 

If we are not currently reading from the terminal, or from an input 
stream, we are reading from the file variable |input_file[index]|. We use 
the notation |terminal_input| as a convenient abbreviation for |name=0|, 
and |cur_file| as an abbreviation for |input_file[index]|. 

The global variable |line| contains the line number in the topmost 
open file, for use in error messages. If we are not reading from 
the terminal, |line_stack[index]| holds the line number for the 
enclosing level, so that |line| can be restored when the current 
file has been read. Line numbers should never be negative, since the 
negative of the current line number is used to identify the user's output 
routine in the |mode_line| field of the semantic nest entries. 

If more information about the input state is needed, it can be 
included in small arrays like those shown here. For example, 
the current page or segment number in the input file might be 
put into a variable |page|, maintained for enclosing levels in 
`\ignorespaces|page_stack:array[1..max_in_open] of integer|\unskip' 
by analogy with |line_stack|. 
(*system dependencies*) 


MODULE305
Users of \TeX\ sometimes forget to balance left and right braces properly, 
and one of the ways \TeX\ tries to spot such errors is by considering an 
input file as broken into subfiles by control sequences that 
are declared to be \.[\\outer]. 

A variable called |scanner_status| tells \TeX\ whether or not to complain 
when a subfile ends. This variable has six possible values: 

\yskip\hang|normal|, means that a subfile can safely end here without incident. 

\yskip\hang|skipping|, means that a subfile can safely end here, but not a file, 
because we're reading past some conditional text that was not selected. 

\yskip\hang|defining|, means that a subfile shouldn't end now because a 
macro is being defined. 

\yskip\hang|matching|, means that a subfile shouldn't end now because a 
macro is being used and we are searching for the end of its arguments. 

\yskip\hang|aligning|, means that a subfile shouldn't end now because we are 
not finished with the preamble of an \.[\\halign] or \.[\\valign]. 

\yskip\hang|absorbing|, means that a subfile shouldn't end now because we are 
reading a balanced token list for \.[\\message], \.[\\write], etc. 

\yskip\noindent 
If the |scanner_status| is not |normal|, the variable |warning_index| points 
to the |eqtb| location for the relevant control sequence name to print 
in an error message. 


MODULE306
Here is a procedure that uses |scanner_status| to print a warning message 
when a subfile has ended, and at certain other crucial times: 


MODULE307
However, all this discussion about input state really applies only to the 
case that we are inputting from a file. There is another important case, 
namely when we are currently getting input from a token list. In this case 
|state=token_list|, and the conventions about the other state variables 
are different: 

\yskip\hang|loc| is a pointer to the current node in the token list, i.e., 
the node that will be read next. If |loc=null|, the token list has been 
fully read. 

\yskip\hang|start| points to the first node of the token list; this node 
may or may not contain a reference count, depending on the type of token 
list involved. 

\yskip\hang|token_type|, which takes the place of |index| in the 
discussion above, is a code number that explains what kind of token list 
is being scanned. 

\yskip\hang|name| points to the |eqtb| address of the control sequence 
being expanded, if the current token list is a macro. 

\yskip\hang|param_start|, which takes the place of |limit|, tells where 
the parameters of the current macro begin in the |param_stack|, if the 
current token list is a macro. 

\yskip\noindent The |token_type| can take several values, depending on 
where the current token list came from: 

\yskip\hang|parameter|, if a parameter is being scanned; 

\hang|u_template|, if the \<u_j> part of an alignment 
template is being scanned; 

\hang|v_template|, if the \<v_j> part of an alignment 
template is being scanned; 

\hang|backed_up|, if the token list being scanned has been inserted as 
`to be read again'. 

\hang|inserted|, if the token list being scanned has been inserted as 
the text expansion of a \.[\\count] or similar variable; 

\hang|macro|, if a user-defined control sequence is being scanned; 

\hang|output_text|, if an \.[\\output] routine is being scanned; 

\hang|every_par_text|, if the text of \.[\\everypar] is being scanned; 

\hang|every_math_text|, if the text of \.[\\everymath] is being scanned; 

\hang|every_display_text|, if the text of \.[\\everydisplay] is being scanned; 

\hang|every_hbox_text|, if the text of \.[\\everyhbox] is being scanned; 

\hang|every_vbox_text|, if the text of \.[\\everyvbox] is being scanned; 

\hang|every_job_text|, if the text of \.[\\everyjob] is being scanned; 

\hang|every_cr_text|, if the text of \.[\\everycr] is being scanned; 

\hang|mark_text|, if the text of a \.[\\mark] is being scanned; 

\hang|write_text|, if the text of a \.[\\write] is being scanned. 

\yskip\noindent 
The codes for |output_text|, |every_par_text|, etc., are equal to a constant 
plus the corresponding codes for token list parameters |output_routine_loc|, 
|every_par_loc|, etc.  The token list begins with a reference count if and 
only if |token_type>=macro|. 
(*reference counts*) 


MODULE308
The |param_stack| is an auxiliary array used to hold pointers to the token 
lists for parameters at the current level and subsidiary levels of input. 
This stack is maintained with convention (2), and it grows at a different 
rate from the others. 


MODULE309
The input routines must also interact with the processing of 
\.[\\halign] and \.[\\valign], since the appearance of tab marks and 
\.[\\cr] in certain places is supposed to trigger the beginning of special 
\<v_j> template text in the scanner. This magic is accomplished by an 
|align_state| variable that is increased by~1 when a `\.[\char'173]' is 
scanned and decreased by~1 when a `\.[\char'175]' is scanned. The |align_state| 
is nonzero during the \<u_j> template, after which it is set to zero; the 
\<v_j> template begins when a tab mark or \.[\\cr] occurs at a time that 
|align_state=0|. 


MODULE310
Thus, the ``current input state'' can be very complicated indeed; there 
can be many levels and each level can arise in a variety of ways. The 
|show_context| procedure, which is used by \TeX's error-reporting routine to 
print out the current input state on all levels down to the most recent 
line of characters from an input file, illustrates most of these conventions. 
The global variable |base_ptr| contains the lowest level that was 
displayed by this procedure. 


MODULE311
The status at each level is indicated by printing two lines, where the first 
line indicates what was read so far and the second line shows what remains 
to be read. The context is cropped, if necessary, so that the first line 
contains at most |half_error_line| characters, and the second contains 
at most |error_line|. Non-current input levels whose |token_type| is 
`|backed_up|' are shown only if they have not been fully read. 


MODULE312

MODULE313
This routine should be changed, if necessary, to give the best possible 
indication of where the current line resides in the input file. 
For example, on some systems it is best to print both a page and line number. 
(*system dependencies*) 


MODULE314

MODULE315
Here it is necessary to explain a little trick. We don't want to store a long 
string that corresponds to a token list, because that string might take up 
lots of memory; and we are printing during a time when an error message is 
being given, so we dare not do anything that might overflow one of \TeX's 
tables. So `pseudoprinting' is the answer: We enter a mode of printing 
that stores characters into a buffer of length |error_line|, where character 
$k+1$ is placed into \hbox[|trick_buf[k mod error_line]|] if 
|k<trick_count|, otherwise character |k| is dropped. Initially we set 
|tally:=0| and |trick_count:=1000000|; then when we reach the 
point where transition from line 1 to line 2 should occur, we 
set |first_count:=tally| and |trick_count:=(*max*)(error_line, 
tally+1+error_line-half_error_line)|. At the end of the 
pseudoprinting, the values of |first_count|, |tally|, and 
|trick_count| give us all the information we need to print the two lines, 
and all of the necessary text is in |trick_buf|. 

Namely, let |l| be the length of the descriptive information that appears 
on the first line. The length of the context information gathered for that 
line is |k=first_count|, and the length of the context information 
gathered for line~2 is $m=\min(|tally|, |trick_count|)-k$. If |l+k<=h|, 
where |h=half_error_line|, we print |trick_buf[0..k-1]| after the 
descriptive information on line~1, and set |n:=l+k|; here |n| is the 
length of line~1. If $l+k>h$, some cropping is necessary, so we set |n:=h| 
and print `\.[...]' followed by 
$$\hbox[|trick_buf[(l+k-h+3)..k-1]|,]$$ 
where subscripts of |trick_buf| are circular modulo |error_line|. The 
second line consists of |n|~spaces followed by |trick_buf[k..(k+m-1)]|, 
unless |n+m>error_line|; in the latter case, further cropping is done. 
This is easier to program than to explain. 


MODULE316
The following code sets up the print routines so that they will gather 
the desired information. 


MODULE317
And the following code uses the information after it has been gathered. 


MODULE318
But the trick is distracting us from our current goal, which is to 
understand the input state. So let's concentrate on the data structures that 
are being pseudoprinted as we finish up the |show_context| procedure. 


MODULE319

MODULE320
Here is the missing piece of |show_token_list| that is activated when the 
token beginning line~2 is about to be shown: 


INSERT: 'Do magic computation'
=set_trick_count 


SPECIAL MODULE 321:  \[23] Maintaining the input stacks.

The following subroutines change the input status in commonly needed ways. 

First comes |push_input|, which stores the current state and creates a 
new level (having, initially, the same properties as the old). 


MODULE322
And of course what goes up must come down. 


MODULE323
Here is a procedure that starts a new level of token-list input, given 
a token list |p| and its type |t|. If |t=macro|, the calling routine should 
set |name| and |loc|. 


MODULE324
When a token list has been fully scanned, the following computations 
should be done as we leave that level of input. The |token_type| tends 
to be equal to either |backed_up| or |inserted| about 2/3 of the time. 
(*inner loop*) 


MODULE325
Sometimes \TeX\ has read too far and wants to ``unscan'' what it has 
seen. The |back_input| procedure takes care of this by putting the token 
just scanned back into the input stream, ready to be read again. This 
procedure can be used only if |cur_tok| represents the token to be 
replaced. Some applications of \TeX\ use this procedure a lot, 
so it has been slightly optimized for speed. 
(*inner loop*) 


MODULE326

MODULE327
The |back_error| routine is used when we want to replace an offending token 
just before issuing an error message. This routine, like |back_input|, 
requires that |cur_tok| has been set. We disable interrupts during the 
call of |back_input| so that the help message won't be lost. 


MODULE328
The |begin_file_reading| procedure starts a new level of input for lines 
of characters to be read from a file, or as an insertion from the 
terminal. It does not take care of opening the file, nor does it set |loc| 
or |limit| or |line|. 
(*system dependencies*) 


MODULE329
Conversely, the variables must be downdated when such a level of input 
is finished: 


MODULE330
In order to keep the stack from overflowing during a long sequence of 
inserted `\.[\\show]' commands, the following routine removes completed 
error-inserted lines from memory. 


MODULE331
To get \TeX's whole input mechanism going, we perform the following 
actions. 


SPECIAL MODULE 332:  \[24] Getting the next token.

The heart of \TeX's input mechanism is the |get_next| procedure, which 
we shall develop in the next few sections of the program. Perhaps we 
shouldn't actually call it the ``heart,'' however, because it really acts 
as \TeX's eyes and mouth, reading the source files and gobbling them up. 
And it also helps \TeX\ to regurgitate stored token lists that are to be 
processed again. 
(*eyes and mouth*) 

The main duty of |get_next| is to input one token and to set |cur_cmd| 
and |cur_chr| to that token's command code and modifier. Furthermore, if 
the input token is a control sequence, the |eqtb| location of that control 
sequence is stored in |cur_cs|; otherwise |cur_cs| is set to zero. 

Underlying this simple description is a certain amount of complexity 
because of all the cases that need to be handled. 
However, the inner loop of |get_next| is reasonably short and fast. 

When |get_next| is asked to get the next token of a \.[\\read] line, 
it sets |cur_cmd=cur_chr=cur_cs=0| in the case that no more tokens 
appear on that line. (There might not be any tokens at all, if the 
|end_line_char| has |ignore| as its catcode.) 


MODULE333
The value of |par_loc| is the |eqtb| address of `\.[\\par]'. This quantity 
is needed because a blank line of input is supposed to be exactly equivalent 
to the appearance of \.[\\par]; we must set |cur_cs:=par_loc| 
when detecting a blank line. 


MODULE334

MODULE335

MODULE336
Before getting into |get_next|, let's consider the subroutine that 
is called when an `\.[\\outer]' control sequence has been scanned or 
when the end of a file has been reached. These two cases are distinguished 
by |cur_cs|, which is zero at the end of a file. 


MODULE337
An outer control sequence that occurs in a \.[\\read] will not be reread, 
since the error recovery for \.[\\read] is not very powerful. 


MODULE338

MODULE339
The recovery procedure can't be fully understood without knowing more 
about the \TeX\ routines that should be aborted, but we can sketch the 
ideas here:  For a runaway definition we will insert a right brace; for a 
runaway preamble, we will insert a special \.[\\cr] token and a right 
brace; and for a runaway argument, we will set |long_state| to 
|outer_call| and insert \.[\\par]. 


MODULE340
We need to mention a procedure here that may be called by |get_next|. 


MODULE341
Now we're ready to take the plunge into |get_next| itself. Parts of 
this routine are executed more often than any other instructions of \TeX. 
(*mastication*)(*inner loop*) 


MODULE342
An alignment entry ends when a tab or \.[\\cr] occurs, provided that the 
current level of braces is the same as the level that was present at the 
beginning of that alignment entry; i.e., provided that |align_state| has 
returned to the value it had after the \<u_j> template for that entry. 
(*inner loop*) 


MODULE343

MODULE344
The following 48-way switch accomplishes the scanning quickly, assuming 
that a decent \PASCAL\ compiler has translated the code. Note that the numeric 
values for |mid_line|, |skip_blanks|, and |new_line| are spaced 
apart from each other by |max_char_code+1|, so we can add a character's 
command code to the state to get a single number that characterizes both. 


MODULE345

MODULE346
We go to |restart| instead of to |switch|, because |state| might equal 
|token_list| after the error has been dealt with 
(cf.\ |clear_for_error_prompt|). 


MODULE347

MODULE348
When a character of type |spacer| gets through, its character code is 
changed to $\.['\ ']=0 This means that the ASCII codes for tab and space, 
and for the space inserted at the end of a line, will 
be treated alike when macro parameters are being matched. We do this 
since such characters are indistinguishable on most computer terminal displays. 


MODULE349
The following code is performed only when |cur_cmd=spacer|. 


MODULE350

MODULE351

MODULE352
Notice that a code like \.[\^\^8] becomes \.x if not followed by a hex digit. 
 

MODULE353

MODULE354
Control sequence names are scanned only when they appear in some line of 
a file; once they have been scanned the first time, their |eqtb| location 
serves as a unique identification, so \TeX\ doesn't need to refer to the 
original name any more except when it prints the equivalent in symbolic form. 

The program that scans a control sequence has been written carefully 
in order to avoid the blowups that might otherwise occur if a malicious 
user tried something like `\.[\\catcode\'15=0]'. The algorithm might 
look at |buffer[limit+1]|, but it never looks at |buffer[limit+2]|. 

If expanded characters like `\.[\^\^A]' or `\.[\^\^df]' 
appear in or just following 
a control sequence name, they are converted to single characters in the 
buffer and the process is repeated, slowly but surely. 


MODULE355
Whenever we reach the following piece of code, we will have 
|cur_chr=buffer[k-1]| and |k<=limit+1| and |cat=cat_code(cur_chr)|. If an 
expanded code like \.[\^\^A] or \.[\^\^df] appears in |buffer[(k-1)..(k+1)]| 
or |buffer[(k-1)..(k+2)]|, we 
will store the corresponding code in |buffer[k-1]| and shift the rest of 
the buffer left two or three places. 


MODULE356

MODULE357
Let's consider now what happens when |get_next| is looking at a token list. 


MODULE358
The present point in the program is reached only when the |expand| 
routine has inserted a special marker into the input. In this special 
case, |info(loc)| is known to be a control sequence token, and |link(loc)=null|. 


MODULE359

MODULE360
All of the easy branches of |get_next| have now been taken care of. 
There is one more branch. 


MODULE361
The global variable |force_eof| is normally |false|; it is set |true| 
by an \.[\\endinput] command. 


MODULE362

MODULE363
If the user has set the |pausing| parameter to some positive value, 
and if nonstop mode has not been selected, each line of input is displayed 
on the terminal and the transcript file, followed by `\.[=>]'. 
\TeX\ waits for a response. If the response is simply |carriage_return|, the 
line is accepted as it stands, otherwise the line typed is 
used instead of the line in the file. 


MODULE364
Since |get_next| is used so frequently in \TeX, it is convenient 
to define three related procedures that do a little more: 

\yskip\hang|get_token| not only sets |cur_cmd| and |cur_chr|, it 
also sets |cur_tok|, a packed halfword version of the current token. 

\yskip\hang|get_x_token|, meaning ``get an expanded token,'' is like 
|get_token|, but if the current token turns out to be a user-defined 
control sequence (i.e., a macro call), or a conditional, 
or something like \.[\\topmark] or \.[\\expandafter] or \.[\\csname], 
it is eliminated from the input by beginning the expansion of the macro 
or the evaluation of the conditional. 

\yskip\hang|x_token| is like |get_x_token| except that it assumes that 
|get_next| has already been called. 

\yskip\noindent 
In fact, these three procedures account for almost every use of |get_next|. 


MODULE365
No new control sequences will be defined except during a call of 
|get_token|, or when \.[\\csname] compresses a token list, because 
|no_new_control_sequence| is always |true| at other times. 


SPECIAL MODULE 366:  \[25] Expanding the next token.

Only a dozen or so command codes |>max_command| can possibly be returned by 
|get_next|; in increasing order, they are |undefined_cs|, |expand_after|, 
|no_expand|, |input|, |if_test|, |fi_or_else|, |cs_name|, |convert|, |the|, 
|top_bot_mark|, |call|, |long_call|, |outer_call|, |long_outer_call|, and 
|end_template|.[\emergencystretch=40pt\par] 

The |expand| subroutine is used when |cur_cmd>max_command|. It removes a 
``call'' or a conditional or one of the other special operations just 
listed.  It follows that |expand| might invoke itself recursively. In all 
cases, |expand| destroys the current token, but it sets things up so that 
the next |get_next| will deliver the appropriate next token. The value of 
|cur_tok| need not be known when |expand| is called. 

Since several of the basic scanning routines communicate via global variables, 
their values are saved as local variables of |expand| so that 
recursive calls don't invalidate them. 
(*recursion*) 


MODULE367

MODULE368
It takes only a little shuffling to do what \TeX\ calls \.[\\expandafter]. 


MODULE369
The implementation of \.[\\noexpand] is a bit trickier, because it is 
necessary to insert a special `|dont_expand|' marker into \TeX's reading 
mechanism.  This special marker is processed by |get_next|, but it does 
not slow down the inner loop. 

Since \.[\\outer] macros might arise here, we must also 
clear the |scanner_status| temporarily. 


MODULE370

MODULE371
The |expand| procedure and some other routines that construct token 
lists find it convenient to use the following macros, which are valid only if 
the variables |p| and |q| are reserved for token-list building. 


MODULE372

MODULE373

MODULE374

MODULE375
An |end_template| command is effectively changed to an |endv| command 
by the following code. (The reason for this is discussed below; the 
|frozen_end_template| at the end of the template has passed the 
|check_outer_validity| test, so its mission of error detection has been 
accomplished.) 


MODULE376
The processing of \.[\\input] involves the |start_input| subroutine, 
which will be declared later; the processing of \.[\\endinput] is trivial. 


MODULE377

MODULE378

MODULE379
Sometimes the expansion looks too far ahead, so we want to insert 
a harmless \.[\\relax] into the user's input. 


MODULE380
Here is a recursive procedure that is \TeX's usual way to get the 
next token of input. It has been slightly optimized to take account of 
common cases. 


MODULE381
The |get_x_token| procedure is equivalent to two consecutive 
procedure calls: |get_next; x_token|. 


MODULE382
A control sequence that has been \.[\\def]'ed by the user is expanded by 
\TeX's |macro_call| procedure. 

Before we get into the details of |macro_call|, however, let's consider the 
treatment of primitives like \.[\\topmark], since they are essentially 
macros without parameters. The token lists for such marks are kept in a 
global array of five pointers; we refer to the individual entries of this 
array by symbolic names |top_mark|, etc. The value of |top_mark| is either 
|null| or a pointer to the reference count of a token list. 


MODULE383

MODULE384

MODULE385

MODULE386
The following code is activated when |cur_cmd=top_bot_mark| and 
when |cur_chr| is a code like |top_mark_code|. 


MODULE387
Now let's consider |macro_call| itself, which is invoked when \TeX\ is 
scanning a control sequence whose |cur_cmd| is either |call|, |long_call|, 
|outer_call|, or |long_outer_call|.  The control sequence definition 
appears in the token list whose reference count is in location |cur_chr| 
of |mem|. 

The global variable |long_state| will be set to |call| or to |long_call|, 
depending on whether or not the control sequence disallows \.[\\par] 
in its parameters. The |get_next| routine will set |long_state| to 
|outer_call| and emit \.[\\par], if a file ends or if an \.[\\outer] 
control sequence occurs in the midst of an argument. 


MODULE388
The parameters, if any, must be scanned before the macro is expanded. 
Parameters are token lists without reference counts. They are placed on 
an auxiliary stack called |pstack| while they are being scanned, since 
the |param_stack| may be losing entries during the matching process. 
(Note that |param_stack| can't be gaining entries, since |macro_call| is 
the only routine that puts anything onto |param_stack|, and it 
is not recursive.) 


MODULE389
After parameter scanning is complete, the parameters are moved to the 
|param_stack|. Then the macro body is fed to the scanner; in other words, 
|macro_call| places the defined text of the control sequence at the 
top of\/ \TeX's input stack, so that |get_next| will proceed to read it 
next. 

The global variable |cur_cs| contains the |eqtb| address of the control sequence 
being expanded, when |macro_call| begins. If this control sequence has not been 
declared \.[\\long], i.e., if its command code in the |eq_type| field is 
not |long_call| or |long_outer_call|, its parameters are not allowed to contain 
the control sequence \.[\\par]. If an illegal \.[\\par] appears, the macro 
call is aborted, and the \.[\\par] will be rescanned. 


MODULE390
Before we put a new token list on the input stack, it is wise to clean off 
all token lists that have recently been depleted. Then a user macro that ends 
with a call to itself will not require unbounded stack space. 


MODULE391
At this point, the reader will find it advisable to review the explanation 
of token list format that was presented earlier, since many aspects of that 
format are of importance chiefly in the |macro_call| routine. 

The token list might begin with a string of compulsory tokens before the 
first |match| or |end_match|. In that case the macro name is supposed to be 
followed by those tokens; the following program will set |s=null| to 
represent this restriction. Otherwise |s| will be set to the first token of 
a string that will delimit the next parameter. 


MODULE392
If |info(r)| is a |match| or |end_match| command, it cannot be equal to 
any token found by |get_token|. Therefore an undelimited parameter---i.e., 
a |match| that is immediately followed by |match| or |end_match|---will 
always fail the test `|cur_tok=info(r)|' in the following algorithm. 


MODULE393

MODULE394
A slightly subtle point arises here: When the parameter delimiter ends 
with `\.[\#\[]', the token list will have a left brace both before and 
after the |end_match|\kern-.4pt. Only one of these should affect the 
|align_state|, but both will be scanned, so we must make a correction. 


MODULE395

MODULE396
If |long_state=outer_call|, a runaway argument has already been reported. 


MODULE397
When the following code becomes active, we have matched tokens from |s| to 
the predecessor of |r|, and we have found that |cur_tok<>info(r)|. An 
interesting situation now presents itself: If the parameter is to be 
delimited by a string such as `\.[ab]', and if we have scanned `\.[aa]', 
we want to contribute one `\.a' to the current parameter and resume 
looking for a `\.b'. The program must account for such partial matches and 
for others that can be quite complex.  But most of the time we have |s=r| 
and nothing needs to be done. 

Incidentally, it is possible for \.[\\par] tokens to sneak in to certain 
parameters of non-\.[\\long] macros. For example, consider a case like 
`\.[\\def\\a\#1\\par!\[...\]]' where the first \.[\\par] is not followed 
by an exclamation point. In such situations it does not seem appropriate 
to prohibit the \.[\\par], so \TeX\ keeps quiet about this bending of 
the rules. 


MODULE398

MODULE399

MODULE400
If the parameter consists of a single group enclosed in braces, we must 
strip off the enclosing braces. That's why |rbrace_ptr| was introduced. 


MODULE401

SPECIAL MODULE 402:  \[26] Basic scanning subroutines.

Let's turn now to some procedures that \TeX\ calls upon frequently to digest 
certain kinds of patterns in the input. Most of these are quite simple; 
some are quite elaborate. Almost all of the routines call |get_x_token|, 
which can cause them to be invoked recursively. 
(*stomach*) 
(*recursion*) 


MODULE403
The |scan_left_brace| routine is called when a left brace is supposed to be 
the next non-blank token. (The term ``left brace'' means, more precisely, 
a character whose catcode is |left_brace|.) \TeX\ allows \.[\\relax] to 
appear before the |left_brace|. 


MODULE404

MODULE405
The |scan_optional_equals| routine looks for an optional `\.=' sign preceded 
by optional spaces; `\.[\\relax]' is not ignored here. 


MODULE406

MODULE407
In case you are getting bored, here is a slightly less trivial routine: 
Given a string of lowercase letters, like `\.[pt]' or `\.[plus]' or 
`\.[width]', the |scan_keyword| routine checks to see whether the next 
tokens of input match this string. The match must be exact, except that 
uppercase letters will match their lowercase counterparts; uppercase 
equivalents are determined by subtracting |'a'-'A'|, rather than using the 
|uc_code| table, since \TeX\ uses this routine only for its own limited 
set of keywords. 

If a match is found, the characters are effectively removed from the input 
and |true| is returned. Otherwise |false| is returned, and the input 
is left essentially unchanged (except for the fact that some macros 
may have been expanded, etc.). 
(*inner loop*) 


MODULE408
Here is a procedure that sounds an alarm when mu and non-mu units 
are being switched. 


MODULE409
The next routine `|scan_something_internal|' is used to fetch internal 
numeric quantities like `\.[\\hsize]', and also to handle the `\.[\\the]' 
when expanding constructions like `\.[\\the\\toks0]' and 
`\.[\\the\\baselineskip]'. Soon we will be considering the |scan_int| 
procedure, which calls |scan_something_internal|; on the other hand, 
|scan_something_internal| also calls |scan_int|, for constructions like 
`\.[\\catcode\`\\\$]' or `\.[\\fontdimen] \.3 \.[\\ff]'. So we 
have to declare |scan_int| as a |forward| procedure. A few other 
procedures are also declared at this point. 


MODULE410
\TeX\ doesn't know exactly what to expect when |scan_something_internal| 
begins.  For example, an integer or dimension or glue value could occur 
immediately after `\.[\\hskip]'; and one can even say \.[\\the] with 
respect to token lists in constructions like 
`\.[\\xdef\\o\[\\the\\output\]]'.  On the other hand, only integers are 
allowed after a construction like `\.[\\count]'. To handle the various 
possibilities, |scan_something_internal| has a |level| parameter, which 
tells the ``highest'' kind of quantity that |scan_something_internal| is 
allowed to produce. Six levels are distinguished, namely |int_val|, 
|dimen_val|, |glue_val|, |mu_val|, |ident_val|, and |tok_val|. 

The output of |scan_something_internal| (and of the other routines 
|scan_int|, |scan_dimen|, and |scan_glue| below) is put into the global 
variable |cur_val|, and its level is put into |cur_val_level|. The highest 
values of |cur_val_level| are special: |mu_val| is used only when 
|cur_val| points to something in a ``muskip'' register, or to one of the 
three parameters \.[\\thinmuskip], \.[\\medmuskip], \.[\\thickmuskip]; 
|ident_val| is used only when |cur_val| points to a font identifier; 
|tok_val| is used only when |cur_val| points to |null| or to the reference 
count of a token list. The last two cases are allowed only when 
|scan_something_internal| is called with |level=tok_val|. 

If the output is glue, |cur_val| will point to a glue specification, and 
the reference count of that glue will have been updated to reflect this 
reference; if the output is a nonempty token list, |cur_val| will point to 
its reference count, but in this case the count will not have been updated. 
Otherwise |cur_val| will contain the integer or scaled value in question. 


MODULE411
The hash table is initialized with `\.[\\count]', `\.[\\dimen]', `\.[\\skip]', 
and `\.[\\muskip]' all having |register| as their command code; they are 
distinguished by the |chr_code|, which is either |int_val|, |dimen_val|, 
|glue_val|, or |mu_val|. 


MODULE412

MODULE413
OK, we're ready for |scan_something_internal| itself. A second parameter, 
|negative|, is set |true| if the value that is found should be negated. 
It is assumed that |cur_cmd| and |cur_chr| represent the first token of 
the internal quantity to be scanned; an error will be signalled if 
|cur_cmd<min_internal| or |cur_cmd>max_internal|. 


MODULE414

MODULE415

MODULE416
Users refer to `\.[\\the\\spacefactor]' only in horizontal 
mode, and to `\.[\\the\\prevdepth]' only in vertical mode; so we put the 
associated mode in the modifier part of the |set_aux| command. 
The |set_page_int| command has modifier 0 or 1, for `\.[\\deadcycles]' and 
`\.[\\insertpenalties]', respectively. The |set_box_dimen| command is 
modified by either |width_offset|, |height_offset|, or |depth_offset|. 
And the |last_item| command is modified by either |int_val|, |dimen_val|, 
|glue_val|, |input_line_no_code|, or |badness_code|. 


MODULE417

MODULE418

MODULE419

MODULE420

MODULE421
Inside an \.[\\output] routine, a user may wish to look at the page totals 
that were present at the moment when output was triggered. 


MODULE422

MODULE423

MODULE424
Here is where \.[\\lastpenalty], \.[\\lastkern], and \.[\\lastskip] are 
implemented. The reference count for \.[\\lastskip] will be updated later. 

We also handle \.[\\inputlineno] and \.[\\badness] here, because they are 
legal in similar contexts. 


MODULE425

MODULE426

MODULE427

MODULE428

MODULE429
When a |glue_val| changes to a |dimen_val|, we use the width component 
of the glue; there is no need to decrease the reference count, since it 
has not yet been increased.  When a |dimen_val| changes to an |int_val|, 
we use scaled points so that the value doesn't actually change. And when a 
|mu_val| changes to a |glue_val|, the value doesn't change either. 


MODULE430
If |cur_val| points to a glue specification at this point, the reference 
count for the glue does not yet include the reference by |cur_val|. 
If |negative| is |true|, |cur_val_level| is known to be |<=mu_val|. 


MODULE431

MODULE432
Our next goal is to write the |scan_int| procedure, which scans anything that 
\TeX\ treats as an integer. But first we might as well look at some simple 
applications of |scan_int| that have already been made inside of 
|scan_something_internal|. 


MODULE433

MODULE434

MODULE435
While we're at it, we might as well deal with similar routines that 
will be needed later. 


MODULE436

MODULE437

MODULE438
An integer number can be preceded by any number of spaces and `\.+' or 
`\.-' signs. Then comes either a decimal constant (i.e., radix 10), an 
octal constant (i.e., radix 8, preceded by~\.\'), a hexadecimal constant 
(radix 16, preceded by~\.'), an alphabetic constant (preceded by~\.\`), or 
an internal variable. After scanning is complete, 
|cur_val| will contain the answer, which must be at most 
$2^[31]-1=2147483647$ in absolute value. The value of |radix| is set to 
10, 8, or 16 in the cases of decimal, octal, or hexadecimal constants, 
otherwise |radix| is set to zero. An optional space follows a constant. 


MODULE439
We initialize the following global variables just in case |expand| 
comes into action before any of the basic scanning routines has assigned 
them a value. 


MODULE440
The |scan_int| routine is used also to scan the integer part of a 
fraction; for example, the `\.3' in `\.[3.14159]' will be found by 
|scan_int|. The |scan_dimen| routine assumes that |cur_tok=point_token| 
after the integer part of such a fraction has been scanned by |scan_int|, 
and that the decimal point has been backed up to be scanned again. 


MODULE441

MODULE442
A space is ignored after an alphabetic character constant, so that 
such constants behave like numeric ones. 


MODULE443

MODULE444

MODULE445

MODULE446

MODULE447
The |scan_dimen| routine is similar to |scan_int|, but it sets |cur_val| to 
a |scaled| value, i.e., an integral number of sp. One of its main tasks 
is therefore to interpret the abbreviations for various kinds of units and 
to convert measurements to scaled points. 

There are three parameters: |mu| is |true| if the finite units must be 
`\.[mu]', while |mu| is |false| if `\.[mu]' units are disallowed; 
|inf| is |true| if the infinite units `\.[fil]', `\.[fill]', `\.[filll]' 
are permitted; and |shortcut| is |true| if |cur_val| already contains 
an integer and only the units need to be considered. 

The order of infinity that was found in the case of infinite glue is returned 
in the global variable |cur_order|. 


MODULE448
Constructions like `\.[-\'77 pt]' are legal dimensions, so |scan_dimen| 
may begin with |scan_int|. This explains why it is convenient to use 
|scan_int| also for the integer part of a decimal fraction. 

Several branches of |scan_dimen| work with |cur_val| as an integer and 
with an auxiliary fraction |f|, so that the actual quantity of interest is 
$|cur_val|+|f|/2^[16]$. At the end of the routine, this ``unpacked'' 
representation is put into the single word |cur_val|, which suddenly 
switches significance from |integer| to |scaled|. 


MODULE449

MODULE450

MODULE451
The following code is executed when |scan_something_internal| was 
called asking for |mu_val|, when we really wanted a ``mudimen'' instead 
of ``muglue.'' 


MODULE452
When the following code is executed, we have |cur_tok=point_token|, but this 
token has been backed up using |back_input|; we must first discard it. 

It turns out that a decimal point all by itself is equivalent to `\.[0.0]'. 
Let's hope people don't use that fact. 


MODULE453
Now comes the harder part: At this point in the program, |cur_val| is a 
nonnegative integer and $f/2^[16]$ is a nonnegative fraction less than 1; 
we want to multiply the sum of these two quantities by the appropriate 
factor, based on the specified units, in order to produce a |scaled| 
result, and we want to do the calculation with fixed point arithmetic that 
does not overflow. 


MODULE454
A specification like `\.[filllll]' or `\.[fill L L L]' will lead to two 
error messages (one for each additional keyword \.['l']). 


MODULE455

MODULE456

MODULE457

MODULE458
The necessary conversion factors can all be specified exactly as 
fractions whose numerator and denominator sum to 32768 or less. 
According to the definitions here, $\rm2660\,dd\approx1000.33297\,mm$; 
this agrees well with the value $\rm1000.333\,mm$ cited by Bosshard 
(*Bosshard, Hans Rudolf*) 
in [\sl Technische Grundlagen zur Satzherstellung\/] (Bern, 1980). 


MODULE459

MODULE460

MODULE461
The final member of \TeX's value-scanning trio is |scan_glue|, which 
makes |cur_val| point to a glue specification. The reference count of that 
glue spec will take account of the fact that |cur_val| is pointing to~it. 

The |level| parameter should be either |glue_val| or |mu_val|. 

Since |scan_dimen| was so much more complex than |scan_int|, we might expect 
|scan_glue| to be even worse. But fortunately, it is very simple, since 
most of the work has already been done. 


MODULE462

MODULE463
Here's a similar procedure that returns a pointer to a rule node. This 
routine is called just after \TeX\ has seen \.[\\hrule] or \.[\\vrule]; 
therefore |cur_cmd| will be either |hrule| or |vrule|. The idea is to store 
the default rule dimensions in the node, then to override them if 
`\.[height]' or `\.[width]' or `\.[depth]' specifications are 
found (in any order). 


SPECIAL MODULE 464:  \[27] Building token lists.

The token lists for macros and for other things like \.[\\mark] and \.[\\output] 
and \.[\\write] are produced by a procedure called |scan_toks|. 

Before we get into the details of |scan_toks|, let's consider a much 
simpler task, that of converting the current string into a token list. 
The |str_toks| function does this; it classifies spaces as type |spacer| 
and everything else as type |other_char|. 

The token list created by |str_toks| begins at |link(temp_head)| and ends 
at the value |p| that is returned. (If |p=temp_head|, the list is empty.) 


MODULE465
The main reason for wanting |str_toks| is the next function, 
|the_toks|, which has similar input/output characteristics. 

This procedure is supposed to scan something like `\.[\\skip\\count12]', 
i.e., whatever can follow `\.[\\the]', and it constructs a token list 
containing something like `\.[-3.0pt minus 0.5fill]'. 


MODULE466

MODULE467
Here's part of the |expand| subroutine that we are now ready to complete: 


MODULE468
The primitives \.[\\number], \.[\\romannumeral], \.[\\string], \.[\\meaning], 
\.[\\fontname], and \.[\\jobname] are defined as follows. 


MODULE469

MODULE470
The procedure |conv_toks| uses |str_toks| to insert the token list 
for |convert| functions into the scanner; `\.[\\outer]' control sequences 
are allowed to follow `\.[\\string]' and `\.[\\meaning]'. 


MODULE471

MODULE472

MODULE473
Now we can't postpone the difficulties any longer; we must bravely tackle 
|scan_toks|. This function returns a pointer to the tail of a new token 
list, and it also makes |def_ref| point to the reference count at the 
head of that list. 

There are two boolean parameters, |macro_def| and |xpand|. If |macro_def| 
is true, the goal is to create the token list for a macro definition; 
otherwise the goal is to create the token list for some other \TeX\ 
primitive: \.[\\mark], \.[\\output], \.[\\everypar], \.[\\lowercase], 
\.[\\uppercase], \.[\\message], \.[\\errmessage], \.[\\write], or 
\.[\\special]. In the latter cases a left brace must be scanned next; this 
left brace will not be part of the token list, nor will the matching right 
brace that comes at the end. If |xpand| is false, the token list will 
simply be copied from the input using |get_token|. Otherwise all expandable 
tokens will be expanded until unexpandable tokens are left, except that 
the results of expanding `\.[\\the]' are not expanded further. 
If both |macro_def| and |xpand| are true, the expansion applies 
only to the macro body (i.e., to the material following the first 
|left_brace| character). 

The value of |cur_cs| when |scan_toks| begins should be the |eqtb| 
address of the control sequence to display in ``runaway'' error 
messages. 


MODULE474

MODULE475

MODULE476

MODULE477

MODULE478
Here we insert an entire token list created by |the_toks| without 
expanding it further. 


MODULE479

MODULE480
Another way to create a token list is via the \.[\\read] command. The 
sixteen files potentially usable for reading appear in the following 
global variables. The value of |read_open[n]| will be |closed| if 
stream number |n| has not been opened or if it has been fully read; 
|just_open| if an \.[\\openin] but not a \.[\\read] has been done; 
and |normal| if it is open and ready to read the next line. 


MODULE481

MODULE482
The |read_toks| procedure constructs a token list like that for any 
macro definition, and makes |cur_val| point to it. Parameter |r| points 
to the control sequence that will receive this token list. 


MODULE483

MODULE484
Here we input on-line into the |buffer| array, prompting the user explicitly 
if |n>=0|.  The value of |n| is set negative so that additional prompts 
will not be given in the case of multi-line input. 


MODULE485
The first line of a file must be treated specially, since |input_ln| 
must be told not to start with |get|. 
(*system dependencies*) 


MODULE486
An empty line is appended at the end of a |read_file|. 
(*empty line at end of file*) 


SPECIAL MODULE 487:  \[28] Conditional processing.

We consider now the way \TeX\ handles various kinds of \.[\\if] commands. 


MODULE488

MODULE489
Conditions can be inside conditions, and this nesting has a stack 
that is independent of the |save_stack|. 

Four global variables represent the top of the condition stack: 
|cond_ptr| points to pushed-down entries, if any; |if_limit| specifies 
the largest code of a |fi_or_else| command that is syntactically legal; 
|cur_if| is the name of the current type of conditional; and |if_line| 
is the line number at which it began. 

If no conditions are currently in progress, the condition stack has the 
special state |cond_ptr=null|, |if_limit=normal|, |cur_if=0|, |if_line=0|. 
Otherwise |cond_ptr| points to a two-word node; the |type|, |subtype|, and 
|link| fields of the first word contain |if_limit|, |cur_if|, and 
|cond_ptr| at the next level, and the second word contains the 
corresponding |if_line|. 


MODULE490

MODULE491

MODULE492

MODULE493
When we skip conditional text, we keep track of the line number 
where skipping began, for use in error messages. 


MODULE494
Here is a procedure that ignores text until coming to an \.[\\or], 
\.[\\else], or \.[\\fi] at level zero of $\.[\\if]\ldots\.[\\fi]$ 
nesting. After it has acted, |cur_chr| will indicate the token that 
was found, but |cur_tok| will not be set (because this makes the 
procedure run faster). 


MODULE495
When we begin to process a new \.[\\if], we set |if_limit:=if_code|; then 
if\/ \.[\\or] or \.[\\else] or \.[\\fi] occurs before the current \.[\\if] 
condition has been evaluated, \.[\\relax] will be inserted. 
For example, a sequence of commands like `\.[\\ifvoid1\\else...\\fi]' 
would otherwise require something after the `\.1'. 


MODULE496

MODULE497
Here's a procedure that changes the |if_limit| code corresponding to 
a given value of |cond_ptr|. 


MODULE498
A condition is started when the |expand| procedure encounters 
an |if_test| command; in that case |expand| reduces to |conditional|, 
which is a recursive procedure. 
(*recursion*) 


MODULE499
In a construction like `\.[\\if\\iftrue abc\\else d\\fi]', the first 
\.[\\else] that we come to after learning that the \.[\\if] is false is 
not the \.[\\else] we're looking for. Hence the following curious 
logic is needed. 


MODULE500

MODULE501

MODULE502

MODULE503
Here we use the fact that |'<'|, |'='|, and |'>'| are consecutive ASCII 
codes. 
(*ASCII code*) 


MODULE504

MODULE505

MODULE506
An active character will be treated as category 13 following 
\.[\\if\\noexpand] or following \.[\\ifcat\\noexpand]. We use the fact that 
active characters have the smallest tokens, among all control sequences. 


MODULE507
Note that `\.[\\ifx]' will declare two macros different if one is \\[long] 
or \\[outer] and the other isn't, even though the texts of the macros are 
the same. 

We need to reset |scanner_status|, since \.[\\outer] control sequences 
are allowed, but we might be scanning a macro definition or preamble. 


MODULE508
Note also that `\.[\\ifx]' decides that macros \.[\\a] and \.[\\b] are 
different in examples like this: 
$$\vbox[\halign[\.[#]\hfil&\qquad\.[#]\hfil\cr 
  []\\def\\a\[\\c\]& 
  []\\def\\c\[\]\cr 
  []\\def\\b\[\\d\]& 
  []\\def\\d\[\]\cr]]$$ 


MODULE509

MODULE510
The processing of conditionals is complete except for the following 
code, which is actually part of |expand|. It comes into play when 
\.[\\or], \.[\\else], or \.[\\fi] is scanned. 


SPECIAL MODULE 511:  \[29] File names.

It's time now to fret about file names.  Besides the fact that different 
operating systems treat files in different ways, we must cope with the 
fact that completely different naming conventions are used by different 
groups of people. The following programs show what is required for one 
particular operating system; similar routines for other systems are not 
difficult to devise. 
(*fingers*) 
(*system dependencies*) 

\TeX\ assumes that a file name has three parts: the name proper; its 
``extension''; and a ``file area'' where it is found in an external file 
system.  The extension of an input file or a write file is assumed to be 
`\.[.tex]' unless otherwise specified; it is `\.[.log]' on the 
transcript file that records each run of \TeX; it is `\.[.tfm]' on the font 
metric files that describe characters in the fonts \TeX\ uses; it is 
`\.[.dvi]' on the output files that specify typesetting information; and it 
is `\.[.fmt]' on the format files written by \.[INITEX] to initialize \TeX. 
The file area can be arbitrary on input files, but files are usually 
output to the user's current area.  If an input file cannot be 
found on the specified area, \TeX\ will look for it on a special system 
area; this special area is intended for commonly used input files like 
\.[webmac.tex]. 

Simple uses of \TeX\ refer only to file names that have no explicit 
extension or area. For example, a person usually says `\.[\\input] \.[paper]' 
or `\.[\\font\\tenrm] \.= \.[helvetica]' instead of `\.[\\input] 
\.[paper.new]' or `\.[\\font\\tenrm] \.= \.[<csd.knuth>test]'. Simple file 
names are best, because they make the \TeX\ source files portable; 
whenever a file name consists entirely of letters and digits, it should be 
treated in the same way by all implementations of \TeX. However, users 
need the ability to refer to other files in their environment, especially 
when responding to error messages concerning unopenable files; therefore 
we want to let them use the syntax that appears in their favorite 
operating system. 

The following procedures don't allow spaces to be part of 
file names; but some users seem to like names that are spaced-out. 
System-dependent changes to allow such things should probably 
be made with reluctance, and only when an entire file name that 
includes spaces is ``quoted'' somehow. 


MODULE512
In order to isolate the system-dependent aspects of file names, the 
(*system dependencies*) 
system-independent parts of \TeX\ are expressed in terms 
of three system-dependent 
procedures called |begin_name|, |more_name|, and |end_name|. In 
essence, if the user-specified characters of the file name are $c_1\ldots c_n$, 
the system-independent driver program does the operations 
$$|begin_name|;\,|more_name|(c_1);\,\ldots\,;\,|more_name|(c_n); 
\,|end_name|.$$ 
These three procedures communicate with each other via global variables. 
Afterwards the file name will appear in the string pool as three strings 
called |cur_name|\penalty10000\hskip-.05em, 
|cur_area|, and |cur_ext|; the latter two are null (i.e., 
|''|), unless they were explicitly specified by the user. 

Actually the situation is slightly more complicated, because \TeX\ needs 
to know when the file name ends. The |more_name| routine is a function 
(with side effects) that returns |true| on the calls |more_name|$(c_1)$, 
\dots, |more_name|$(c_[n-1])$. The final call |more_name|$(c_n)$ 
returns |false|; or, it returns |true| and the token following $c_n$ is 
something like `\.[\\hbox]' (i.e., not a character). In other words, 
|more_name| is supposed to return |true| unless it is sure that the 
file name has been completely scanned; and |end_name| is supposed to be able 
to finish the assembly of |cur_name|, |cur_area|, and |cur_ext| regardless of 
whether $|more_name|(c_n)$ returned |true| or |false|. 


MODULE513
The file names we shall deal with for illustrative purposes have the 
following structure:  If the name contains `\.>' or `\.:', the file area 
consists of all characters up to and including the final such character; 
otherwise the file area is null.  If the remaining file name contains 
`\..', the file extension consists of all such characters from the first 
remaining `\..' to the end, otherwise the file extension is null. 
(*system dependencies*) 

We can scan such file names easily by using two global variables that keep track 
of the occurrences of area and extension delimiters: 


MODULE514
Input files that can't be found in the user's area may appear in a standard 
system area called |TEX_area|. Font metric files whose areas are not given 
explicitly are assumed to appear in a standard system area called 
|TEX_font_area|.  These system area names will, of course, vary from place 
to place. 
(*system dependencies*) 


MODULE515
Here now is the first of the system-dependent routines for file name scanning. 
(*system dependencies*) 


MODULE516
And here's the second. The string pool might change as the file name is 
being scanned, since a new \.[\\csname] might be entered; therefore we keep 
|area_delimiter| and |ext_delimiter| relative to the beginning of the current 
string, instead of assigning an absolute address like |pool_ptr| to them. 
(*system dependencies*) 


MODULE517
The third. 
(*system dependencies*) 


MODULE518
Conversely, here is a routine that takes three strings and prints a file 
name that might have produced them. (The routine is system dependent, because 
some operating systems put the file area last instead of first.) 
(*system dependencies*) 


MODULE519
Another system-dependent routine is needed to convert three internal 
\TeX\ strings 
into the |name_of_file| value that is used to open files. The present code 
allows both lowercase and uppercase letters in the file name. 
(*system dependencies*) 


MODULE520
A messier routine is also needed, since format file names must be scanned 
before \TeX's string mechanism has been initialized. We shall use the 
global variable |TEX_format_default| to supply the text for default system areas 
and extensions related to format files. 
(*system dependencies*) 


MODULE521

MODULE522

MODULE523
Here is the messy routine that was just mentioned. It sets |name_of_file| 
from the first |n| characters of |TEX_format_default|, followed by 
|buffer[a..b]|, followed by the last |format_ext_length| characters of 
|TEX_format_default|. 

We dare not give error messages here, since \TeX\ calls this routine before 
the |error| routine is ready to roll. Instead, we simply drop excess characters, 
since the error will be detected in another way when a strange file name 
isn't found. 
(*system dependencies*) 


MODULE524
Here is the only place we use |pack_buffered_name|. This part of the program 
becomes active when a ``virgin'' \TeX\ is trying to get going, just after 
the preliminary initialization, or when the user is substituting another 
format file by typing `\.\&' after the initial `\.[**]' prompt.  The buffer 
contains the first line of input in |buffer[loc..(last-1)]|, where 
|loc<last| and |buffer[loc]<>' '|. 


MODULE525
Operating systems often make it possible to determine the exact name (and 
possible version number) of a file that has been opened. The following routine, 
which simply makes a \TeX\ string from the value of |name_of_file|, should 
ideally be changed to deduce the full name of file~|f|, which is the file 
most recently opened, if it is possible to do this in a \PASCAL\ program. 
(*system dependencies*) 

This routine might be called after string memory has overflowed, hence 
we dare not use `|str_room|'. 


MODULE526
Now let's consider the ``driver'' 
routines by which \TeX\ deals with file names 
in a system-independent manner.  First comes a procedure that looks for a 
file name in the input by calling |get_x_token| for the information. 


MODULE527
The global variable |name_in_progress| is used to prevent recursive 
use of |scan_file_name|, since the |begin_name| and other procedures 
communicate via global variables. Recursion would arise only by 
devious tricks like `\.[\\input\\input f]'; such attempts at sabotage 
must be thwarted. Furthermore, |name_in_progress| prevents \.[\\input] 
(*recursion*) 
from being initiated when a font size specification is being scanned. 

Another global variable, |job_name|, contains the file name that was first 
\.[\\input] by the user. This name is extended by `\.[.log]' and `\.[.dvi]' 
and `\.[.fmt]' in the names of \TeX's output files. 


MODULE528
Initially |job_name=0|; it becomes nonzero as soon as the true name is known. 
We have |job_name=0| if and only if the `\.[log]' file has not been opened, 
except of course for a short time just after |job_name| has become nonzero. 


MODULE529
Here is a routine that manufactures the output file names, assuming that 
|job_name<>0|. It ignores and changes the current settings of |cur_area| 
and |cur_ext|. 


MODULE530
If some trouble arises when \TeX\ tries to open a file, the following 
routine calls upon the user to supply another file name. Parameter~|s| 
is used in the error message to identify the type of file; parameter~|e| 
is the default extension if none is given. Upon exit from the routine, 
variables |cur_name|, |cur_area|, |cur_ext|, and |name_of_file| are 
ready for another attempt at file opening. 


MODULE531

MODULE532
Here's an example of how these conventions are used. Whenever it is time to 
ship out a box of stuff, we shall use the macro |ensure_dvi_open|. 


MODULE533

INSERT: 'Initialize the output...'
=output_file_name:=0; 


MODULE534
The |open_log_file| routine is used to open the transcript file and to help 
it catch up to what has previously been printed on the terminal. 


MODULE535
Sometimes |open_log_file| is called at awkward moments when \TeX\ is 
unable to print error messages or even to |show_context|. 
The |prompt_file_name| routine can result in a |fatal_error|, but the |error| 
routine will not be invoked because |log_opened| will be false. 

The normal idea of |batch_mode| is that nothing at all should be written 
on the terminal. However, in the unusual case that 
no log file could be opened, we make an exception and allow 
an explanatory message to be seen. 

Incidentally, the program always refers to the log file as a `\.[transcript 
file]', because some systems cannot use the extension `\.[.log]' for 
this file. 


MODULE536

MODULE537
Let's turn now to the procedure that is used to initiate file reading 
when an `\.[\\input]' command is being processed. 


MODULE538
Here we have to remember to tell the |input_ln| routine not to 
start with a |get|. If the file is empty, it is considered to 
contain a single blank line. 
(*system dependencies*) 
(*empty line at end of file*) 


SPECIAL MODULE 539:  \[30] Font metric data.

\TeX\ gets its knowledge about fonts from font metric files, also called 
\.[TFM] files; the `\.T' in `\.[TFM]' stands for \TeX, 
but other programs know about them too. 
(*TFM files][\.[TFM] files*) 
(*font metric files*) 

The information in a \.[TFM] file appears in a sequence of 8-bit bytes. 
Since the number of bytes is always a multiple of 4, we could 
also regard the file as a sequence of 32-bit words, but \TeX\ uses the 
byte interpretation. The format of \.[TFM] files was designed by 
Lyle Ramshaw in 1980. The intent is to convey a lot of different kinds 
(*Ramshaw, Lyle Harold*) 
of information in a compact but useful form. 


MODULE540
The first 24 bytes (6 words) of a \.[TFM] file contain twelve 16-bit 
integers that give the lengths of the various subsequent portions 
of the file. These twelve integers are, in order: 
$$\vbox[\halign[\hfil#&$\null=\null$#\hfil\cr 
|lf|&length of the entire file, in words;\cr 
|lh|&length of the header data, in words;\cr 
|bc|&smallest character code in the font;\cr 
|ec|&largest character code in the font;\cr 
|nw|&number of words in the width table;\cr 
|nh|&number of words in the height table;\cr 
|nd|&number of words in the depth table;\cr 
|ni|&number of words in the italic correction table;\cr 
|nl|&number of words in the lig/kern table;\cr 
|nk|&number of words in the kern table;\cr 
|ne|&number of words in the extensible character table;\cr 
|np|&number of font parameter words.\cr]]$$ 
They are all nonnegative and less than $2^[15]$. We must have |bc-1<=ec<=255|, 
and 
$$\hbox[|lf=6+lh+(ec-bc+1)+nw+nh+nd+ni+nl+nk+ne+np|.]$$ 
Note that a font may contain as many as 256 characters (if |bc=0| and |ec=255|), 
and as few as 0 characters (if |bc=ec+1|). 

Incidentally, when two or more 8-bit bytes are combined to form an integer of 
16 or more bits, the most significant bytes appear first in the file. 
This is called BigEndian order. 
(*BigEndian order*) 


MODULE541
The rest of the \.[TFM] file may be regarded as a sequence of ten data 
arrays having the informal specification 
$$\def\arr$[#1]#2$[\&[array] $[#1]$ \&[of] #2] 
\vbox[\halign[\hfil\\[#]&$\,:\,$\arr#\hfil\cr 
header&|[0..lh-1](*\\[stuff]*)|\cr 
char\_info&|[bc..ec]char_info_word|\cr 
width&|[0..nw-1]fix_word|\cr 
height&|[0..nh-1]fix_word|\cr 
depth&|[0..nd-1]fix_word|\cr 
italic&|[0..ni-1]fix_word|\cr 
lig\_kern&|[0..nl-1]lig_kern_command|\cr 
kern&|[0..nk-1]fix_word|\cr 
exten&|[0..ne-1]extensible_recipe|\cr 
param&|[1..np]fix_word|\cr]]$$ 
The most important data type used here is a |fix_word|, which is 
a 32-bit representation of a binary fraction. A |fix_word| is a signed 
quantity, with the two's complement of the entire word used to represent 
negation. Of the 32 bits in a |fix_word|, exactly 12 are to the left of the 
binary point; thus, the largest |fix_word| value is $2048-2^[-20]$, and 
the smallest is $-2048$. We will see below, however, that all but two of 
the |fix_word| values must lie between $-16$ and $+16$. 


MODULE542
The first data array is a block of header information, which contains 
general facts about the font. The header must contain at least two words, 
|header[0]| and |header[1]|, whose meaning is explained below. 
Additional header information of use to other software routines might 
also be included, but \TeX82 does not need to know about such details. 
For example, 16 more words of header information are in use at the Xerox 
Palo Alto Research Center; the first ten specify the character coding 
scheme used (e.g., `\.[XEROX text]' or `\.[TeX math symbols]'), the next five 
give the font identifier (e.g., `\.[HELVETICA]' or `\.[CMSY]'), and the 
last gives the ``face byte.'' The program that converts \.[DVI] files 
to Xerox printing format gets this information by looking at the \.[TFM] 
file, which it needs to read anyway because of other information that 
is not explicitly repeated in \.[DVI]~format. 

\yskip\hang|header[0]| is a 32-bit check sum that \TeX\ will copy into 
the \.[DVI] output file. Later on when the \.[DVI] file is printed, 
possibly on another computer, the actual font that gets used is supposed 
to have a check sum that agrees with the one in the \.[TFM] file used by 
\TeX. In this way, users will be warned about potential incompatibilities. 
(However, if the check sum is zero in either the font file or the \.[TFM] 
file, no check is made.)  The actual relation between this check sum and 
the rest of the \.[TFM] file is not important; the check sum is simply an 
identification number with the property that incompatible fonts almost 
always have distinct check sums. 
(*check sum*) 

\yskip\hang|header[1]| is a |fix_word| containing the design size of 
the font, in units of \TeX\ points. This number must be at least 1.0; it is 
fairly arbitrary, but usually the design size is 10.0 for a ``10 point'' 
font, i.e., a font that was designed to look best at a 10-point size, 
whatever that really means. When a \TeX\ user asks for a font 
`\.[at] $\delta$ \.[pt]', the effect is to override the design size 
and replace it by $\delta$, and to multiply the $x$ and~$y$ coordinates 
of the points in the font image by a factor of $\delta$ divided by the 
design size.  [\sl All other dimensions in the\/ \.[TFM] file are 
|fix_word|\kern-1pt\ numbers in design-size units], with the exception of 
|param[1]| (which denotes the slant ratio). Thus, for example, the value 
of |param[6]|, which defines the \.[em] unit, is often the |fix_word| value 
$2^[20]=1.0$, since many fonts have a design size equal to one em. 
The other dimensions must be less than 16 design-size units in absolute 
value; thus, |header[1]| and |param[1]| are the only |fix_word| 
entries in the whole \.[TFM] file whose first byte might be something 
besides 0 or 255. 


MODULE543
Next comes the |char_info| array, which contains one |char_info_word| 
per character. Each word in this part of the file contains six fields 
packed into four bytes as follows. 

\yskip\hang first byte: |width_index| (8 bits)\par 
\hang second byte: |height_index| (4 bits) times 16, plus |depth_index| 
  (4~bits)\par 
\hang third byte: |italic_index| (6 bits) times 4, plus |tag| 
  (2~bits)\par 
\hang fourth byte: |remainder| (8 bits)\par 
\yskip\noindent 
The actual width of a character is \\[width]|[width_index]|, in design-size 
units; this is a device for compressing information, since many characters 
have the same width. Since it is quite common for many characters 
to have the same height, depth, or italic correction, the \.[TFM] format 
imposes a limit of 16 different heights, 16 different depths, and 
64 different italic corrections. 

(*italic correction*) 
The italic correction of a character has two different uses. 
(a)~In ordinary text, the italic correction is added to the width only if 
the \TeX\ user specifies `\.[\\/]' after the character. 
(b)~In math formulas, the italic correction is always added to the width, 
except with respect to the positioning of subscripts. 

Incidentally, the relation $\\[width][0]=\\[height][0]=\\[depth][0]= 
\\[italic][0]=0$ should always hold, so that an index of zero implies a 
value of zero.  The |width_index| should never be zero unless the 
character does not exist in the font, since a character is valid if and 
only if it lies between |bc| and |ec| and has a nonzero |width_index|. 


MODULE544
The |tag| field in a |char_info_word| has four values that explain how to 
interpret the |remainder| field. 

\yskip\hangg|tag=0| (|no_tag|) means that |remainder| is unused.\par 
\hangg|tag=1| (|lig_tag|) means that this character has a ligature/kerning 
program starting at position |remainder| in the |lig_kern| array.\par 
\hangg|tag=2| (|list_tag|) means that this character is part of a chain of 
characters of ascending sizes, and not the largest in the chain.  The 
|remainder| field gives the character code of the next larger character.\par 
\hangg|tag=3| (|ext_tag|) means that this character code represents an 
extensible character, i.e., a character that is built up of smaller pieces 
so that it can be made arbitrarily large. The pieces are specified in 
|exten[remainder]|.\par 
\yskip\noindent 
Characters with |tag=2| and |tag=3| are treated as characters with |tag=0| 
unless they are used in special circumstances in math formulas. For example, 
the \.[\\sum] operation looks for a |list_tag|, and the \.[\\left] 
operation looks for both |list_tag| and |ext_tag|. 


MODULE545
The |lig_kern| array contains instructions in a simple programming language 
that explains what to do for special letter pairs. Each word in this array is a 
|lig_kern_command| of four bytes. 

\yskip\hang first byte: |skip_byte|, indicates that this is the final program 
  step if the byte is 128 or more, otherwise the next step is obtained by 
  skipping this number of intervening steps.\par 
\hang second byte: |next_char|, ``if |next_char| follows the current character, 
  then perform the operation and stop, otherwise continue.''\par 
\hang third byte: |op_byte|, indicates a ligature step if less than~128, 
  a kern step otherwise.\par 
\hang fourth byte: |remainder|.\par 
\yskip\noindent 
In a kern step, an 
additional space equal to |kern[256*(op_byte-128)+remainder]| is inserted 
between the current character and |next_char|. This amount is 
often negative, so that the characters are brought closer together 
by kerning; but it might be positive. 

There are eight kinds of ligature steps, having |op_byte| codes $4a+2b+c$ where 
$0\le a\le b+c$ and $0\le b,c\le1$. The character whose code is 
|remainder| is inserted between the current character and |next_char|; 
then the current character is deleted if $b=0$, and |next_char| is 
deleted if $c=0$; then we pass over $a$~characters to reach the next 
current character (which may have a ligature/kerning program of its own). 

If the very first instruction of the |lig_kern| array has |skip_byte=255|, 
the |next_char| byte is the so-called right boundary character of this font; 
the value of |next_char| need not lie between |bc| and~|ec|. 
If the very last instruction of the |lig_kern| array has |skip_byte=255|, 
there is a special ligature/kerning program for a left boundary character, 
beginning at location |256*op_byte+remainder|. 
The interpretation is that \TeX\ puts implicit boundary characters 
before and after each consecutive string of characters from the same font. 
These implicit characters do not appear in the output, but they can affect 
ligatures and kerning. 

If the very first instruction of a character's |lig_kern| program has 
|skip_byte>128|, the program actually begins in location 
|256*op_byte+remainder|. This feature allows access to large |lig_kern| 
arrays, because the first instruction must otherwise 
appear in a location |<=255|. 

Any instruction with |skip_byte>128| in the |lig_kern| array must satisfy 
the condition 
$$\hbox[|256*op_byte+remainder<nl|.]$$ 
If such an instruction is encountered during 
normal program execution, it denotes an unconditional halt; no ligature 
or kerning command is performed. 


MODULE546
Extensible characters are specified by an |extensible_recipe|, which 
consists of four bytes called |top|, |mid|, |bot|, and |rep| (in this 
order). These bytes are the character codes of individual pieces used to 
build up a large symbol.  If |top|, |mid|, or |bot| are zero, they are not 
present in the built-up result. For example, an extensible vertical line is 
like an extensible bracket, except that the top and bottom pieces are missing. 

Let $T$, $M$, $B$, and $R$ denote the respective pieces, or an empty box 
if the piece isn't present. Then the extensible characters have the form 
$TR^kMR^kB$ from top to bottom, for some |k>=0|, unless $M$ is absent; 
in the latter case we can have $TR^kB$ for both even and odd values of~|k|. 
The width of the extensible character is the width of $R$; and the 
height-plus-depth is the sum of the individual height-plus-depths of the 
components used, since the pieces are butted together in a vertical list. 


MODULE547
The final portion of a \.[TFM] file is the |param| array, which is another 
sequence of |fix_word| values. 

\yskip\hang|param[1]=slant| is the amount of italic slant, which is used 
to help position accents. For example, |slant=.25| means that when you go 
up one unit, you also go .25 units to the right. The |slant| is a pure 
number; it's the only |fix_word| other than the design size itself that is 
not scaled by the design size. 

\hang|param[2]=space| is the normal spacing between words in text. 
Note that character |' '| in the font need not have anything to do with 
blank spaces. 

\hang|param[3]=space_stretch| is the amount of glue stretching between words. 

\hang|param[4]=space_shrink| is the amount of glue shrinking between words. 

\hang|param[5]=x_height| is the size of one ex in the font; it is also 
the height of letters for which accents don't have to be raised or lowered. 

\hang|param[6]=quad| is the size of one em in the font. 

\hang|param[7]=extra_space| is the amount added to |param[2]| at the 
ends of sentences. 

\yskip\noindent 
If fewer than seven parameters are present, \TeX\ sets the missing parameters 
to zero. Fonts used for math symbols are required to have 
additional parameter information, which is explained later. 


MODULE548
So that is what \.[TFM] files hold. Since \TeX\ has to absorb such information 
about lots of fonts, it stores most of the data in a large array called 
|font_info|. Each item of |font_info| is a |memory_word|; the |fix_word| 
data gets converted into |scaled| entries, while everything else goes into 
words of type |four_quarters|. 

When the user defines \.[\\font\\f], say, \TeX\ assigns an internal number 
to the user's font~\.[\\f]. Adding this number to |font_id_base| gives the 
|eqtb| location of a ``frozen'' control sequence that will always select 
the font. 


MODULE549
Here now is the (rather formidable) array of font arrays. 


MODULE550
Besides the arrays just enumerated, we have directory arrays that make it 
easy to get at the individual entries in |font_info|. For example, the 
|char_info| data for character |c| in font |f| will be in 
|font_info[char_base[f]+c].qqqq|; and if |w| is the |width_index| 
part of this word (the |b0| field), the width of the character is 
|font_info[width_base[f]+w].sc|. (These formulas assume that 
|min_quarterword| has already been added to |c| and to |w|, since \TeX\ 
stores its quarterwords that way.) 


MODULE551

MODULE552
\TeX\ always knows at least one font, namely the null font. It has no 
characters, and its seven parameters are all equal to zero. 


MODULE553

MODULE554
Of course we want to define macros that suppress the detail of how font 
information is actually packed, so that we don't have to write things like 
$$\hbox[|font_info[width_base[f]+font_info[char_base[f]+c].qqqq.b0].sc|]$$ 
too often. The \.[WEB] definitions here make |char_info(f)(c)| the 
|four_quarters| word of font information corresponding to character 
|c| of font |f|. If |q| is such a word, |char_width(f)(q)| will be 
the character's width; hence the long formula above is at least 
abbreviated to 
$$\hbox[|char_width(f)(char_info(f)(c))|.]$$ 
Usually, of course, we will fetch |q| first and look at several of its 
fields at the same time. 

The italic correction of a character will be denoted by 
|char_italic(f)(q)|, so it is analogous to |char_width|.  But we will get 
at the height and depth in a slightly different way, since we usually want 
to compute both height and depth if we want either one.  The value of 
|height_depth(q)| will be the 8-bit quantity 
$$b=|height_index|\times16+|depth_index|,$$ and if |b| is such a byte we 
will write |char_height(f)(b)| and |char_depth(f)(b)| for the height and 
depth of the character |c| for which |q=char_info(f)(c)|. Got that? 

The tag field will be called |char_tag(q)|; the remainder byte will be 
called |rem_byte(q)|, using a macro that we have already defined above. 

Access to a character's |width|, |height|, |depth|, and |tag| fields is 
part of \TeX's inner loop, so we want these macros to produce code that is 
as fast as possible under the circumstances. 
(*inner loop*) 


MODULE555
The global variable |null_character| is set up to be a word of 
|char_info| for a character that doesn't exist. Such a word provides a 
convenient way to deal with erroneous situations. 


MODULE556

MODULE557
Here are some macros that help process ligatures and kerns. 
We write |char_kern(f)(j)| to find the amount of kerning specified by 
kerning command~|j| in font~|f|. If |j| is the |char_info| for a character 
with a ligature/kern program, the first instruction of that program is either 
|i=font_info[lig_kern_start(f)(j)]| or |font_info[lig_kern_restart(f)(i)]|, 
depending on whether or not |skip_byte(i)<=stop_flag|. 

The constant |kern_base_offset| should be simplified, for \PASCAL\ compilers 
that do not do local optimization. 
(*system dependencies*) 


MODULE558
Font parameters are referred to as |slant(f)|, |space(f)|, etc. 


MODULE559

INSERT: 'The x-height for |cur_font|'
=x_height(cur_font) 


MODULE560
\TeX\ checks the information of a \.[TFM] file for validity as the 
file is being read in, so that no further checks will be needed when 
typesetting is going on. The somewhat tedious subroutine that does this 
is called |read_font_info|. It has four parameters: the user font 
identifier~|u|, the file name and area strings |nom| and |aire|, and the 
``at'' size~|s|. If |s|~is negative, it's the negative of a scale factor 
to be applied to the design size; |s=-1000| is the normal case. 
Otherwise |s| will be substituted for the design size; in this 
case, |s| must be positive and less than $2048\rm\,pt$ 
(i.e., it must be less than $2^[27]$ when considered as an integer). 

The subroutine opens and closes a global file variable called |tfm_file|. 
It returns the value of the internal font number that was just loaded. 
If an error is detected, an error message is issued and no font 
information is stored; |null_font| is returned in this case. 


MODULE561
There are programs called \.[TFtoPL] and \.[PLtoTF] that convert 
between the \.[TFM] format and a symbolic property-list format 
that can be easily edited. These programs contain extensive 
diagnostic information, so \TeX\ does not have to bother giving 
precise details about why it rejects a particular \.[TFM] file. 
(*TFtoPL*) (*PLtoTF*) 


MODULE562

MODULE563

MODULE564
Note: A malformed \.[TFM] file might be shorter than it claims to be; 
thus |eof(tfm_file)| might be true when |read_font_info| refers to 
|tfm_file^| or when it says |get(tfm_file)|. If such circumstances 
cause system error messages, you will have to defeat them somehow, 
for example by defining |fget| to be `\ignorespaces|begin get(tfm_file);| 
|if eof(tfm_file) then abort; end|\unskip'. 
(*system dependencies*) 


MODULE565

MODULE566
The preliminary settings of the index-offset variables |char_base|, 
|width_base|, |lig_kern_base|, |kern_base|, and |exten_base| will be 
corrected later by subtracting |min_quarterword| from them; and we will 
subtract 1 from |param_base| too. It's best to forget about such anomalies 
until later. 


MODULE567

MODULE568
Only the first two words of the header are needed by \TeX82. 


MODULE569

MODULE570
We want to make sure that there is no cycle of characters linked together 
by |list_tag| entries, since such a cycle would get \TeX\ into an endless 
loop. If such a cycle exists, the routine here detects it when processing 
the largest character code in the cycle. 


MODULE571
A |fix_word| whose four bytes are $(a,b,c,d)$ from left to right represents 
the number 
$$x=\left\[\vcenter[\halign[$#$,\hfil\qquad&if $#$\hfil\cr 
b\cdot2^[-4]+c\cdot2^[-12]+d\cdot2^[-20]&a=0;\cr 
-16+b\cdot2^[-4]+c\cdot2^[-12]+d\cdot2^[-20]&a=255.\cr]]\right.$$ 
(No other choices of |a| are allowed, since the magnitude of a number in 
design-size units must be less than 16.)  We want to multiply this 
quantity by the integer~|z|, which is known to be less than $2^[27]$. 
If $|z|<2^[23]$, the individual multiplications $b\cdot z$, 
$c\cdot z$, $d\cdot z$ cannot overflow; otherwise we will divide |z| by 2, 
4, 8, or 16, to obtain a multiplier less than $2^[23]$, and we can 
compensate for this later. If |z| has thereby been replaced by 
$|z|^\prime=|z|/2^e$, let $\beta=2^[4-e]$; we shall compute 
$$\lfloor(b+c\cdot2^[-8]+d\cdot2^[-16])\,z^\prime/\beta\rfloor$$ 
if $a=0$, or the same quantity minus $\alpha=2^[4+e]z^\prime$ if $a=255$. 
This calculation must be done exactly, in order to guarantee portability 
of \TeX\ between computers. 


MODULE572

MODULE573

MODULE574

MODULE575
We check to see that the \.[TFM] file doesn't end prematurely; but 
no error message is given for files having more than |lf| words. 


MODULE576
Now to wrap it up, we have checked all the necessary things about the \.[TFM] 
file, and all we need to do is put the finishing touches on the data for 
the new font. 


MODULE577
Before we forget about the format of these tables, let's deal with two 
of \TeX's basic scanning routines related to font information. 


MODULE578
The following routine is used to implement `\.[\\fontdimen] |n| |f|'. 
The boolean parameter |writing| is set |true| if the calling program 
intends to change the parameter value. 


MODULE579

MODULE580

MODULE581
When \TeX\ wants to typeset a character that doesn't exist, the 
character node is not created; thus the output routine can assume 
that characters exist when it sees them. The following procedure 
prints a warning message unless the user has suppressed it. 


MODULE582
Here is a function that returns a pointer to a character node for a 
given character in a given font. If that character doesn't exist, 
|null| is returned instead. 


SPECIAL MODULE 583:  \[31] Device-independent file format.

The most important output produced by a run of \TeX\ is the ``device 
independent'' (\.[DVI]) file that specifies where characters and rules 
are to appear on printed pages. The form of these files was designed by 
David R. Fuchs in 1979. Almost any reasonable typesetting device can be 
(*Fuchs, David Raymond*) 
(*DVI_files][\.[DVI] files*) 
driven by a program that takes \.[DVI] files as input, and dozens of such 
\.[DVI]-to-whatever programs have been written. Thus, it is possible to 
print the output of \TeX\ on many different kinds of equipment, using \TeX\ 
as a device-independent ``front end.'' 

A \.[DVI] file is a stream of 8-bit bytes, which may be regarded as a 
series of commands in a machine-like language. The first byte of each command 
is the operation code, and this code is followed by zero or more bytes 
that provide parameters to the command. The parameters themselves may consist 
of several consecutive bytes; for example, the `|set_rule|' command has two 
parameters, each of which is four bytes long. Parameters are usually 
regarded as nonnegative integers; but four-byte-long parameters, 
and shorter parameters that denote distances, can be 
either positive or negative. Such parameters are given in two's complement 
notation. For example, a two-byte-long distance parameter has a value between 
$-2^[15]$ and $2^[15]-1$. As in \.[TFM] files, numbers that occupy 
more than one byte position appear in BigEndian order. 

A \.[DVI] file consists of a ``preamble,'' followed by a sequence of one 
or more ``pages,'' followed by a ``postamble.'' The preamble is simply a 
|pre| command, with its parameters that define the dimensions used in the 
file; this must come first.  Each ``page'' consists of a |bop| command, 
followed by any number of other commands that tell where characters are to 
be placed on a physical page, followed by an |eop| command. The pages 
appear in the order that \TeX\ generated them. If we ignore |nop| commands 
and \\[fnt\_def] commands (which are allowed between any two commands in 
the file), each |eop| command is immediately followed by a |bop| command, 
or by a |post| command; in the latter case, there are no more pages in the 
file, and the remaining bytes form the postamble.  Further details about 
the postamble will be explained later. 

Some parameters in \.[DVI] commands are ``pointers.'' These are four-byte 
quantities that give the location number of some other byte in the file; 
the first byte is number~0, then comes number~1, and so on. For example, 
one of the parameters of a |bop| command points to the previous |bop|; 
this makes it feasible to read the pages in backwards order, in case the 
results are being directed to a device that stacks its output face up. 
Suppose the preamble of a \.[DVI] file occupies bytes 0 to 99. Now if the 
first page occupies bytes 100 to 999, say, and if the second 
page occupies bytes 1000 to 1999, then the |bop| that starts in byte 1000 
points to 100 and the |bop| that starts in byte 2000 points to 1000. (The 
very first |bop|, i.e., the one starting in byte 100, has a pointer of~$-1$.) 


MODULE584
The \.[DVI] format is intended to be both compact and easily interpreted 
by a machine. Compactness is achieved by making most of the information 
implicit instead of explicit. When a \.[DVI]-reading program reads the 
commands for a page, it keeps track of several quantities: (a)~The current 
font |f| is an integer; this value is changed only 
by \\[fnt] and \\[fnt\_num] commands. (b)~The current position on the page 
is given by two numbers called the horizontal and vertical coordinates, 
|h| and |v|. Both coordinates are zero at the upper left corner of the page; 
moving to the right corresponds to increasing the horizontal coordinate, and 
moving down corresponds to increasing the vertical coordinate. Thus, the 
coordinates are essentially Cartesian, except that vertical directions are 
flipped; the Cartesian version of |(h,v)| would be |(h,-v)|.  (c)~The 
current spacing amounts are given by four numbers |w|, |x|, |y|, and |z|, 
where |w| and~|x| are used for horizontal spacing and where |y| and~|z| 
are used for vertical spacing. (d)~There is a stack containing 
|(h,v,w,x,y,z)| values; the \.[DVI] commands |push| and |pop| are used to 
change the current level of operation. Note that the current font~|f| is 
not pushed and popped; the stack contains only information about 
positioning. 

The values of |h|, |v|, |w|, |x|, |y|, and |z| are signed integers having up 
to 32 bits, including the sign. Since they represent physical distances, 
there is a small unit of measurement such that increasing |h| by~1 means 
moving a certain tiny distance to the right. The actual unit of 
measurement is variable, as explained below; \TeX\ sets things up so that 
its \.[DVI] output is in sp units, i.e., scaled points, in agreement with 
all the |scaled| dimensions in \TeX's data structures. 


MODULE585
Here is a list of all the commands that may appear in a \.[DVI] file. Each 
command is specified by its symbolic name (e.g., |bop|), its opcode byte 
(e.g., 139), and its parameters (if any). The parameters are followed 
by a bracketed number telling how many bytes they occupy; for example, 
`|p[4]|' means that parameter |p| is four bytes long. 

\yskip\hang|set_char_0| 0. Typeset character number~0 from font~|f| 
such that the reference point of the character is at |(h,v)|. Then 
increase |h| by the width of that character. Note that a character may 
have zero or negative width, so one cannot be sure that |h| will advance 
after this command; but |h| usually does increase. 

\yskip\hang\\[set\_char\_1] through \\[set\_char\_127] (opcodes 1 to 127). 
Do the operations of |set_char_0|; but use the character whose number 
matches the opcode, instead of character~0. 

\yskip\hang|set1| 128 |c[1]|. Same as |set_char_0|, except that character 
number~|c| is typeset. \TeX82 uses this command for characters in the 
range |128<=c<256|. 

\yskip\hang|set2| 129 |c[2]|. Same as |set1|, except that |c|~is two 
bytes long, so it is in the range |0<=c<65536|. \TeX82 never uses this 
command, but it should come in handy for extensions of \TeX\ that deal 
with oriental languages. 
(*oriental characters*)(*Chinese characters*)(*Japanese characters*) 

\yskip\hang|set3| 130 |c[3]|. Same as |set1|, except that |c|~is three 
bytes long, so it can be as large as $2^[24]-1$. Not even the Chinese 
language has this many characters, but this command might prove useful 
in some yet unforeseen extension. 

\yskip\hang|set4| 131 |c[4]|. Same as |set1|, except that |c|~is four 
bytes long. Imagine that. 

\yskip\hang|set_rule| 132 |a[4]| |b[4]|. Typeset a solid black rectangle 
of height~|a| and width~|b|, with its bottom left corner at |(h,v)|. Then 
set |h:=h+b|. If either |a<=0| or |b<=0|, nothing should be typeset. Note 
that if |b<0|, the value of |h| will decrease even though nothing else happens. 
See below for details about how to typeset rules so that consistency with 
\MF\ is guaranteed. 

\yskip\hang|put1| 133 |c[1]|. Typeset character number~|c| from font~|f| 
such that the reference point of the character is at |(h,v)|. (The `put' 
commands are exactly like the `set' commands, except that they simply put out a 
character or a rule without moving the reference point afterwards.) 

\yskip\hang|put2| 134 |c[2]|. Same as |set2|, except that |h| is not changed. 

\yskip\hang|put3| 135 |c[3]|. Same as |set3|, except that |h| is not changed. 

\yskip\hang|put4| 136 |c[4]|. Same as |set4|, except that |h| is not changed. 

\yskip\hang|put_rule| 137 |a[4]| |b[4]|. Same as |set_rule|, except that 
|h| is not changed. 

\yskip\hang|nop| 138. No operation, do nothing. Any number of |nop|'s 
may occur between \.[DVI] commands, but a |nop| cannot be inserted between 
a command and its parameters or between two parameters. 

\yskip\hang|bop| 139 $c_0[4]$ $c_1[4]$ $\ldots$ $c_9[4]$ $p[4]$. Beginning 
of a page: Set |(h,v,w,x,y,z):=(0,0,0,0,0,0)| and set the stack empty. Set 
the current font |f| to an undefined value.  The ten $c_i$ parameters hold 
the values of \.[\\count0] $\ldots$ \.[\\count9] in \TeX\ at the time 
\.[\\shipout] was invoked for this page; they can be used to identify 
pages, if a user wants to print only part of a \.[DVI] file. The parameter 
|p| points to the previous |bop| in the file; the first 
|bop| has $p=-1$. 

\yskip\hang|eop| 140.  End of page: Print what you have read since the 
previous |bop|. At this point the stack should be empty. (The \.[DVI]-reading 
programs that drive most output devices will have kept a buffer of the 
material that appears on the page that has just ended. This material is 
largely, but not entirely, in order by |v| coordinate and (for fixed |v|) by 
|h|~coordinate; so it usually needs to be sorted into some order that is 
appropriate for the device in question.) 

\yskip\hang|push| 141. Push the current values of |(h,v,w,x,y,z)| onto the 
top of the stack; do not change any of these values. Note that |f| is 
not pushed. 

\yskip\hang|pop| 142. Pop the top six values off of the stack and assign 
them respectively to |(h,v,w,x,y,z)|. The number of pops should never 
exceed the number of pushes, since it would be highly embarrassing if the 
stack were empty at the time of a |pop| command. 

\yskip\hang|right1| 143 |b[1]|. Set |h:=h+b|, i.e., move right |b| units. 
The parameter is a signed number in two's complement notation, |-128<=b<128|; 
if |b<0|, the reference point moves left. 

\yskip\hang|right2| 144 |b[2]|. Same as |right1|, except that |b| is a 
two-byte quantity in the range |-32768<=b<32768|. 

\yskip\hang|right3| 145 |b[3]|. Same as |right1|, except that |b| is a 
three-byte quantity in the range |(*$-2^[23]$*)<=b<(*$2^[23]$*)|. 

\yskip\hang|right4| 146 |b[4]|. Same as |right1|, except that |b| is a 
four-byte quantity in the range |(*$-2^[31]$*)<=b<(*$2^[31]$*)|. 

\yskip\hang|w0| 147. Set |h:=h+w|; i.e., move right |w| units. With luck, 
this parameterless command will usually suffice, because the same kind of motion 
will occur several times in succession; the following commands explain how 
|w| gets particular values. 

\yskip\hang|w1| 148 |b[1]|. Set |w:=b| and |h:=h+b|. The value of |b| is a 
signed quantity in two's complement notation, |-128<=b<128|. This command 
changes the current |w|~spacing and moves right by |b|. 

\yskip\hang|w2| 149 |b[2]|. Same as |w1|, but |b| is two bytes long, 
|-32768<=b<32768|. 

\yskip\hang|w3| 150 |b[3]|. Same as |w1|, but |b| is three bytes long, 
|(*$-2^[23]$*)<=b<(*$2^[23]$*)|. 

\yskip\hang|w4| 151 |b[4]|. Same as |w1|, but |b| is four bytes long, 
|(*$-2^[31]$*)<=b<(*$2^[31]$*)|. 

\yskip\hang|x0| 152. Set |h:=h+x|; i.e., move right |x| units. The `|x|' 
commands are like the `|w|' commands except that they involve |x| instead 
of |w|. 

\yskip\hang|x1| 153 |b[1]|. Set |x:=b| and |h:=h+b|. The value of |b| is a 
signed quantity in two's complement notation, |-128<=b<128|. This command 
changes the current |x|~spacing and moves right by |b|. 

\yskip\hang|x2| 154 |b[2]|. Same as |x1|, but |b| is two bytes long, 
|-32768<=b<32768|. 

\yskip\hang|x3| 155 |b[3]|. Same as |x1|, but |b| is three bytes long, 
|(*$-2^[23]$*)<=b<(*$2^[23]$*)|. 

\yskip\hang|x4| 156 |b[4]|. Same as |x1|, but |b| is four bytes long, 
|(*$-2^[31]$*)<=b<(*$2^[31]$*)|. 

\yskip\hang|down1| 157 |a[1]|. Set |v:=v+a|, i.e., move down |a| units. 
The parameter is a signed number in two's complement notation, |-128<=a<128|; 
if |a<0|, the reference point moves up. 

\yskip\hang|down2| 158 |a[2]|. Same as |down1|, except that |a| is a 
two-byte quantity in the range |-32768<=a<32768|. 

\yskip\hang|down3| 159 |a[3]|. Same as |down1|, except that |a| is a 
three-byte quantity in the range |(*$-2^[23]$*)<=a<(*$2^[23]$*)|. 

\yskip\hang|down4| 160 |a[4]|. Same as |down1|, except that |a| is a 
four-byte quantity in the range |(*$-2^[31]$*)<=a<(*$2^[31]$*)|. 

\yskip\hang|y0| 161. Set |v:=v+y|; i.e., move down |y| units. With luck, 
this parameterless command will usually suffice, because the same kind of motion 
will occur several times in succession; the following commands explain how 
|y| gets particular values. 

\yskip\hang|y1| 162 |a[1]|. Set |y:=a| and |v:=v+a|. The value of |a| is a 
signed quantity in two's complement notation, |-128<=a<128|. This command 
changes the current |y|~spacing and moves down by |a|. 

\yskip\hang|y2| 163 |a[2]|. Same as |y1|, but |a| is two bytes long, 
|-32768<=a<32768|. 

\yskip\hang|y3| 164 |a[3]|. Same as |y1|, but |a| is three bytes long, 
|(*$-2^[23]$*)<=a<(*$2^[23]$*)|. 

\yskip\hang|y4| 165 |a[4]|. Same as |y1|, but |a| is four bytes long, 
|(*$-2^[31]$*)<=a<(*$2^[31]$*)|. 

\yskip\hang|z0| 166. Set |v:=v+z|; i.e., move down |z| units. The `|z|' commands 
are like the `|y|' commands except that they involve |z| instead of |y|. 

\yskip\hang|z1| 167 |a[1]|. Set |z:=a| and |v:=v+a|. The value of |a| is a 
signed quantity in two's complement notation, |-128<=a<128|. This command 
changes the current |z|~spacing and moves down by |a|. 

\yskip\hang|z2| 168 |a[2]|. Same as |z1|, but |a| is two bytes long, 
|-32768<=a<32768|. 

\yskip\hang|z3| 169 |a[3]|. Same as |z1|, but |a| is three bytes long, 
|(*$-2^[23]$*)<=a<(*$2^[23]$*)|. 

\yskip\hang|z4| 170 |a[4]|. Same as |z1|, but |a| is four bytes long, 
|(*$-2^[31]$*)<=a<(*$2^[31]$*)|. 

\yskip\hang|fnt_num_0| 171. Set |f:=0|. Font 0 must previously have been 
defined by a \\[fnt\_def] instruction, as explained below. 

\yskip\hang\\[fnt\_num\_1] through \\[fnt\_num\_63] (opcodes 172 to 234). Set 
|f:=1|, \dots, \hbox[|f:=63|], respectively. 

\yskip\hang|fnt1| 235 |k[1]|. Set |f:=k|. \TeX82 uses this command for font 
numbers in the range |64<=k<256|. 

\yskip\hang|fnt2| 236 |k[2]|. Same as |fnt1|, except that |k|~is two 
bytes long, so it is in the range |0<=k<65536|. \TeX82 never generates this 
command, but large font numbers may prove useful for specifications of 
color or texture, or they may be used for special fonts that have fixed 
numbers in some external coding scheme. 

\yskip\hang|fnt3| 237 |k[3]|. Same as |fnt1|, except that |k|~is three 
bytes long, so it can be as large as $2^[24]-1$. 

\yskip\hang|fnt4| 238 |k[4]|. Same as |fnt1|, except that |k|~is four 
bytes long; this is for the really big font numbers (and for the negative ones). 

\yskip\hang|xxx1| 239 |k[1]| |x[k]|. This command is undefined in 
general; it functions as a $(k+2)$-byte |nop| unless special \.[DVI]-reading 
programs are being used. \TeX82 generates |xxx1| when a short enough 
\.[\\special] appears, setting |k| to the number of bytes being sent. It 
is recommended that |x| be a string having the form of a keyword followed 
by possible parameters relevant to that keyword. 

\yskip\hang|xxx2| 240 |k[2]| |x[k]|. Like |xxx1|, but |0<=k<65536|. 

\yskip\hang|xxx3| 241 |k[3]| |x[k]|. Like |xxx1|, but |0<=k<(*$2^[24]$*)|. 

\yskip\hang|xxx4| 242 |k[4]| |x[k]|. Like |xxx1|, but |k| can be ridiculously 
large. \TeX82 uses |xxx4| when sending a string of length 256 or more. 

\yskip\hang|fnt_def1| 243 |k[1]| |c[4]| |s[4]| |d[4]| |a[1]| |l[1]| |n[a+l]|. 
Define font |k|, where |0<=k<256|; font definitions will be explained shortly. 

\yskip\hang|fnt_def2| 244 |k[2]| |c[4]| |s[4]| |d[4]| |a[1]| |l[1]| |n[a+l]|. 
Define font |k|, where |0<=k<65536|. 

\yskip\hang|fnt_def3| 245 |k[3]| |c[4]| |s[4]| |d[4]| |a[1]| |l[1]| |n[a+l]|. 
Define font |k|, where |0<=k<(*$2^[24]$*)|. 

\yskip\hang|fnt_def4| 246 |k[4]| |c[4]| |s[4]| |d[4]| |a[1]| |l[1]| |n[a+l]|. 
Define font |k|, where |(*$-2^[31]$*)<=k<(*$2^[31]$*)|. 

\yskip\hang|pre| 247 |i[1]| |num[4]| |den[4]| |mag[4]| |k[1]| |x[k]|. 
Beginning of the preamble; this must come at the very beginning of the 
file. Parameters |i|, |num|, |den|, |mag|, |k|, and |x| are explained below. 

\yskip\hang|post| 248. Beginning of the postamble, see below. 

\yskip\hang|post_post| 249. Ending of the postamble, see below. 

\yskip\noindent Commands 250--255 are undefined at the present time. 


MODULE586

MODULE587
The preamble contains basic information about the file as a whole. As 
stated above, there are six parameters: 
$$\hbox[|i[1]| |num[4]| |den[4]| |mag[4]| |k[1]| |x[k]|.]$$ 
The |i| byte identifies \.[DVI] format; currently this byte is always set 
to~2. (The value |i=3| is currently used for an extended format that 
allows a mixture of right-to-left and left-to-right typesetting. 
Some day we will set |i=4|, when \.[DVI] format makes another 
incompatible change---perhaps in the year 2048.) 

The next two parameters, |num| and |den|, are positive integers that define 
the units of measurement; they are the numerator and denominator of a 
fraction by which all dimensions in the \.[DVI] file could be multiplied 
in order to get lengths in units of $10^[-7]$ meters. Since $\rm 7227[pt] = 
254[cm]$, and since \TeX\ works with scaled points where there are $2^[16]$ 
sp in a point, \TeX\ sets 
$|num|/|den|=(254\cdot10^5)/(7227\cdot2^[16])=25400000/473628672$. 
(*sp*) 

The |mag| parameter is what \TeX\ calls \.[\\mag], i.e., 1000 times the 
desired magnification. The actual fraction by which dimensions are 
multiplied is therefore $|mag|\cdot|num|/1000|den|$. Note that if a \TeX\ 
source document does not call for any `\.[true]' dimensions, and if you 
change it only by specifying a different \.[\\mag] setting, the \.[DVI] 
file that \TeX\ creates will be completely unchanged except for the value 
of |mag| in the preamble and postamble. (Fancy \.[DVI]-reading programs allow 
users to override the |mag|~setting when a \.[DVI] file is being printed.) 

Finally, |k| and |x| allow the \.[DVI] writer to include a comment, which is not 
interpreted further. The length of comment |x| is |k|, where |0<=k<256|. 


MODULE588
Font definitions for a given font number |k| contain further parameters 
$$\hbox[|c[4]| |s[4]| |d[4]| |a[1]| |l[1]| |n[a+l]|.]$$ 
The four-byte value |c| is the check sum that \TeX\ found in the \.[TFM] 
file for this font; |c| should match the check sum of the font found by 
programs that read this \.[DVI] file. 
(*check sum*) 

Parameter |s| contains a fixed-point scale factor that is applied to 
the character widths in font |k|; font dimensions in \.[TFM] files and 
other font files are relative to this quantity, which is called the 
``at size'' elsewhere in this documentation. The value of |s| is 
always positive and less than $2^[27]$. It is given in the same units 
as the other \.[DVI] dimensions, i.e., in sp when \TeX82 has made the 
file.  Parameter |d| is similar to |s|; it is the ``design size,'' and 
(like~|s|) it is given in \.[DVI] units. Thus, font |k| is to be used 
at $|mag|\cdot s/1000d$ times its normal size. 

The remaining part of a font definition gives the external name of the font, 
which is an ASCII string of length |a+l|. The number |a| is the length 
of the ``area'' or directory, and |l| is the length of the font name itself; 
the standard local system font area is supposed to be used when |a=0|. 
The |n| field contains the area in its first |a| bytes. 

Font definitions must appear before the first use of a particular font number. 
Once font |k| is defined, it must not be defined again; however, we 
shall see below that font definitions appear in the postamble as well as 
in the pages, so in this sense each font number is defined exactly twice, 
if at all. Like |nop| commands, font definitions can 
appear before the first |bop|, or between an |eop| and a |bop|. 


MODULE589
Sometimes it is desirable to make horizontal or vertical rules line up 
precisely with certain features in characters of a font. It is possible to 
guarantee the correct matching between \.[DVI] output and the characters 
generated by \MF\ by adhering to the following principles: (1)~The \MF\ 
characters should be positioned so that a bottom edge or left edge that is 
supposed to line up with the bottom or left edge of a rule appears at the 
reference point, i.e., in row~0 and column~0 of the \MF\ raster. This 
ensures that the position of the rule will not be rounded differently when 
the pixel size is not a perfect multiple of the units of measurement in 
the \.[DVI] file. (2)~A typeset rule of height $a>0$ and width $b>0$ 
should be equivalent to a \MF-generated character having black pixels in 
precisely those raster positions whose \MF\ coordinates satisfy 
|0<=x<(*$\alpha$*)b| and |0<=y<(*$\alpha$*)a|, where $\alpha$ is the number 
of pixels per \.[DVI] unit. 
(*METAFONT][\MF*) 
(*alignment of rules with characters*) 
(*rules aligning with characters*) 


MODULE590
The last page in a \.[DVI] file is followed by `|post|'; this command 
introduces the postamble, which summarizes important facts that \TeX\ has 
accumulated about the file, making it possible to print subsets of the data 
with reasonable efficiency. The postamble has the form 
$$\vbox[\halign[\hbox[#\hfil]\cr 
  |post| |p[4]| |num[4]| |den[4]| |mag[4]| |l[4]| |u[4]| |s[2]| |t[2]|\cr 
  $\langle\,$font definitions$\,\rangle$\cr 
  |post_post| |q[4]| |i[1]| 223's$[[\G]4]$\cr]]$$ 
Here |p| is a pointer to the final |bop| in the file. The next three 
parameters, |num|, |den|, and |mag|, are duplicates of the quantities that 
appeared in the preamble. 

Parameters |l| and |u| give respectively the height-plus-depth of the tallest 
page and the width of the widest page, in the same units as other dimensions 
of the file. These numbers might be used by a \.[DVI]-reading program to 
position individual ``pages'' on large sheets of film or paper; however, 
the standard convention for output on normal size paper is to position each 
page so that the upper left-hand corner is exactly one inch from the left 
and the top. Experience has shown that it is unwise to design \.[DVI]-to-printer 
software that attempts cleverly to center the output; a fixed position of 
the upper left corner is easiest for users to understand and to work with. 
Therefore |l| and~|u| are often ignored. 

Parameter |s| is the maximum stack depth (i.e., the largest excess of 
|push| commands over |pop| commands) needed to process this file. Then 
comes |t|, the total number of pages (|bop| commands) present. 

The postamble continues with font definitions, which are any number of 
\\[fnt\_def] commands as described above, possibly interspersed with |nop| 
commands. Each font number that is used in the \.[DVI] file must be defined 
exactly twice: Once before it is first selected by a \\[fnt] command, and once 
in the postamble. 


MODULE591
The last part of the postamble, following the |post_post| byte that 
signifies the end of the font definitions, contains |q|, a pointer to the 
|post| command that started the postamble.  An identification byte, |i|, 
comes next; this currently equals~2, as in the preamble. 

The |i| byte is followed by four or more bytes that are all equal to 
the decimal number 223 (i.e., 223 in octal). \TeX\ puts out four to seven of 
these trailing bytes, until the total length of the file is a multiple of 
four bytes, since this works out best on machines that pack four bytes per 
word; but any number of 223's is allowed, as long as there are at least four 
of them. In effect, 223 is a sort of signature that is added at the very end. 
(*Fuchs, David Raymond*) 

This curious way to finish off a \.[DVI] file makes it feasible for 
\.[DVI]-reading programs to find the postamble first, on most computers, 
even though \TeX\ wants to write the postamble last. Most operating 
systems permit random access to individual words or bytes of a file, so 
the \.[DVI] reader can start at the end and skip backwards over the 223's 
until finding the identification byte. Then it can back up four bytes, read 
|q|, and move to byte |q| of the file. This byte should, of course, 
contain the value 248 (|post|); now the postamble can be read, so the 
\.[DVI] reader can discover all the information needed for typesetting the 
pages. Note that it is also possible to skip through the \.[DVI] file at 
reasonably high speed to locate a particular page, if that proves 
desirable. This saves a lot of time, since \.[DVI] files used in production 
jobs tend to be large. 

Unfortunately, however, standard \PASCAL\ does not include the ability to 
(*system dependencies*) 
access a random position in a file, or even to determine the length of a file. 
Almost all systems nowadays provide the necessary capabilities, so \.[DVI] 
format has been designed to work most efficiently with modern operating systems. 
But if \.[DVI] files have to be processed under the restrictions of standard 
\PASCAL, one can simply read them from front to back, since the necessary 
header information is present in the preamble and in the font definitions. 
(The |l| and |u| and |s| and |t| parameters, which appear only in the 
postamble, are ``frills'' that are handy but not absolutely necessary.) 


SPECIAL MODULE 592:  \[32] Shipping pages out.

After considering \TeX's eyes and stomach, we come now to the bowels. 
(*bowels*) 

The |ship_out| procedure is given a pointer to a box; its mission is 
to describe that box in \.[DVI] form, outputting a ``page'' to |dvi_file|. 
The \.[DVI] coordinates $(h,v)=(0,0)$ should correspond to the upper left 
corner of the box being shipped. 

Since boxes can be inside of boxes inside of boxes, the main work of 
|ship_out| is done by two mutually recursive routines, |hlist_out| 
and |vlist_out|, which traverse the hlists and vlists inside of horizontal 
and vertical boxes. 

As individual pages are being processed, we need to accumulate 
information about the entire set of pages, since such statistics must be 
reported in the postamble. The global variables |total_pages|, |max_v|, 
|max_h|, |max_push|, and |last_bop| are used to record this information. 

The variable |doing_leaders| is |true| while leaders are being output. 
The variable |dead_cycles| contains the number of times an output routine 
has been initiated since the last |ship_out|. 

A few additional global variables are also defined here for use in 
|vlist_out| and |hlist_out|. They could have been local variables, but 
that would waste stack space when boxes are deeply nested, since the 
values of these variables are not needed during recursive calls. 
(*recursion*) 


MODULE593

MODULE594
The \.[DVI] bytes are output to a buffer instead of being written directly 
to the output file. This makes it possible to reduce the overhead of 
subroutine calls, thereby measurably speeding up the computation, since 
output of \.[DVI] bytes is part of \TeX's inner loop. And it has another 
advantage as well, since we can change instructions in the buffer in order to 
make the output more compact. For example, a `|down2|' command can be 
changed to a `|y2|', thereby making a subsequent `|y0|' command possible, 
saving two bytes. 

The output buffer is divided into two parts of equal size; the bytes found 
in |dvi_buf[0..half_buf-1]| constitute the first half, and those in 
|dvi_buf[half_buf..dvi_buf_size-1]| constitute the second. The global 
variable |dvi_ptr| points to the position that will receive the next 
output byte. When |dvi_ptr| reaches |dvi_limit|, which is always equal 
to one of the two values |half_buf| or |dvi_buf_size|, the half buffer that 
is about to be invaded next is sent to the output and |dvi_limit| is 
changed to its other value. Thus, there is always at least a half buffer's 
worth of information present, except at the very beginning of the job. 

Bytes of the \.[DVI] file are numbered sequentially starting with 0; 
the next byte to be generated will be number |dvi_offset+dvi_ptr|. 
A byte is present in the buffer only if its number is |>=dvi_gone|. 


MODULE595
Some systems may find it more efficient to make |dvi_buf| a |packed| 
array, since output of four bytes at once may be facilitated. 
(*system dependencies*) 


MODULE596
Initially the buffer is all in one piece; we will output half of it only 
after it first fills up. 


MODULE597
The actual output of |dvi_buf[a..b]| to |dvi_file| is performed by calling 
|write_dvi(a,b)|. For best results, this procedure should be optimized to 
run as fast as possible on each particular system, since it is part of 
\TeX's inner loop. It is safe to assume that |a| and |b+1| will both be 
multiples of 4 when |write_dvi(a,b)| is called; therefore it is possible on 
many machines to use efficient methods to pack four bytes per word and to 
output an array of words with one system call. 
(*system dependencies*) 
(*inner loop*) 
(*defecation*) 


MODULE598
To put a byte in the buffer without paying the cost of invoking a procedure 
each time, we use the macro |dvi_out|. 


MODULE599
Here is how we clean out the buffer when \TeX\ is all through; |dvi_ptr| 
will be a multiple of~4. 


MODULE600
The |dvi_four| procedure outputs four bytes in two's complement notation, 
without risking arithmetic overflow. 


MODULE601
A mild optimization of the output is performed by the |dvi_pop| 
routine, which issues a |pop| unless it is possible to cancel a 
`|push| |pop|' pair. The parameter to |dvi_pop| is the byte address 
following the old |push| that matches the new |pop|. 


MODULE602
Here's a procedure that outputs a font definition. Since \TeX82 uses at 
most 256 different fonts per job, |fnt_def1| is always used as the command code. 


MODULE603

MODULE604
Versions of \TeX\ intended for small computers might well choose to omit 
the ideas in the next few parts of this program, since it is not really 
necessary to optimize the \.[DVI] code by making use of the |w0|, |x0|, 
|y0|, and |z0| commands. Furthermore, the algorithm that we are about to 
describe does not pretend to give an optimum reduction in the length 
of the \.[DVI] code; after all, speed is more important than compactness. 
But the method is surprisingly effective, and it takes comparatively little 
time. 

We can best understand the basic idea by first considering a simpler problem 
that has the same essential characteristics. Given a sequence of digits, 
say $3\,1\,4\,1\,5\,9\,2\,6\,5\,3\,5\,8\,9$, we want to assign subscripts 
$d$, $y$, or $z$ to each digit so as to maximize the number of ``$y$-hits'' 
and ``$z$-hits''; a $y$-hit is an instance of two appearances of the same 
digit with the subscript $y$, where no $y$'s intervene between the two 
appearances, and a $z$-hit is defined similarly. For example, the sequence 
above could be decorated with subscripts as follows: 
$$3_z\,1_y\,4_d\,1_y\,5_y\,9_d\,2_d\,6_d\,5_y\,3_z\,5_y\,8_d\,9_d.$$ 
There are three $y$-hits ($1_y\ldots1_y$ and $5_y\ldots5_y\ldots5_y$) and 
one $z$-hit ($3_z\ldots3_z$); there are no $d$-hits, since the two appearances 
of $9_d$ have $d$'s between them, but we don't count $d$-hits so it doesn't 
matter how many there are. These subscripts are analogous to the \.[DVI] 
commands called \\[down], $y$, and $z$, and the digits are analogous to 
different amounts of vertical motion; a $y$-hit or $z$-hit corresponds to 
the opportunity to use the one-byte commands |y0| or |z0| in a \.[DVI] file. 

\TeX's method of assigning subscripts works like this: Append a new digit, 
say $\delta$, to the right of the sequence. Now look back through the 
sequence until one of the following things happens: (a)~You see 
$\delta_y$ or $\delta_z$, and this was the first time you encountered a 
$y$ or $z$ subscript, respectively.  Then assign $y$ or $z$ to the new 
$\delta$; you have scored a hit. (b)~You see $\delta_d$, and no $y$ 
subscripts have been encountered so far during this search.  Then change 
the previous $\delta_d$ to $\delta_y$ (this corresponds to changing a 
command in the output buffer), and assign $y$ to the new $\delta$; it's 
another hit.  (c)~You see $\delta_d$, and a $y$ subscript has been seen 
but not a $z$.  Change the previous $\delta_d$ to $\delta_z$ and assign 
$z$ to the new $\delta$. (d)~You encounter both $y$ and $z$ subscripts 
before encountering a suitable $\delta$, or you scan all the way to the 
front of the sequence. Assign $d$ to the new $\delta$; this assignment may 
be changed later. 

The subscripts $3_z\,1_y\,4_d\ldots\,$ in the example above were, in fact, 
produced by this procedure, as the reader can verify. (Go ahead and try it.) 


MODULE605
In order to implement such an idea, \TeX\ maintains a stack of pointers 
to the \\[down], $y$, and $z$ commands that have been generated for the 
current page. And there is a similar stack for \\[right], |w|, and |x| 
commands. These stacks are called the down stack and right stack, and their 
top elements are maintained in the variables |down_ptr| and |right_ptr|. 

Each entry in these stacks contains four fields: The |width| field is 
the amount of motion down or to the right; the |location| field is the 
byte number of the \.[DVI] command in question (including the appropriate 
|dvi_offset|); the |link| field points to the next item below this one 
on the stack; and the |info| field encodes the options for possible change 
in the \.[DVI] command. 


MODULE606

MODULE607
Here is a subroutine that produces a \.[DVI] command for some specified 
downward or rightward motion. It has two parameters: |w| is the amount 
of motion, and |o| is either |down1| or |right1|. We use the fact that 
the command codes have convenient arithmetic properties: |y1-down1=w1-right1| 
and |z1-down1=x1-right1|. 


MODULE608
The |info| fields in the entries of the down stack or the right stack 
have six possible settings: |y_here| or |z_here| mean that the \.[DVI] 
command refers to |y| or |z|, respectively (or to |w| or |x|, in the 
case of horizontal motion); |yz_OK| means that the \.[DVI] command is 
\\[down] (or \\[right]) but can be changed to either |y| or |z| (or 
to either |w| or |x|); |y_OK| means that it is \\[down] and can be changed 
to |y| but not |z|; |z_OK| is similar; and |d_fixed| means it must stay 
\\[down]. 

The four settings |yz_OK|, |y_OK|, |z_OK|, |d_fixed| would not need to 
be distinguished from each other if we were simply solving the 
digit-subscripting problem mentioned above. But in \TeX's case there is 
a complication because of the nested structure of |push| and |pop| 
commands. Suppose we add parentheses to the digit-subscripting problem, 
redefining hits so that $\delta_y\ldots \delta_y$ is a hit if all $y$'s between 
the $\delta$'s are enclosed in properly nested parentheses, and if the 
parenthesis level of the right-hand $\delta_y$ is deeper than or equal to 
that of the left-hand one. Thus, `(' and `)' correspond to `|push|' 
and `|pop|'. Now if we want to assign a subscript to the final 1 in the 
sequence 
$$2_y\,7_d\,1_d\,(\,8_z\,2_y\,8_z\,)\,1$$ 
we cannot change the previous $1_d$ to $1_y$, since that would invalidate 
the $2_y\ldots2_y$ hit. But we can change it to $1_z$, scoring a hit 
since the intervening $8_z$'s are enclosed in parentheses. 

The program below removes movement nodes that are introduced after a |push|, 
before it outputs the corresponding |pop|. 


MODULE609
When the |movement| procedure gets to the label |found|, the value of 
|info(p)| will be either |y_here| or |z_here|. If it is, say, |y_here|, 
the procedure generates a |y0| command (or a |w0| command), and marks 
all |info| fields between |q| and |p| so that |y| is not OK in that range. 


MODULE610

MODULE611
As we search through the stack, we are in one of three states, 
|y_seen|, |z_seen|, or |none_seen|, depending on whether we have 
encountered |y_here| or |z_here| nodes. These states are encoded as 
multiples of 6, so that they can be added to the |info| fields for quick 
decision-making. 
(*inner loop*) 


MODULE612
We might find a valid hit in a |y| or |z| byte that is already gone 
from the buffer. But we can't change bytes that are gone forever; ``the 
moving finger writes, $\ldots\,\,$.'' 


MODULE613

MODULE614

MODULE615
In case you are wondering when all the movement nodes are removed from 
\TeX's memory, the answer is that they are recycled just before 
|hlist_out| and |vlist_out| finish outputting a box. This restores the 
down and right stacks to the state they were in before the box was output, 
except that some |info|'s may have become more restrictive. 


MODULE616
The actual distances by which we want to move might be computed as the 
sum of several separate movements. For example, there might be several 
glue nodes in succession, or we might want to move right by the width of 
some box plus some amount of glue. More importantly, the baselineskip 
distances are computed in terms of glue together with the depth and 
height of adjacent boxes, and we want the \.[DVI] file to lump these 
three quantities together into a single motion. 

Therefore, \TeX\ maintains two pairs of global variables: |dvi_h| and |dvi_v| 
are the |h| and |v| coordinates corresponding to the commands actually 
output to the \.[DVI] file, while |cur_h| and |cur_v| are the coordinates 
corresponding to the current state of the output routines. Coordinate 
changes will accumulate in |cur_h| and |cur_v| without being reflected 
in the output, until such a change becomes necessary or desirable; we 
can call the |movement| procedure whenever we want to make |dvi_h=cur_h| 
or |dvi_v=cur_v|. 

The current font reflected in the \.[DVI] output is called |dvi_f|; 
there is no need for a `\\[cur\_f]' variable. 

The depth of nesting of |hlist_out| and |vlist_out| is called |cur_s|; 
this is essentially the depth of |push| commands in the \.[DVI] output. 


MODULE617

MODULE618
When |hlist_out| is called, its duty is to output the box represented 
by the |hlist_node| pointed to by |temp_ptr|. The reference point of that 
box has coordinates |(cur_h,cur_v)|. 

Similarly, when |vlist_out| is called, its duty is to output the box represented 
by the |vlist_node| pointed to by |temp_ptr|. The reference point of that 
box has coordinates |(cur_h,cur_v)|. 
(*recursion*) 


MODULE619
The recursive procedures |hlist_out| and |vlist_out| each have local variables 
|save_h| and |save_v| to hold the values of |dvi_h| and |dvi_v| just before 
entering a new level of recursion.  In effect, the values of |save_h| and 
|save_v| on \TeX's run-time stack correspond to the values of |h| and |v| 
that a \.[DVI]-reading program will push onto its coordinate stack. 


MODULE620
We ought to give special care to the efficiency of one part of |hlist_out|, 
since it belongs to \TeX's inner loop. When a |char_node| is encountered, 
we save a little time by processing several nodes in succession until 
reaching a non-|char_node|. The program uses the fact that |set_char_0=0|. 
(*inner loop*) 


MODULE621

MODULE622

MODULE623

MODULE624

MODULE625

MODULE626

MODULE627
The calculations related to leaders require a bit of care. First, in the 
case of |a_leaders| (aligned leaders), we want to move |cur_h| to 
|left_edge| plus the smallest multiple of |leader_wd| for which the result 
is not less than the current value of |cur_h|; i.e., |cur_h| should become 
$|left_edge|+|leader_wd|\times\lceil 
(|cur_h|-|left_edge|)/|leader_wd|\rceil$.  The program here should work in 
all cases even though some implementations of \PASCAL\ give nonstandard 
results for the |div| operation when |cur_h| is less than |left_edge|. 

In the case of |c_leaders| (centered leaders), we want to increase |cur_h| 
by half of the excess space not occupied by the leaders; and in the 
case of |x_leaders| (expanded leaders) we increase |cur_h| 
by $1/(q+1)$ of this excess space, where $q$ is the number of times the 
leader box will be replicated. Slight inaccuracies in the division might 
accumulate; half of this rounding error is placed at each end of the leaders. 


MODULE628
The `\\[synch]' operations here are intended to decrease the number of 
bytes needed to specify horizontal and vertical motion in the \.[DVI] output. 


MODULE629
The |vlist_out| routine is similar to |hlist_out|, but a bit simpler. 


MODULE630

MODULE631

MODULE632
The |synch_v| here allows the \.[DVI] output to use one-byte commands 
for adjusting |v| in most cases, since the baselineskip distance will 
usually be constant. 


MODULE633

MODULE634

MODULE635

MODULE636

MODULE637
When we reach this part of the program, |cur_v| indicates the top of a 
leader box, not its baseline. 


MODULE638
The |hlist_out| and |vlist_out| procedures are now complete, so we are 
ready for the |ship_out| routine that gets them started in the first place. 


MODULE639

MODULE640

MODULE641
Sometimes the user will generate a huge page because other error messages 
are being ignored. Such pages are not output to the \.[dvi] file, since they 
may confuse the printing software. 


MODULE642
At the end of the program, we must finish things off by writing the 
post\-amble. If |total_pages=0|, the \.[DVI] file was never opened. 
If |total_pages>=65536|, the \.[DVI] file will lie. And if 
|max_push>=65536|, the user deserves whatever chaos might ensue. 

An integer variable |k| will be declared for use by this routine. 


MODULE643

SPECIAL MODULE 644:  \[33] Packaging.

We're essentially done with the parts of \TeX\ that are concerned with 
the input (|get_next|) and the output (|ship_out|). So it's time to 
get heavily into the remaining part, which does the real work of typesetting. 

After lists are constructed, \TeX\ wraps them up and puts them into boxes. 
Two major subroutines are given the responsibility for this task: |hpack| 
applies to horizontal lists (hlists) and |vpack| applies to vertical lists 
(vlists). The main duty of |hpack| and |vpack| is to compute the dimensions 
of the resulting boxes, and to adjust the glue if one of those dimensions 
is pre-specified. The computed sizes normally enclose all of the material 
inside the new box; but some items may stick out if negative glue is used, 
if the box is overfull, or if a \.[\\vbox] includes other boxes that have 
been shifted left. 

The subroutine call |hpack(p,w,m)| returns a pointer to an |hlist_node| 
for a box containing the hlist that starts at |p|. Parameter |w| specifies 
a width; and parameter |m| is either `|exactly|' or `|additional|'.  Thus, 
|hpack(p,w,exactly)| produces a box whose width is exactly |w|, while 
|hpack(p,w,additional)| yields a box whose width is the natural width plus 
|w|.  It is convenient to define a macro called `|natural|' to cover the 
most common case, so that we can say |hpack(p,natural)| to get a box that 
has the natural width of list |p|. 

Similarly, |vpack(p,w,m)| returns a pointer to a |vlist_node| for a 
box containing the vlist that starts at |p|. In this case |w| represents 
a height instead of a width; the parameter |m| is interpreted as in |hpack|. 


MODULE645
The parameters to |hpack| and |vpack| correspond to \TeX's primitives 
like `\.[\\hbox] \.[to] \.[300pt]', `\.[\\hbox] \.[spread] \.[10pt]'; note 
that `\.[\\hbox]' with no dimension following it is equivalent to 
`\.[\\hbox] \.[spread] \.[0pt]'.  The |scan_spec| subroutine scans such 
constructions in the user's input, including the mandatory left brace that 
follows them, and it puts the specification onto |save_stack| so that the 
desired box can later be obtained by executing the following code: 
$$\vbox[\halign[#\hfil\cr 
|save_ptr:=save_ptr-2;|\cr 
|hpack(p,saved(1),saved(0)).|\cr]]$$ 
Special care is necessary to ensure that the special |save_stack| codes 
are placed just below the new group code, because scanning can change 
|save_stack| when \.[\\csname] appears. 


MODULE646
To figure out the glue setting, |hpack| and |vpack| determine how much 
stretchability and shrinkability are present, considering all four orders 
of infinity. The highest order of infinity that has a nonzero coefficient 
is then used as if no other orders were present. 

For example, suppose that the given list contains six glue nodes with 
the respective stretchabilities 3pt, 8fill, 5fil, 6pt, $-3$fil, $-8$fill. 
Then the total is essentially 2fil; and if a total additional space of 6pt 
is to be achieved by stretching, the actual amounts of stretch will be 
0pt, 0pt, 15pt, 0pt, $-9$pt, and 0pt, since only `fil' glue will be 
considered. (The `fill' glue is therefore not really stretching infinitely 
with respect to `fil'; nobody would actually want that to happen.) 

The arrays |total_stretch| and |total_shrink| are used to determine how much 
glue of each kind is present. A global variable |last_badness| is used 
to implement \.[\\badness]. 


MODULE647
If the global variable |adjust_tail| is non-null, the |hpack| routine 
also removes all occurrences of |ins_node|, |mark_node|, and |adjust_node| 
items and appends the resulting material onto the list that ends at 
location |adjust_tail|. 


MODULE648

INSERT: 'Set init...'
=adjust_tail:=null; last_badness:=0; 


MODULE649
Here now is |hpack|, which contains few if any surprises. 


MODULE650

MODULE651

MODULE652

MODULE653
The code here implicitly uses the fact that running dimensions are 
indicated by |null_flag|, which will be ignored in the calculations 
because it is a highly negative number. 


MODULE654
The following code is part of \TeX's inner loop; i.e., adding another 
character of text to the user's input will cause each of these instructions 
to be exercised one more time. 
(*inner loop*) 


MODULE655
Although node |q| is not necessarily the immediate predecessor of node |p|, 
it always points to some node in the list preceding |p|. Thus, we can delete 
nodes by moving |q| when necessary. The algorithm takes linear time, and the 
extra computation does not intrude on the inner loop unless it is necessary 
to make a deletion. 
(*inner loop*) 


MODULE656

MODULE657
When we get to the present part of the program, |x| is the natural width 
of the box being packaged. 


MODULE658

MODULE659

MODULE660

MODULE661
In order to provide a decent indication of where an overfull or underfull 
box originated, we use a global variable |pack_begin_line| that is 
set nonzero only when |hpack| is being called by the paragraph builder 
or the alignment finishing routine. 


MODULE662

MODULE663

MODULE664

MODULE665

MODULE666

MODULE667

MODULE668
The |vpack| subroutine is actually a special case of a slightly more 
general routine called |vpackage|, which has four parameters. The fourth 
parameter, which is |max_dimen| in the case of |vpack|, specifies the 
maximum depth of the page box that is constructed. The depth is first 
computed by the normal rules; if it exceeds this limit, the reference 
point is simply moved down until the limiting depth is attained. 


MODULE669

MODULE670

MODULE671

MODULE672
When we get to the present part of the program, |x| is the natural height 
of the box being packaged. 


MODULE673

MODULE674

MODULE675

MODULE676

MODULE677

MODULE678

MODULE679
When a box is being appended to the current vertical list, the 
baselineskip calculation is handled by the |append_to_vlist| routine. 


SPECIAL MODULE 680:  \[34] Data structures for math mode.

When \TeX\ reads a formula that is enclosed between \.\$'s, it constructs an 
[\sl mlist], which is essentially a tree structure representing that 
formula.  An mlist is a linear sequence of items, but we can regard it as 
a tree structure because mlists can appear within mlists. For example, many 
of the entries can be subscripted or superscripted, and such ``scripts'' 
are mlists in their own right. 

An entire formula is parsed into such a tree before any of the actual 
typesetting is done, because the current style of type is usually not 
known until the formula has been fully scanned. For example, when the 
formula `\.[\$a+b \\over c+d\$]' is being read, there is no way to tell 
that `\.[a+b]' will be in script size until `\.[\\over]' has appeared. 

During the scanning process, each element of the mlist being built is 
classified as a relation, a binary operator, an open parenthesis, etc., 
or as a construct like `\.[\\sqrt]' that must be built up. This classification 
appears in the mlist data structure. 

After a formula has been fully scanned, the mlist is converted to an hlist 
so that it can be incorporated into the surrounding text. This conversion is 
controlled by a recursive procedure that decides all of the appropriate 
styles by a ``top-down'' process starting at the outermost level and working 
in towards the subformulas. The formula is ultimately pasted together using 
combinations of horizontal and vertical boxes, with glue and penalty nodes 
inserted as necessary. 

An mlist is represented internally as a linked list consisting chiefly 
of ``noads'' (pronounced ``no-adds''), to distinguish them from the somewhat 
similar ``nodes'' in hlists and vlists. Certain kinds of ordinary nodes are 
allowed to appear in mlists together with the noads; \TeX\ tells the difference 
by means of the |type| field, since a noad's |type| is always greater than 
that of a node. An mlist does not contain character nodes, hlist nodes, vlist 
nodes, math nodes, ligature nodes, 
or unset nodes; in particular, each mlist item appears in the 
variable-size part of |mem|, so the |type| field is always present. 


MODULE681
Each noad is four or more words long. The first word contains the |type| 
and |subtype| and |link| fields that are already so familiar to us; the 
second, third, and fourth words are called the noad's |nucleus|, |subscr|, 
and |supscr| fields. 

Consider, for example, the simple formula `\.[\$x\^2\$]', which would be 
parsed into an mlist containing a single element called an |ord_noad|. 
The |nucleus| of this noad is a representation of `\.x', the |subscr| is 
empty, and the |supscr| is a representation of `\.2'. 

The |nucleus|, |subscr|, and |supscr| fields are further broken into 
subfields. If |p| points to a noad, and if |q| is one of its principal 
fields (e.g., |q=subscr(p)|), there are several possibilities for the 
subfields, depending on the |math_type| of |q|. 

\yskip\hang|math_type(q)=math_char| means that |fam(q)| refers to one of 
the sixteen font families, and |character(q)| is the number of a character 
within a font of that family, as in a character node. 

\yskip\hang|math_type(q)=math_text_char| is similar, but the character is 
unsubscripted and unsuperscripted and it is followed immediately by another 
character from the same font. (This |math_type| setting appears only 
briefly during the processing; it is used to suppress unwanted italic 
corrections.) 

\yskip\hang|math_type(q)=empty| indicates a field with no value (the 
corresponding attribute of noad |p| is not present). 

\yskip\hang|math_type(q)=sub_box| means that |info(q)| points to a box 
node (either an |hlist_node| or a |vlist_node|) that should be used as the 
value of the field.  The |shift_amount| in the subsidiary box node is the 
amount by which that box will be shifted downward. 

\yskip\hang|math_type(q)=sub_mlist| means that |info(q)| points to 
an mlist; the mlist must be converted to an hlist in order to obtain 
the value of this field. 

\yskip\noindent In the latter case, we might have |info(q)=null|. This 
is not the same as |math_type(q)=empty|; for example, `\.[\$P\_\[\]\$]' 
and `\.[\$P\$]' produce different results (the former will not have the 
``italic correction'' added to the width of |P|, but the ``script skip'' 
will be added). 

The definitions of subfields given here are evidently wasteful of space, 
since a halfword is being used for the |math_type| although only three 
bits would be needed. However, there are hardly ever many noads present at 
once, since they are soon converted to nodes that take up even more space, 
so we can afford to represent them in whatever way simplifies the 
programming. 


MODULE682
Each portion of a formula is classified as Ord, Op, Bin, Rel, Ope, 
Clo, Pun, or Inn, for purposes of spacing and line breaking. An 
|ord_noad|, |op_noad|, |bin_noad|, |rel_noad|, |open_noad|, |close_noad|, 
|punct_noad|, or |inner_noad| is used to represent portions of the various 
types. For example, an `\.=' sign in a formula leads to the creation of a 
|rel_noad| whose |nucleus| field is a representation of an equals sign 
(usually |fam=0|, |character=61|).  A formula preceded by \.[\\mathrel] 
also results in a |rel_noad|.  When a |rel_noad| is followed by an 
|op_noad|, say, and possibly separated by one or more ordinary nodes (not 
noads), \TeX\ will insert a penalty node (with the current |rel_penalty|) 
just after the formula that corresponds to the |rel_noad|, unless there 
already was a penalty immediately following; and a ``thick space'' will be 
inserted just before the formula that corresponds to the |op_noad|. 

A noad of type |ord_noad|, |op_noad|, \dots, |inner_noad| usually 
has a |subtype=normal|. The only exception is that an |op_noad| might 
have |subtype=limits| or |no_limits|, if the normal positioning of 
limits has been overridden for this operator. 


MODULE683
A |radical_noad| is five words long; the fifth word is the |left_delimiter| 
field, which usually represents a square root sign. 

A |fraction_noad| is six words long; it has a |right_delimiter| field 
as well as a |left_delimiter|. 

Delimiter fields are of type |four_quarters|, and they have four subfields 
called |small_fam|, |small_char|, |large_fam|, |large_char|. These subfields 
represent variable-size delimiters by giving the ``small'' and ``large'' 
starting characters, as explained in Chapter~17 of [\sl The \TeX book]. 
(*TeXbook][\sl The \TeX book*) 

A |fraction_noad| is actually quite different from all other noads. Not 
only does it have six words, it has |thickness|, |denominator|, and 
|numerator| fields instead of |nucleus|, |subscr|, and |supscr|. The 
|thickness| is a scaled value that tells how thick to make a fraction 
rule; however, the special value |default_code| is used to stand for the 
|default_rule_thickness| of the current size. The |numerator| and 
|denominator| point to mlists that define a fraction; we always have 
$$\hbox[|math_type(numerator)=math_type(denominator)=sub_mlist|].$$ The 
|left_delimiter| and |right_delimiter| fields specify delimiters that will 
be placed at the left and right of the fraction. In this way, a 
|fraction_noad| is able to represent all of \TeX's operators \.[\\over], 
\.[\\atop], \.[\\above], \.[\\overwithdelims], \.[\\atopwithdelims], and 
 \.[\\abovewithdelims]. 


MODULE684
The global variable |empty_field| is set up for initialization of empty 
fields in new noads. Similarly, |null_delimiter| is for the initialization 
of delimiter fields. 


MODULE685

MODULE686
The |new_noad| function creates an |ord_noad| that is completely null. 


MODULE687
A few more kinds of noads will complete the set: An |under_noad| has its 
nucleus underlined; an |over_noad| has it overlined. An |accent_noad| places 
an accent over its nucleus; the accent character appears as 
|fam(accent_chr(p))| and |character(accent_chr(p))|. A |vcenter_noad| 
centers its nucleus vertically with respect to the axis of the formula; 
in such noads we always have |math_type(nucleus(p))=sub_box|. 

And finally, we have |left_noad| and |right_noad| types, to implement 
\TeX's \.[\\left] and \.[\\right]. The |nucleus| of such noads is 
replaced by a |delimiter| field; thus, for example, `\.[\\left(]' produces 
a |left_noad| such that |delimiter(p)| holds the family and character 
codes for all left parentheses. A |left_noad| never appears in an mlist 
except as the first element, and a |right_noad| never appears in an mlist 
except as the last element; furthermore, we either have both a |left_noad| 
and a |right_noad|, or neither one is present. The |subscr| and |supscr| 
fields are always |empty| in a |left_noad| and a |right_noad|. 


MODULE688
Math formulas can also contain instructions like \.[\\textstyle] that 
override \TeX's normal style rules. A |style_node| is inserted into the 
data structure to record such instructions; it is three words long, so it 
is considered a node instead of a noad. The |subtype| is either |display_style| 
or |text_style| or |script_style| or |script_script_style|. The 
second and third words of a |style_node| are not used, but they are 
present because a |choice_node| is converted to a |style_node|. 

\TeX\ uses even numbers 0, 2, 4, 6 to encode the basic styles 
|display_style|, \dots, |script_script_style|, and adds~1 to get the 
``cramped'' versions of these styles. This gives a numerical order that 
is backwards from the convention of Appendix~G in [\sl The \TeX book\/]; 
i.e., a smaller style has a larger numerical value. 
(*TeXbook][\sl The \TeX book*) 


MODULE689
Finally, the \.[\\mathchoice] primitive creates a |choice_node|, which 
has special subfields |display_mlist|, |text_mlist|, |script_mlist|, 
and |script_script_mlist| pointing to the mlists for each style. 


MODULE690
Let's consider now the previously unwritten part of |show_node_list| 
that displays the things that can only be present in mlists; this 
program illustrates how to access the data structures just defined. 

In the context of the following program, |p| points to a node or noad that 
should be displayed, and the current string contains the ``recursion history'' 
that leads to this point. The recursion history consists of a dot for each 
outer level in which |p| is subsidiary to some node, or in which |p| is 
subsidiary to the |nucleus| field of some noad; the dot is replaced by 
`\.\_' or `\.\^' or `\./' or `\.\\' if |p| is descended from the |subscr| 
or |supscr| or |denominator| or |numerator| fields of noads. For example, 
the current string would be `\.[.\^.\_/]' if |p| points to the |ord_noad| for 
|x| in the (ridiculous) formula 
`\.[\$\\sqrt\[a\^\[\\mathinner\[b\_\[c\\over x+y\]\]\]\]\$]'. 


MODULE691
Here are some simple routines used in the display of noads. 


MODULE692
The next subroutine will descend to another level of recursion when a 
subsidiary mlist needs to be displayed. The parameter |c| indicates what 
character is to become part of the recursion history. An empty mlist is 
distinguished from a field with |math_type(p)=empty|, because these are 
not equivalent (as explained above). 
(*recursion*) 


MODULE693
The inelegant introduction of |show_info| in the code above seems better 
than the alternative of using \PASCAL's strange |forward| declaration for a 
procedure with parameters. The \PASCAL\ convention about dropping parameters 
from a post-|forward| procedure is, frankly, so intolerable to the author 
of \TeX\ that he would rather stoop to communication via a global temporary 
variable. (A similar stoopidity occurred with respect to |hlist_out| and 
|vlist_out| above, and it will occur with respect to |mlist_to_hlist| below.) 
(*Knuth, Donald Ervin*) 
(*PASCAL][\PASCAL*) 


MODULE694

MODULE695

MODULE696

MODULE697

MODULE698
That which can be displayed can also be destroyed. 


SPECIAL MODULE 699:  \[35] Subroutines for math mode.

In order to convert mlists to hlists, i.e., noads to nodes, we need several 
subroutines that are conveniently dealt with now. 

Let us first introduce the macros that make it easy to get at the parameters and 
other font information. A size code, which is a multiple of 16, is added to a 
family number to get an index into the table of internal font numbers 
for each combination of family and size.  (Be alert: Size codes get 
larger as the type gets smaller.) 


MODULE700
Before an mlist is converted to an hlist, \TeX\ makes sure that 
the fonts in family~2 have enough parameters to be math-symbol 
fonts, and that the fonts in family~3 have enough parameters to be 
math-extension fonts. The math-symbol parameters are referred to by using the 
following macros, which take a size code as their parameter; for example, 
|num1(cur_size)| gives the value of the |num1| parameter for the current size. 
(*parameters for symbols*) 
(*font parameters*) 


MODULE701
The math-extension parameters have similar macros, but the size code is 
omitted (since it is always |cur_size| when we refer to such parameters). 
(*parameters for symbols*) 
(*font parameters*) 


MODULE702
We also need to compute the change in style between mlists and their 
subsidiaries. The following macros define the subsidiary style for 
an overlined nucleus (|cramped_style|), for a subscript or a superscript 
(|sub_style| or |sup_style|), or for a numerator or denominator (|num_style| 
or |denom_style|). 


MODULE703
When the style changes, the following piece of program computes associated 
information: 


MODULE704
Here is a function that returns a pointer to a rule node having a given 
thickness |t|. The rule will extend horizontally to the boundary of the vlist 
that eventually contains it. 


MODULE705
The |overbar| function returns a pointer to a vlist box that consists of 
a given box |b|, above which has been placed a kern of height |k| under a 
fraction rule of thickness |t| under additional space of height |t|. 


MODULE706
The |var_delimiter| function, which finds or constructs a sufficiently 
large delimiter, is the most interesting of the auxiliary functions that 
currently concern us. Given a pointer |d| to a delimiter field in some noad, 
together with a size code |s| and a vertical distance |v|, this function 
returns a pointer to a box that contains the smallest variant of |d| whose 
height plus depth is |v| or more. (And if no variant is large enough, it 
returns the largest available variant.) In particular, this routine will 
construct arbitrarily large delimiters from extensible components, if 
|d| leads to such characters. 

The value returned is a box whose |shift_amount| has been set so that 
the box is vertically centered with respect to the axis in the given size. 
If a built-up symbol is returned, the height of the box before shifting 
will be the height of its topmost component. 


MODULE707
The search process is complicated slightly by the facts that some of the 
characters might not be present in some of the fonts, and they might not 
be probed in increasing order of height. 


MODULE708

MODULE709
Here is a subroutine that creates a new box, whose list contains a 
single character, and whose width includes the italic correction for 
that character. The height or depth of the box will be negative, if 
the height or depth of the character is negative; thus, this routine 
may deliver a slightly different result than |hpack| would produce. 


MODULE710
When the following code is executed, |char_tag(q)| will be equal to 
|ext_tag| if and only if a built-up symbol is supposed to be returned. 


MODULE711
When we build an extensible character, it's handy to have the 
following subroutine, which puts a given character on top 
of the characters already in box |b|: 


MODULE712
Another handy subroutine computes the height plus depth of 
a given character: 


MODULE713

MODULE714
The width of an extensible character is the width of the repeatable 
module. If this module does not have positive height plus depth, 
we don't use any copies of it, otherwise we use as few as possible 
(in groups of two if there is a middle part). 


MODULE715
The next subroutine is much simpler; it is used for numerators and 
denominators of fractions as well as for displayed operators and 
their limits above and below. It takes a given box~|b| and 
changes it so that the new box is centered in a box of width~|w|. 
The centering is done by putting \.[\\hss] glue at the left and right 
of the list inside |b|, then packaging the new box; thus, the 
actual box might not really be centered, if it already contains 
infinite glue. 

The given box might contain a single character whose italic correction 
has been added to the width of the box; in this case a compensating 
kern is inserted. 


MODULE716
Here is a subroutine that creates a new glue specification from another 
one that is expressed in `\.[mu]', given the value of the math unit. 


MODULE717
The |math_kern| subroutine removes |mu_glue| from a kern node, given 
the value of the math unit. 


MODULE718
Sometimes it is necessary to destroy an mlist. The following 
subroutine empties the current list, assuming that |abs(mode)=mmode|. 


SPECIAL MODULE 719:  \[36] Typesetting math formulas.

\TeX's most important routine for dealing with formulas is called 
|mlist_to_hlist|.  After a formula has been scanned and represented as an 
mlist, this routine converts it to an hlist that can be placed into a box 
or incorporated into the text of a paragraph. There are three implicit 
parameters, passed in global variables: |cur_mlist| points to the first 
node or noad in the given mlist (and it might be |null|); |cur_style| is a 
style code; and |mlist_penalties| is |true| if penalty nodes for potential 
line breaks are to be inserted into the resulting hlist. After 
|mlist_to_hlist| has acted, |link(temp_head)| points to the translated hlist. 

Since mlists can be inside mlists, the procedure is recursive. And since this 
is not part of \TeX's inner loop, the program has been written in a manner 
that stresses compactness over efficiency. 
(*recursion*) 


MODULE720
The recursion in |mlist_to_hlist| is due primarily to a subroutine 
called |clean_box| that puts a given noad field into a box using a given 
math style; |mlist_to_hlist| can call |clean_box|, which can call 
|mlist_to_hlist|. 
(*recursion*) 

The box returned by |clean_box| is ``clean'' in the 
sense that its |shift_amount| is zero. 


MODULE721
Here we save memory space in a common case. 


MODULE722
It is convenient to have a procedure that converts a |math_char| 
field to an ``unpacked'' form. The |fetch| routine sets |cur_f|, |cur_c|, 
and |cur_i| to the font code, character code, and character information bytes of 
a given noad field. It also takes care of issuing error messages for 
nonexistent characters; in such cases, |char_exists(cur_i)| will be |false| 
after |fetch| has acted, and the field will also have been reset to |empty|. 


MODULE723

MODULE724
The outputs of |fetch| are placed in global variables. 


MODULE725
We need to do a lot of different things, so |mlist_to_hlist| makes two 
passes over the given mlist. 

The first pass does most of the processing: It removes ``mu'' spacing from 
glue, it recursively evaluates all subsidiary mlists so that only the 
top-level mlist remains to be handled, it puts fractions and square roots 
and such things into boxes, it attaches subscripts and superscripts, and 
it computes the overall height and depth of the top-level mlist so that 
the size of delimiters for a |left_noad| and a |right_noad| will be known. 
The hlist resulting from each noad is recorded in that noad's |new_hlist| 
field, an integer field that replaces the |nucleus| or |thickness|. 
(*recursion*) 

The second pass eliminates all noads and inserts the correct glue and 
penalties between nodes. 


MODULE726
Here is the overall plan of |mlist_to_hlist|, and the list of its 
local variables. 


MODULE727
We use the fact that no character nodes appear in an mlist, hence 
the field |type(q)| is always present. 


MODULE728
One of the things we must do on the first pass is change a |bin_noad| to 
an |ord_noad| if the |bin_noad| is not in the context of a binary operator. 
The values of |r| and |r_type| make this fairly easy. 


MODULE729

MODULE730

MODULE731

MODULE732
Conditional math glue (`\.[\\nonscript]') results in a |glue_node| 
pointing to |zero_glue|, with |subtype(q)=cond_math_glue|; in such a case 
the node following will be eliminated if it is a glue or kern node and if the 
current size is different from |text_size|. Unconditional math glue 
(`\.[\\muskip]') is converted to normal glue by multiplying the dimensions 
by |cur_mu|. 
(*non_script_][\.[\\nonscript] primitive*) 


MODULE733

MODULE734
Most of the actual construction work of |mlist_to_hlist| is done 
by procedures with names 
like |make_fraction|, |make_radical|, etc. To illustrate 
the general setup of such procedures, let's begin with a couple of 
simple ones. 


MODULE735

MODULE736

MODULE737
According to the rules in the \.[DVI] file specifications, we ensure alignment 
(*square roots*) 
between a square root sign and the rule above its nucleus by assuming that the 
baseline of the square-root symbol is the same as the bottom of the rule. The 
height of the square-root symbol will be the thickness of the rule, and the 
depth of the square-root symbol should exceed or equal the height-plus-depth 
of the nucleus plus a certain minimum clearance~|clr|. The symbol will be 
placed so that the actual clearance is |clr| plus half the excess. 


MODULE738
Slants are not considered when placing accents in math mode. The accenter is 
centered over the accentee, and the accent width is treated as zero with 
respect to the size of the final box. 


MODULE739

MODULE740

MODULE741

MODULE742

MODULE743
The |make_fraction| procedure is a bit different because it sets 
|new_hlist(q)| directly rather than making a sub-box. 


MODULE744

MODULE745
The numerator and denominator must be separated by a certain minimum 
clearance, called |clr| in the following program. The difference between 
|clr| and the actual clearance is |2delta|. 


MODULE746
In the case of a fraction line, the minimum clearance depends on the actual 
thickness of the line. 


MODULE747

MODULE748

MODULE749
If the nucleus of an |op_noad| is a single character, it is to be 
centered vertically with respect to the axis, after first being enlarged 
(via a character list in the font) if we are in display style.  The normal 
convention for placing displayed limits is to put them above and below the 
operator in display style. 

The italic correction is removed from the character if there is a subscript 
and the limits are not being displayed. The |make_op| 
routine returns the value that should be used as an offset between 
subscript and superscript. 

After |make_op| has acted, |subtype(q)| will be |limits| if and only if 
the limits have been set above and below the operator. In that case, 
|new_hlist(q)| will already contain the desired final box. 


MODULE750
The following program builds a vlist box |v| for displayed limits. The 
width of the box is not affected by the fact that the limits may be skewed. 


MODULE751
We use |shift_up| and |shift_down| in the following program for the 
amount of glue between the displayed operator |y| and its limits |x| and 
|z|. The vlist inside box |v| will consist of |x| followed by |y| followed 
by |z|, with kern nodes for the spaces between and around them. 


MODULE752
A ligature found in a math formula does not create a |ligature_node|, because 
there is no question of hyphenation afterwards; the ligature will simply be 
stored in an ordinary |char_node|, after residing in an |ord_noad|. 

The |math_type| is converted to |math_text_char| here if we would not want to 
apply an italic correction to the current character unless it belongs 
to a math font (i.e., a font with |space=0|). 

No boundary characters enter into these ligatures. 


MODULE753
Note that a ligature between an |ord_noad| and another kind of noad 
is replaced by an |ord_noad|, when the two noads collapse into one. 
But we could make a parenthesis (say) change shape when it follows 
certain letters. Presumably a font designer will define such 
ligatures only when this convention makes sense. 

\chardef\?='174 % vertical line to indicate character retention 


MODULE754
When we get to the following part of the program, we have ``fallen through'' 
from cases that did not lead to |check_dimensions| or |done_with_noad| or 
|done_with_node|. Thus, |q|~points to a noad whose nucleus may need to be 
converted to an hlist, and whose subscripts and superscripts need to be 
appended if they are present. 

If |nucleus(q)| is not a |math_char|, the variable |delta| is the amount 
by which a superscript should be moved right with respect to a subscript 
when both are present. 
(*subscripts*) 
(*superscripts*) 


MODULE755

MODULE756
The purpose of |make_scripts(q,delta)| is to attach the subscript and/or 
superscript of noad |q| to the list that starts at |new_hlist(q)|, 
given that the subscript and superscript aren't both empty. The superscript 
will appear to the right of the subscript by a given distance |delta|. 

We set |shift_down| and |shift_up| to the minimum amounts to shift the 
baseline of subscripts and superscripts based on the given nucleus. 


MODULE757
When there is a subscript without a superscript, the top of the subscript 
should not exceed the baseline plus four-fifths of the x-height. 


MODULE758
The bottom of a superscript should never descend below the baseline plus 
one-fourth of the x-height. 


MODULE759
When both subscript and superscript are present, the subscript must be 
separated from the superscript by at least four times |default_rule_thickness|. 
If this condition would be violated, the subscript moves down, after which 
both subscript and superscript move up so that the bottom of the superscript 
is at least as high as the baseline plus four-fifths of the x-height. 


MODULE760
We have now tied up all the loose ends of the first pass of |mlist_to_hlist|. 
The second pass simply goes through and hooks everything together with the 
proper glue and penalties. It also handles the |left_noad| and |right_noad| that 
might be present, since |max_h| and |max_d| are now known. Variable |p| points 
to a node at the current end of the final hlist. 


MODULE761
Just before doing the big |case| switch in the second pass, the program 
sets up default values so that most of the branches are short. 


MODULE762
The |make_left_right| function constructs a left or right delimiter of 
the required size and returns the value |open_noad| or |close_noad|. The 
|right_noad| and |left_noad| will both be based on the original |style|, 
so they will have consistent sizes. 

We use the fact that |right_noad-left_noad=close_noad-open_noad|. 


MODULE763

MODULE764
The inter-element spacing in math formulas depends on a $8\times8$ table that 
\TeX\ preloads as a 64-digit string. The elements of this string have the 
following significance: 
$$\vbox[\halign[#\hfil\cr 
\.0 means no space;\cr 
\.1 means a conditional thin space (\.[\\nonscript\\mskip\\thinmuskip]);\cr 
\.2 means a thin space (\.[\\mskip\\thinmuskip]);\cr 
\.3 means a conditional medium space 
  (\.[\\nonscript\\mskip\\medmuskip]);\cr 
\.4 means a conditional thick space 
  (\.[\\nonscript\\mskip\\thickmuskip]);\cr 
\.* means an impossible case.\cr]]$$ 
This is all pretty cryptic, but [\sl The \TeX book\/] explains what is 
supposed to happen, and the string makes it happen. 
(*TeXbook][\sl The \TeX book*) 

A global variable |magic_offset| is computed so that if |a| and |b| are 
in the range |ord_noad..inner_noad|, then |str_pool[a*8+b+magic_offset]| 
is the digit for spacing between noad types |a| and |b|. 

If \PASCAL\ had provided a good way to preload constant arrays, this part of 
the program would not have been so strange. 
(*PASCAL][\PASCAL*) 


MODULE765

MODULE766

MODULE767
We insert a penalty node after the hlist entries of noad |q| if |pen| 
is not an ``infinite'' penalty, and if the node immediately following |q| 
is not a penalty node or a |rel_noad| or absent entirely. 


SPECIAL MODULE 768:  \[37] Alignment.

It's sort of a miracle whenever \.[\\halign] and \.[\\valign] work, because 
they cut across so many of the control structures of \TeX. 

Therefore the 
present page is probably not the best place for a beginner to start reading 
this program; it is better to master everything else first. 

Let us focus our thoughts on an example of what the input might be, in order 
to get some idea about how the alignment miracle happens. The example doesn't 
do anything useful, but it is sufficiently general to indicate all of the 
special cases that must be dealt with; please do not be disturbed by its 
apparent complexity and meaninglessness. 
$$\vbox[\halign[\.[#]\hfil\cr 
[]\\tabskip 2pt plus 3pt\cr 
[]\\halign to 300pt\[u1\#v1\&\cr 
\hskip 50pt\\tabskip 1pt plus 1fil u2\#v2\&\cr 
\hskip 50pt u3\#v3\\cr\cr 
\hskip 25pt a1\&\\omit a2\&\\vrule\\cr\cr 
\hskip 25pt \\noalign\[\\vskip 3pt\]\cr 
\hskip 25pt b1\\span b2\\cr\cr 
\hskip 25pt \\omit\&c2\\span\\omit\\cr\]\cr]]$$ 
Here's what happens: 

\yskip 
(0) When `\.[\\halign to 300pt\[]' is scanned, the |scan_spec| routine 
places the 300pt dimension onto the |save_stack|, and an |align_group| 
code is placed above it. This will make it possible to complete the alignment 
when the matching `\.\]' 
is found. 

(1) The preamble is scanned next. Macros in the preamble are not expanded, 
(*preamble*) 
except as part of a tabskip specification. For example, if \.[u2] had been 
a macro in the preamble above, it would have been expanded, since \TeX\ 
must look for `\.[minus...]' as part of the tabskip glue. A ``preamble list'' 
is constructed based on the user's preamble; in our case it contains the 
following seven items: 
$$\vbox[\halign[\.[#]\hfil\qquad&(#)\hfil\cr 
[]\\glue 2pt plus 3pt&the tabskip preceding column 1\cr 
[]\\alignrecord, width $-\infty$&preamble info for column 1\cr 
[]\\glue 2pt plus 3pt&the tabskip between columns 1 and 2\cr 
[]\\alignrecord, width $-\infty$&preamble info for column 2\cr 
[]\\glue 1pt plus 1fil&the tabskip between columns 2 and 3\cr 
[]\\alignrecord, width $-\infty$&preamble info for column 3\cr 
[]\\glue 1pt plus 1fil&the tabskip following column 3\cr]]$$ 
These ``alignrecord'' entries have the same size as an |unset_node|, 
since they will later be converted into such nodes. However, at the 
moment they have no |type| or |subtype| fields; they have |info| fields 
instead, and these |info| fields are initially set to the value |end_span|, 
for reasons explained below. Furthermore, the alignrecord nodes have no 
|height| or |depth| fields; these are renamed |u_part| and |v_part|, 
and they point to token lists for the templates of the alignment. 
For example, the |u_part| field in the first alignrecord points to the 
token list `\.[u1]', i.e., the template preceding the `\.\#' for column~1. 

(2) \TeX\ now looks at what follows the \.[\\cr] that ended the preamble. 
It is not `\.[\\noalign]' or `\.[\\omit]', so this input is put back to 
be read again, and the template `\.[u1]' is fed to the scanner. Just 
before reading `\.[u1]', \TeX\ goes into restricted horizontal mode. 
Just after reading `\.[u1]', \TeX\ will see `\.[a1]', and then (when the 
[\.\&] is sensed) \TeX\ will see `\.[v1]'. Then \TeX\ scans an |endv| 
token, indicating the end of a column. At this point an |unset_node| is 
created, containing the contents of the current hlist (i.e., `\.[u1a1v1]'). 
The natural width of this unset node replaces the |width| field of the 
alignrecord for column~1; in general, the alignrecords will record the 
maximum natural width that has occurred so far in a given column. 

(3) Since `\.[\\omit]' follows the `\.\&', the templates for column~2 
are now bypassed. Again \TeX\ goes into restricted horizontal mode and 
makes an |unset_node| from the resulting hlist; but this time the 
hlist contains simply `\.[a2]'. The natural width of the new unset box 
is remembered in the |width| field of the alignrecord for column~2. 

(4) A third |unset_node| is created for column 3, using essentially the 
mechanism that worked for column~1; this unset box contains `\.[u3\\vrule 
v3]'. The vertical rule in this case has running dimensions that will later 
extend to the height and depth of the whole first row, since each |unset_node| 
in a row will eventually inherit the height and depth of its enclosing box. 

(5) The first row has now ended; it is made into a single unset box 
comprising the following seven items: 
$$\vbox[\halign[\hbox to 325pt[\qquad\.[#]\hfil]\cr 
[]\\glue 2pt plus 3pt\cr 
[]\\unsetbox for 1 column: u1a1v1\cr 
[]\\glue 2pt plus 3pt\cr 
[]\\unsetbox for 1 column: a2\cr 
[]\\glue 1pt plus 1fil\cr 
[]\\unsetbox for 1 column: u3\\vrule v3\cr 
[]\\glue 1pt plus 1fil\cr]]$$ 
The width of this unset row is unimportant, but it has the correct height 
and depth, so the correct baselineskip glue will be computed as the row 
is inserted into a vertical list. 

(6) Since `\.[\\noalign]' follows the current \.[\\cr], \TeX\ appends 
additional material (in this case \.[\\vskip 3pt]) to the vertical list. 
While processing this material, \TeX\ will be in internal vertical 
mode, and |no_align_group| will be on |save_stack|. 

(7) The next row produces an unset box that looks like this: 
$$\vbox[\halign[\hbox to 325pt[\qquad\.[#]\hfil]\cr 
[]\\glue 2pt plus 3pt\cr 
[]\\unsetbox for 2 columns: u1b1v1u2b2v2\cr 
[]\\glue 1pt plus 1fil\cr 
[]\\unsetbox for 1 column: [\rm(empty)]\cr 
[]\\glue 1pt plus 1fil\cr]]$$ 
The natural width of the unset box that spans columns 1~and~2 is stored 
in a ``span node,'' which we will explain later; the |info| field of the 
alignrecord for column~1 now points to the new span node, and the |info| 
of the span node points to |end_span|. 

(8) The final row produces the unset box 
$$\vbox[\halign[\hbox to 325pt[\qquad\.[#]\hfil]\cr 
[]\\glue 2pt plus 3pt\cr 
[]\\unsetbox for 1 column: [\rm(empty)]\cr 
[]\\glue 2pt plus 3pt\cr 
[]\\unsetbox for 2 columns: u2c2v2\cr 
[]\\glue 1pt plus 1fil\cr]]$$ 
A new span node is attached to the alignrecord for column 2. 

(9) The last step is to compute the true column widths and to change all the 
unset boxes to hboxes, appending the whole works to the vertical list that 
encloses the \.[\\halign]. The rules for deciding on the final widths of 
each unset column box will be explained below. 

\yskip\noindent 
Note that as \.[\\halign] is being processed, we fearlessly give up control 
to the rest of \TeX. At critical junctures, an alignment routine is 
called upon to step in and do some little action, but most of the time 
these routines just lurk in the background. It's something like 
post-hypnotic suggestion. 


MODULE769
We have mentioned that alignrecords contain no |height| or |depth| fields. 
Their |glue_sign| and |glue_order| are pre-empted as well, since it 
is necessary to store information about what to do when a template ends. 
This information is called the |extra_info| field. 


MODULE770
Alignments can occur within alignments, so a small stack is used to access 
the alignrecord information. At each level we have a |preamble| pointer, 
indicating the beginning of the preamble list; a |cur_align| pointer, 
indicating the current position in the preamble list; a |cur_span| pointer, 
indicating the value of |cur_align| at the beginning of a sequence of 
spanned columns; a |cur_loop| pointer, indicating the tabskip glue before 
an alignrecord that should be copied next if the current list is extended; 
and the |align_state| variable, which indicates the nesting of braces so 
that \.[\\cr] and \.[\\span] and tab marks are properly intercepted. 
There also are pointers |cur_head| and |cur_tail| to the head and tail 
of a list of adjustments being moved out from horizontal mode to 
vertical~mode. 

The current values of these seven quantities appear in global variables; 
when they have to be pushed down, they are stored in 5-word nodes, and 
|align_ptr| points to the topmost such node. 


MODULE771
The |align_state| and |preamble| variables are initialized elsewhere. 


MODULE772
Alignment stack maintenance is handled by a pair of trivial routines 
called |push_alignment| and |pop_alignment|. 


MODULE773
\TeX\ has eight procedures that govern alignments: |init_align| and 
|fin_align| are used at the very beginning and the very end; |init_row| and 
|fin_row| are used at the beginning and end of individual rows; |init_span| 
is used at the beginning of a sequence of spanned columns (possibly involving 
only one column); |init_col| and |fin_col| are used at the beginning and 
end of individual columns; and |align_peek| is used after \.[\\cr] to see 
whether the next item is \.[\\noalign]. 

We shall consider these routines in the order they are first used during 
the course of a complete \.[\\halign], namely |init_align|, |align_peek|, 
|init_row|, |init_span|, |init_col|, |fin_col|, |fin_row|, |fin_align|. 


MODULE774
When \.[\\halign] or \.[\\valign] has been scanned in an appropriate 
mode, \TeX\ calls |init_align|, whose task is to get everything off to a 
good start. This mostly involves scanning the preamble and putting its 
information into the preamble list. 
(*preamble*) 


MODULE775
In vertical modes, |prev_depth| already has the correct value. But 
if we are in |mmode| (displayed formula mode), we reach out to the 
enclosing vertical mode for the |prev_depth| value that produces the 
correct baseline calculations. 


MODULE776
When \.[\\halign] is used as a displayed formula, there should be 
no other pieces of mlists present. 


MODULE777

MODULE778

MODULE779

MODULE780
We enter `\.[\\span]' into |eqtb| with |tab_mark| as its command code, 
and with |span_code| as the command modifier. This makes \TeX\ interpret it 
essentially the same as an alignment delimiter like `\.\&', yet it is 
recognizably different when we need to distinguish it from a normal delimiter. 
It also turns out to be useful to give a special |cr_code| to `\.[\\cr]', 
and an even larger |cr_cr_code| to `\.[\\crcr]'. 

The end of a template is represented by two ``frozen'' control sequences 
called \.[\\endtemplate]. The first has the command code |end_template|, which 
is |>outer_call|, so it will not easily disappear in the presence of errors. 
The |get_x_token| routine converts the first into the second, which has |endv| 
as its command code. 


MODULE781

MODULE782
The preamble is copied directly, except that \.[\\tabskip] causes a change 
to the tabskip glue, thereby possibly expanding macros that immediately 
follow it. An appearance of \.[\\span] also causes such an expansion. 

Note that if the preamble contains `\.[\\global\\tabskip]', the `\.[\\global]' 
token survives in the preamble and the `\.[\\tabskip]' defines new 
tabskip glue (locally). 


MODULE783
Spaces are eliminated from the beginning of a template. 


MODULE784

MODULE785
The tricky part about alignments is getting the templates into the 
scanner at the right time, and recovering control when a row or column 
is finished. 

We usually begin a row after each \.[\\cr] has been sensed, unless that 
\.[\\cr] is followed by \.[\\noalign] or by the right brace that terminates 
the alignment. The |align_peek| routine is used to look ahead and do 
the right thing; it either gets a new row started, or gets a \.[\\noalign] 
started, or finishes off the alignment. 


MODULE786
To start a row (i.e., a `row' that rhymes with `dough' but not with `bough'), 
we enter a new semantic level, copy the first tabskip glue, and change 
from internal vertical mode to restricted horizontal mode or vice versa. 
The |space_factor| and |prev_depth| are not used on this semantic level, 
but we clear them to zero just to be tidy. 


MODULE787
The parameter to |init_span| is a pointer to the alignrecord where the 
next column or group of columns will begin. A new semantic level is 
entered, so that the columns will generate a list for subsequent packaging. 


MODULE788
When a column begins, we assume that |cur_cmd| is either |omit| or else 
the current token should be put back into the input until the \<u_j> 
template has been scanned.  (Note that |cur_cmd| might be |tab_mark| or 
|car_ret|.)  We also assume that |align_state| is approximately 1000000 at 
this time.  We remain in the same mode, and start the template if it is 
called for. 


MODULE789
The scanner sets |align_state| to zero when the \<u_j> template ends. When 
a subsequent \.[\\cr] or \.[\\span] or tab mark occurs with |align_state=0|, 
the scanner activates the following code, which fires up the \<v_j> template. 
We need to remember the |cur_chr|, which is either |cr_cr_code|, |cr_code|, 
|span_code|, or a character code, depending on how the column text has ended. 

This part of the program had better not be activated when the preamble 
to another alignment is being scanned, or when no alignment preamble is active. 


MODULE790
The token list |omit_template| just referred to is a constant token 
list that contains the special control sequence \.[\\endtemplate] only. 


MODULE791
When the |endv| command at the end of a \<v_j> template comes through the 
scanner, things really start to happen; and it is the |fin_col| routine 
that makes them happen. This routine returns |true| if a row as well as a 
column has been finished. 


MODULE792

MODULE793

MODULE794

MODULE795

MODULE796

MODULE797
A span node is a 2-word record containing |width|, |info|, and |link| 
fields. The |link| field is not really a link, it indicates the number of 
spanned columns; the |info| field points to a span node for the same 
starting column, having a greater extent of spanning, or to |end_span|, 
which has the largest possible |link| field; the |width| field holds the 
largest natural width corresponding to a particular set of spanned columns. 

A list of the maximum widths so far, for spanned columns starting at a 
given column, begins with the |info| field of the alignrecord for that 
column. 


MODULE798

MODULE799
At the end of a row, we append an unset box to the current vlist (for 
\.[\\halign]) or the current hlist (for \.[\\valign]). This unset box 
contains the unset boxes for the columns, separated by the tabskip glue. 
Everything will be set later. 


MODULE800
Finally, we will reach the end of the alignment, and we can breathe a 
sigh of relief that memory hasn't overflowed. All the unset boxes will now be 
set so that the columns line up, taking due account of spanned columns. 


MODULE801
It's time now to dismantle the preamble list and to compute the column 
widths. Let $w_[ij]$ be the maximum of the natural widths of all entries 
that span columns $i$ through $j$, inclusive. The alignrecord for column~$i$ 
contains $w_[ii]$ in its |width| field, and there is also a linked list of 
the nonzero $w_[ij]$ for increasing $j$, accessible via the |info| field; 
these span nodes contain the value $j-i+|min_quarterword|$ in their 
|link| fields. The values of $w_[ii]$ were initialized to |null_flag|, which 
we regard as $-\infty$. 

The final column widths are defined by the formula 
$$w_j=\max_[1\L i\L j]\biggl( w_[ij]-\sum_[i\L k<j](t_k+w_k)\biggr),$$ 
where $t_k$ is the natural width of the tabskip glue between columns 
$k$ and~$k+1$. However, if $w_[ij]=-\infty$ for all |i| in the range 
|1<=i<=j| (i.e., if every entry that involved column~|j| also involved 
column~|j+1|), we let $w_j=0$, and we zero out the tabskip glue after 
column~|j|. 

\TeX\ computes these values by using the following scheme: First $w_1=w_[11]$. 
Then replace $w_[2j]$ by $\max(w_[2j],w_[1j]-t_1-w_1)$, for all $j>1$. 
Then $w_2=w_[22]$. Then replace $w_[3j]$ by $\max(w_[3j],w_[2j]-t_2-w_2)$ 
for all $j>2$; and so on. If any $w_j$ turns out to be $-\infty$, its 
value is changed to zero and so is the next tabskip. 


MODULE802

MODULE803
Merging of two span-node lists is a typical exercise in the manipulation of 
linearly linked data structures. The essential invariant in the following 
|repeat| loop is that we want to dispense with node |r|, in |q|'s list, 
and |u| is its successor; all nodes of |p|'s list up to and including |s| 
have been processed, and the successor of |s| matches |r| or precedes |r| 
or follows |r|, according as |link(r)=n| or |link(r)>n| or |link(r)<n|. 


MODULE804
Now the preamble list has been converted to a list of alternating unset 
boxes and tabskip glue, where the box widths are equal to the final 
column sizes. In case of \.[\\valign], we change the widths to heights, 
so that a correct error message will be produced if the alignment is 
overfull or underfull. 


MODULE805

MODULE806

MODULE807
The unset box |q| represents a row that contains one or more unset boxes, 
depending on how soon \.[\\cr] occurred in that row. 


MODULE808
A box made from spanned columns will be followed by tabskip glue nodes and 
by empty boxes as if there were no spanning. This permits perfect alignment 
of subsequent entries, and it prevents values that depend on floating point 
arithmetic from entering into the dimensions of any boxes. 


MODULE809

MODULE810

MODULE811

MODULE812
We now have a completed alignment, in the list that starts at |head| 
and ends at |tail|. This list will be merged with the one that encloses 
it. (In case the enclosing mode is |mmode|, for displayed formulas, 
we will need to insert glue before and after the display; that part of the 
program will be deferred until we're more familiar with such operations.) 

In restricted horizontal mode, the |clang| part of |aux| is undefined; 
an over-cautious \PASCAL\ runtime system may complain about this. 
(*dirty \PASCAL*) 


SPECIAL MODULE 813:  \[38] Breaking paragraphs into lines.

We come now to what is probably the most interesting algorithm of \TeX: 
the mechanism for choosing the ``best possible'' breakpoints that yield 
the individual lines of a paragraph. \TeX's line-breaking algorithm takes 
a given horizontal list and converts it to a sequence of boxes that are 
appended to the current vertical list. In the course of doing this, it 
creates a special data structure containing three kinds of records that are 
not used elsewhere in \TeX. Such nodes are created while a paragraph is 
being processed, and they are destroyed afterwards; thus, the other parts 
of \TeX\ do not need to know anything about how line-breaking is done. 

The method used here is based on an approach devised by Michael F. Plass and 
(*Plass, Michael Frederick*) 
(*Knuth, Donald Ervin*) 
the author in 1977, subsequently generalized and improved by the same two 
people in 1980. A detailed discussion appears in [\sl SOFTWARE---Practice 
\AM\ Experience \bf11] (1981), 1119--1184, where it is shown that the 
line-breaking problem can be regarded as a special case of the problem of 
computing the shortest path in an acyclic network. The cited paper includes 
numerous examples and describes the history of line breaking as it has been 
practiced by printers through the ages. The present implementation adds two 
new ideas to the algorithm of 1980: Memory space requirements are considerably 
reduced by using smaller records for inactive nodes than for active ones, 
and arithmetic overflow is avoided by using ``delta distances'' instead of 
keeping track of the total distance from the beginning of the paragraph to the 
current point. 


MODULE814
The |line_break| procedure should be invoked only in horizontal mode; it 
leaves that mode and places its output into the current vlist of the 
enclosing vertical mode (or internal vertical mode). 
There is one explicit parameter:  |final_widow_penalty| is the amount of 
additional penalty to be inserted before the final line of the paragraph. 

There are also a number of implicit parameters: The hlist to be broken 
starts at |link(head)|, and it is nonempty. The value of |prev_graf| in the 
enclosing semantic level tells where the paragraph should begin in the 
sequence of line numbers, in case hanging indentation or \.[\\parshape] 
is in use; |prev_graf| is zero unless this paragraph is being continued 
after a displayed formula.  Other implicit parameters, such as the 
|par_shape_ptr| and various penalties to use for hyphenation, etc., appear 
in |eqtb|. 

After |line_break| has acted, it will have updated the current vlist and the 
value of |prev_graf|. Furthermore, the global variable |just_box| will 
point to the final box created by |line_break|, so that the width of this 
line can be ascertained when it is necessary to decide whether to use 
|above_display_skip| or |above_display_short_skip| before a displayed formula. 


MODULE815
Since |line_break| is a rather lengthy procedure---sort of a small world unto 
itself---we must build it up little by little, somewhat more cautiously 
than we have done with the simpler procedures of \TeX. Here is the 
general outline. 


MODULE816
The first task is to move the list from |head| to |temp_head| and go 
into the enclosing semantic level. We also append the \.[\\parfillskip] 
glue to the end of the paragraph, removing a space (or other glue node) if 
it was there, since spaces usually precede blank lines and instances of 
`\.[\$\$]'. The |par_fill_skip| is preceded by an infinite penalty, so 
it will never be considered as a potential breakpoint. 

This code assumes that a |glue_node| and a |penalty_node| occupy the 
same number of |mem|~words. 
(*data structure assumptions*) 


MODULE817
When looking for optimal line breaks, \TeX\ creates a ``break node'' for 
each break that is [\sl feasible], in the sense that there is a way to end 
a line at the given place without requiring any line to stretch more than 
a given tolerance. A break node is characterized by three things: the position 
of the break (which is a pointer to a |glue_node|, |math_node|, |penalty_node|, 
or |disc_node|); the ordinal number of the line that will follow this 
breakpoint; and the fitness classification of the line that has just 
ended, i.e., |tight_fit|, |decent_fit|, |loose_fit|, or |very_loose_fit|. 


MODULE818
The algorithm essentially determines the best possible way to achieve 
each feasible combination of position, line, and fitness. Thus, it answers 
questions like, ``What is the best way to break the opening part of the 
paragraph so that the fourth line is a tight line ending at such-and-such 
a place?'' However, the fact that all lines are to be the same length 
after a certain point makes it possible to regard all sufficiently large 
line numbers as equivalent, when the looseness parameter is zero, and this 
makes it possible for the algorithm to save space and time. 

An ``active node'' and a ``passive node'' are created in |mem| for each 
feasible breakpoint that needs to be considered. Active nodes are three 
words long and passive nodes are two words long. We need active nodes only 
for breakpoints near the place in the paragraph that is currently being 
examined, so they are recycled within a comparatively short time after 
they are created. 


MODULE819
An active node for a given breakpoint contains six fields: 

\yskip\hang|link| points to the next node in the list of active nodes; the 
last active node has |link=last_active|. 

\yskip\hang|break_node| points to the passive node associated with this 
breakpoint. 

\yskip\hang|line_number| is the number of the line that follows this 
breakpoint. 

\yskip\hang|fitness| is the fitness classification of the line ending at this 
breakpoint. 

\yskip\hang|type| is either |hyphenated| or |unhyphenated|, depending on 
whether this breakpoint is a |disc_node|. 

\yskip\hang|total_demerits| is the minimum possible sum of demerits over all 
lines leading from the beginning of the paragraph to this breakpoint. 

\yskip\noindent 
The value of |link(active)| points to the first active node on a linked list 
of all currently active nodes. This list is in order by |line_number|, 
except that nodes with |line_number>easy_line| may be in any order relative 
to each other. 


MODULE820

MODULE821
The passive node for a given breakpoint contains only four fields: 

\yskip\hang|link| points to the passive node created just before this one, 
if any, otherwise it is |null|. 

\yskip\hang|cur_break| points to the position of this breakpoint in the 
horizontal list for the paragraph being broken. 

\yskip\hang|prev_break| points to the passive node that should precede this 
one in an optimal path to this breakpoint. 

\yskip\hang|serial| is equal to |n| if this passive node is the |n|th 
one created during the current pass. (This field is used only when 
printing out detailed statistics about the line-breaking calculations.) 

\yskip\noindent 
There is a global variable called |passive| that points to the most 
recently created passive node. Another global variable, |printed_node|, 
is used to help print out the paragraph when detailed information about 
the line-breaking computation is being displayed. 


MODULE822
The active list also contains ``delta'' nodes that help the algorithm 
compute the badness of individual lines. Such nodes appear only between two 
active nodes, and they have |type=delta_node|. If |p| and |r| are active nodes 
and if |q| is a delta node between them, so that |link(p)=q| and |link(q)=r|, 
then |q| tells the space difference between lines in the horizontal list that 
start after breakpoint |p| and lines that start after breakpoint |r|. In 
other words, if we know the length of the line that starts after |p| and 
ends at our current position, then the corresponding length of the line that 
starts after |r| is obtained by adding the amounts in node~|q|. A delta node 
contains six scaled numbers, since it must record the net change in glue 
stretchability with respect to all orders of infinity. The natural width 
difference appears in |mem[q+1].sc|; the stretch differences in units of 
pt, fil, fill, and filll appear in |mem[q+2..q+5].sc|; and the shrink difference 
appears in |mem[q+6].sc|. The |subtype| field of a delta node is not used. 


MODULE823
As the algorithm runs, it maintains a set of six delta-like registers 
for the length of the line following the first active breakpoint to the 
current position in the given hlist. When it makes a pass through the 
active list, it also maintains a similar set of six registers for the 
length following the active breakpoint of current interest. A third set 
holds the length of an empty line (namely, the sum of \.[\\leftskip] and 
\.[\\rightskip]); and a fourth set is used to create new delta nodes. 

When we pass a delta node we want to do operations like 
$$\hbox[\ignorespaces|for 
k:=1 to 6 do cur_active_width[k]:=cur_active_width[k]+mem[q+k].sc|];$$ and we 
want to do this without the overhead of |for| loops. The |do_all_six| 
macro makes such six-tuples convenient. 


MODULE824
Let's state the principles of the delta nodes more precisely and concisely, 
so that the following programs will be less obscure. For each legal 
breakpoint~|p| in the paragraph, we define two quantities $\alpha(p)$ and 
$\beta(p)$ such that the length of material in a line from breakpoint~|p| 
to breakpoint~|q| is $\gamma+\beta(q)-\alpha(p)$, for some fixed $\gamma$. 
Intuitively, $\alpha(p)$ and $\beta(q)$ are the total length of material from 
the beginning of the paragraph to a point ``after'' a break at |p| and to a 
point ``before'' a break at |q|; and $\gamma$ is the width of an empty line, 
namely the length contributed by \.[\\leftskip] and \.[\\rightskip]. 

Suppose, for example, that the paragraph consists entirely of alternating 
boxes and glue skips; let the boxes have widths $x_1\ldots x_n$ and 
let the skips have widths $y_1\ldots y_n$, so that the paragraph can be 
represented by $x_1y_1\ldots x_ny_n$. Let $p_i$ be the legal breakpoint 
at $y_i$; then $\alpha(p_i)=x_1+y_1+\cdots+x_i+y_i$, and $\beta(p_i)= 
x_1+y_1+\cdots+x_i$. To check this, note that the length of material from 
$p_2$ to $p_5$, say, is $\gamma+x_3+y_3+x_4+y_4+x_5=\gamma+\beta(p_5) 
-\alpha(p_2)$. 

The quantities $\alpha$, $\beta$, $\gamma$ involve glue stretchability and 
shrinkability as well as a natural width. If we were to compute $\alpha(p)$ 
and $\beta(p)$ for each |p|, we would need multiple precision arithmetic, and 
the multiprecise numbers would have to be kept in the active nodes. 
\TeX\ avoids this problem by working entirely with relative differences 
or ``deltas.'' Suppose, for example, that the active list contains 
$a_1\,\delta_1\,a_2\,\delta_2\,a_3$, where the |a|'s are active breakpoints 
and the $\delta$'s are delta nodes. Then $\delta_1=\alpha(a_1)-\alpha(a_2)$ 
and $\delta_2=\alpha(a_2)-\alpha(a_3)$. If the line breaking algorithm is 
currently positioned at some other breakpoint |p|, the |active_width| array 
contains the value $\gamma+\beta(p)-\alpha(a_1)$. If we are scanning through 
the list of active nodes and considering a tentative line that runs from 
$a_2$ to~|p|, say, the |cur_active_width| array will contain the value 
$\gamma+\beta(p)-\alpha(a_2)$. Thus, when we move from $a_2$ to $a_3$, 
we want to add $\alpha(a_2)-\alpha(a_3)$ to |cur_active_width|; and this 
is just $\delta_2$, which appears in the active list between $a_2$ and 
$a_3$. The |background| array contains $\gamma$. The |break_width| array 
will be used to calculate values of new delta nodes when the active 
list is being updated. 


MODULE825
Glue nodes in a horizontal list that is being paragraphed are not supposed to 
include ``infinite'' shrinkability; that is why the algorithm maintains 
four registers for stretching but only one for shrinking. If the user tries to 
introduce infinite shrinkability, the shrinkability will be reset to finite 
and an error message will be issued. A boolean variable |no_shrink_error_yet| 
prevents this error message from appearing more than once per paragraph. 


MODULE826

MODULE827

MODULE828
A pointer variable |cur_p| runs through the given horizontal list as we look 
for breakpoints. This variable is global, since it is used both by |line_break| 
and by its subprocedure |try_break|. 

Another global variable called |threshold| is used to determine the feasibility 
of individual lines: Breakpoints are feasible if there is a way to reach 
them without creating lines whose badness exceeds |threshold|.  (The 
badness is compared to |threshold| before penalties are added, so that 
penalty values do not affect the feasibility of breakpoints, except that 
no break is allowed when the penalty is 10000 or more.) If |threshold| 
is 10000 or more, all legal breaks are considered feasible, since the 
|badness| function specified above never returns a value greater than~10000. 

Up to three passes might be made through the paragraph in an attempt to find at 
least one set of feasible breakpoints. On the first pass, we have 
|threshold=pretolerance| and |second_pass=final_pass=false|. 
If this pass fails to find a 
feasible solution, |threshold| is set to |tolerance|, |second_pass| is set 
|true|, and an attempt is made to hyphenate as many words as possible. 
If that fails too, we add |emergency_stretch| to the background 
stretchability and set |final_pass=true|. 


MODULE829
The heart of the line-breaking procedure is `|try_break|', a subroutine 
that tests if the current breakpoint |cur_p| is feasible, by running 
through the active list to see what lines of text can be made from active 
nodes to~|cur_p|.  If feasible breaks are possible, new break nodes are 
created.  If |cur_p| is too far from an active node, that node is 
deactivated. 

The parameter |pi| to |try_break| is the penalty associated 
with a break at |cur_p|; we have |pi=eject_penalty| if the break is forced, 
and |pi=inf_penalty| if the break is illegal. 

The other parameter, |break_type|, is set to |hyphenated| or |unhyphenated|, 
depending on whether or not the current break is at a |disc_node|. The 
end of a paragraph is also regarded as `|hyphenated|'; this case is 
distinguishable by the condition |cur_p=null|. 


MODULE830

MODULE831

MODULE832
The following code uses the fact that |type(last_active)<>delta_node|. 


MODULE833
As we consider various ways to end a line at |cur_p|, in a given line number 
class, we keep track of the best total demerits known, in an array with 
one entry for each of the fitness classifications. For example, 
|minimal_demerits[tight_fit]| contains the fewest total demerits of feasible 
line breaks ending at |cur_p| with a |tight_fit| line; |best_place[tight_fit]| 
points to the passive node for the break before~|cur_p| that achieves such 
an optimum; and |best_pl_line[tight_fit]| is the |line_number| field in the 
active node corresponding to |best_place[tight_fit]|. When no feasible break 
sequence is known, the |minimal_demerits| entries will be equal to 
|awful_bad|, which is $2^[30]-1$. Another variable, |minimum_demerits|, 
keeps track of the smallest value in the |minimal_demerits| array. 


MODULE834

MODULE835
The first part of the following code is part of \TeX's inner loop, so 
we don't want to waste any time. The current active node, namely node |r|, 
contains the line number that will be considered next. At the end of the 
list we have arranged the data structure so that |r=last_active| and 
|line_number(last_active)>old_l|. 
(*inner loop*) 


MODULE836
It is not necessary to create new active nodes having |minimal_demerits| 
greater than 
|minimum_demerits+abs(adj_demerits)|, since such active nodes will never 
be chosen in the final paragraph breaks. This observation allows us to 
omit a substantial number of feasible breakpoints from further consideration. 


MODULE837
When we insert a new active node for a break at |cur_p|, suppose this 
new node is to be placed just before active node |a|; then we essentially 
want to insert `$\delta\,|cur_p|\,\delta^\prime$' before |a|, where 
$\delta=\alpha(a)-\alpha(|cur_p|)$ and $\delta^\prime=\alpha(|cur_p|)-\alpha(a)$ 
in the notation explained above.  The |cur_active_width| array now holds 
$\gamma+\beta(|cur_p|)-\alpha(a)$; so $\delta$ can be obtained by 
subtracting |cur_active_width| from the quantity $\gamma+\beta(|cur_p|)- 
\alpha(|cur_p|)$. The latter quantity can be regarded as the length of a 
line ``from |cur_p| to |cur_p|''; we call it the |break_width| at |cur_p|. 

The |break_width| is usually negative, since it consists of the background 
(which is normally zero) minus the width of nodes following~|cur_p| that are 
eliminated after a break. If, for example, node |cur_p| is a glue node, the 
width of this glue is subtracted from the background; and we also look 
ahead to eliminate all subsequent glue and penalty and kern and math 
nodes, subtracting their widths as well. 

Kern nodes do not disappear at a line break unless they are |explicit|. 


MODULE838

MODULE839
When |cur_p| is a discretionary break, the length of a line ``from |cur_p| to 
|cur_p|'' has to be defined properly so that the other calculations work out. 
Suppose that the pre-break text at |cur_p| has length $l_0$, the post-break 
text has length $l_1$, and the replacement text has length |l|. Suppose 
also that |q| is the node following the replacement text. Then length of a 
line from |cur_p| to |q| will be computed as $\gamma+\beta(q)-\alpha(|cur_p|)$, 
where $\beta(q)=\beta(|cur_p|)-l_0+l$. The actual length will be the background 
plus $l_1$, so the length from |cur_p| to |cur_p| should be $\gamma+l_0+l_1-l$. 
If the post-break text of the discretionary is empty, a break may also 
discard~|q|; in that unusual case we subtract the length of~|q| and any 
other nodes that will be discarded after the discretionary break. 

The value of $l_0$ need not be computed, since |line_break| will put 
it into the global variable |disc_width| before calling |try_break|. 


MODULE840

MODULE841
Replacement texts and discretionary texts are supposed to contain 
only character nodes, kern nodes, ligature nodes, and box or rule nodes. 


MODULE842

MODULE843
We use the fact that |type(active)<>delta_node|. 


MODULE844
When the following code is performed, we will have just inserted at 
least one active node before |r|, so |type(prev_r)<>delta_node|. 


MODULE845
When we create an active node, we also create the corresponding 
passive node. 


MODULE846

MODULE847
The length of lines depends on whether the user has specified 
\.[\\parshape] or \.[\\hangindent]. If |par_shape_ptr| is not null, it 
points to a $(2n+1)$-word record in |mem|, where the |info| in the first 
word contains the value of |n|, and the other $2n$ words contain the left 
margins and line lengths for the first |n| lines of the paragraph; the 
specifications for line |n| apply to all subsequent lines. If 
|par_shape_ptr=null|, the shape of the paragraph depends on the value of 
|n=hang_after|; if |n>=0|, hanging indentation takes place on lines |n+1|, 
|n+2|, \dots, otherwise it takes place on lines 1, \dots, $\vert 
n\vert$. When hanging indentation is active, the left margin is 
|hang_indent|, if |hang_indent>=0|, else it is 0; the line length is 
$|hsize|-\vert|hang_indent|\vert$. The normal setting is 
|par_shape_ptr=null|, |hang_after=1|, and |hang_indent=0|. 
Note that if |hang_indent=0|, the value of |hang_after| is irrelevant. 
(*length of lines*) (*hanging indentation*) 


MODULE848
We compute the values of |easy_line| and the other local variables relating 
to line length when the |line_break| procedure is initializing itself. 


MODULE849

MODULE850
When we come to the following code, we have just encountered the first 
active node~|r| whose |line_number| field contains |l|. Thus we want to 
compute the length of the $l\mskip1mu$th line of the current paragraph. Furthermore, 
we want to set |old_l| to the last number in the class of line numbers 
equivalent to~|l|. 


MODULE851
The remaining part of |try_break| deals with the calculation of 
demerits for a break from |r| to |cur_p|. 

The first thing to do is calculate the badness, |b|. This value will always 
be between zero and |inf_bad+1|; the latter value occurs only in the 
case of lines from |r| to |cur_p| that cannot shrink enough to fit the necessary 
width. In such cases, node |r| will be deactivated. 
We also deactivate node~|r| when a break at~|cur_p| is forced, since future 
breaks must go through a forced break. 


MODULE852
When a line must stretch, the available stretchability can be found in the 
subarray |cur_active_width[2..5]|, in units of points, fil, fill, and filll. 

The present section is part of \TeX's inner loop, and it is most often performed 
when the badness is infinite; therefore it is worth while to make a quick 
test for large width excess and small stretchability, before calling the 
|badness| subroutine. 
(*inner loop*) 


MODULE853
Shrinkability is never infinite in a paragraph; 
we can shrink the line from |r| to |cur_p| by at most |cur_active_width[6]|. 


MODULE854
During the final pass, we dare not lose all active nodes, lest we lose 
touch with the line breaks already found. The code shown here makes sure 
that such a catastrophe does not happen, by permitting overfull boxes as 
a last resort. This particular part of \TeX\ was a source of several subtle 
bugs before the correct program logic was finally discovered; readers 
who seek to ``improve'' \TeX\ should therefore think thrice before daring 
to make any changes here. 
(*overfull boxes*) 


MODULE855
When we get to this part of the code, the line from |r| to |cur_p| is 
feasible, its badness is~|b|, and its fitness classification is |fit_class|. 
We don't want to make an active node for this break yet, but we will 
compute the total demerits and record them in the |minimal_demerits| array, 
if such a break is the current champion among all ways to get to |cur_p| 
in a given line-number class and fitness class. 


MODULE856

MODULE857

MODULE858
When the data for a discretionary break is being displayed, we will have 
printed the |pre_break| and |post_break| lists; we want to skip over the 
third list, so that the discretionary data will not appear twice.  The 
following code is performed at the very end of |try_break|. 


MODULE859

MODULE860
When an active node disappears, we must delete an adjacent delta node if the 
active node was at the beginning or the end of the active list, or if it 
was surrounded by delta nodes. We also must preserve the property that 
|cur_active_width| represents the length of material from |link(prev_r)| 
to~|cur_p|. 


MODULE861
The following code uses the fact that |type(last_active)<>delta_node|. If the 
active list has just become empty, we do not need to update the 
|active_width| array, since it will be initialized when an active 
node is next inserted. 


SPECIAL MODULE 862:  \[39] Breaking paragraphs into lines, continued.

So far we have gotten a little way into the |line_break| routine, having 
covered its important |try_break| subroutine. Now let's consider the 
rest of the process. 

The main loop of |line_break| traverses the given hlist, 
starting at |link(temp_head)|, and calls |try_break| at each legal 
breakpoint. A variable called |auto_breaking| is set to true except 
within math formulas, since glue nodes are not legal breakpoints when 
they appear in formulas. 

The current node of interest in the hlist is pointed to by |cur_p|. Another 
variable, |prev_p|, is usually one step behind |cur_p|, but the real 
meaning of |prev_p| is this: If |type(cur_p)=glue_node| then |cur_p| is a legal 
breakpoint if and only if |auto_breaking| is true and |prev_p| does not 
point to a glue node, penalty node, explicit kern node, or math node. 

The following declarations provide for a few other local variables that are 
used in special calculations. 


MODULE863
The `\ignorespaces|loop|\unskip' in the following code is performed at most 
thrice per call of |line_break|, since it is actually a pass over the 
entire paragraph. 


MODULE864
The active node that represents the starting point does not need a 
corresponding passive node. 


MODULE865

MODULE866
Here is the main switch in the |line_break| routine, where legal breaks 
are determined. As we move through the hlist, we need to keep the |active_width| 
array up to date, so that the badness of individual lines is readily calculated 
by |try_break|. It is convenient to use the short name |act_width| for 
the component of active width that represents real width as opposed to glue. 


MODULE867
The code that passes over the characters of words in a paragraph is 
part of \TeX's inner loop, so it has been streamlined for speed. We use 
the fact that `\.[\\parfillskip]' glue appears at the end of each paragraph; 
it is therefore unnecessary to check if |link(cur_p)=null| when |cur_p| is a 
character node. 
(*inner loop*) 


MODULE868
When node |cur_p| is a glue node, we look at |prev_p| to see whether or not 
a breakpoint is legal at |cur_p|, as explained above. 


MODULE869
The following code knows that discretionary texts contain 
only character nodes, kern nodes, box nodes, rule nodes, and ligature nodes. 


MODULE870

MODULE871

MODULE872
The forced line break at the paragraph's end will reduce the list of 
breakpoints so that all active nodes represent breaks at |cur_p=null|. 
On the first pass, we insist on finding an active node that has the 
correct ``looseness.'' On the final pass, there will be at least one active 
node, and we will match the desired looseness as well as we can. 

The global variable |best_bet| will be set to the active node for the best 
way to break the paragraph, and a few other variables are used to 
help determine what is best. 


MODULE873

MODULE874

MODULE875
The adjustment for a desired looseness is a slightly more complicated 
version of the loop just considered. Note that if a paragraph is broken 
into segments by displayed equations, each segment will be subject to the 
looseness calculation, independently of the other segments. 


MODULE876
Once the best sequence of breakpoints has been found (hurray), we call on the 
procedure |post_line_break| to finish the remainder of the work. 
(By introducing this subprocedure, we are able to keep |line_break| 
from getting extremely long.) 


MODULE877
The total number of lines that will be set by |post_line_break| 
is |best_line-prev_graf-1|. The last breakpoint is specified by 
|break_node(best_bet)|, and this passive node points to the other breakpoints 
via the |prev_break| links. The finishing-up phase starts by linking the 
relevant passive nodes in forward order, changing |prev_break| to 
|next_break|. (The |next_break| fields actually reside in the same memory 
space as the |prev_break| fields did, but we give them a new name because 
of their new significance.) Then the lines are justified, one by one. 


MODULE878
The job of reversing links in a list is conveniently regarded as the job 
of taking items off one stack and putting them on another. In this case we 
take them off a stack pointed to by |q| and having |prev_break| fields; 
we put them on a stack pointed to by |cur_p| and having |next_break| fields. 
Node |r| is the passive node being moved from stack to stack. 


MODULE879
Glue and penalty and kern and math nodes are deleted at the beginning of 
a line, except in the anomalous case that the node to be deleted is actually 
one of the chosen breakpoints. Otherwise 
the pruning done here is designed to match 
the lookahead computation in |try_break|, where the |break_width| values 
are computed for non-discretionary breakpoints. 


MODULE880
The current line to be justified appears in a horizontal list starting 
at |link(temp_head)| and ending at |cur_break(cur_p)|. If |cur_break(cur_p)| is 
a glue node, we reset the glue to equal the |right_skip| glue; otherwise 
we append the |right_skip| glue at the right. If |cur_break(cur_p)| is a 
discretionary node, we modify the list so that the discretionary break 
is compulsory, and we set |disc_break| to |true|. We also append 
the |left_skip| glue at the left of the line, unless it is zero. 


MODULE881
At the end of the following code, |q| will point to the final node on the 
list about to be justified. 


MODULE882

MODULE883

MODULE884
We move the post-break list from inside node |q| to the main list by 
re\-attaching it just before the present node |r|, then resetting |r|. 


MODULE885
We move the pre-break list from inside node |q| to the main list by 
re\-attaching it just after the present node |q|, then resetting |q|. 


MODULE886

MODULE887
The following code begins with |q| at the end of the list to be 
justified. It ends with |q| at the beginning of that list, and with 
|link(temp_head)| pointing to the remainder of the paragraph, if any. 


MODULE888

MODULE889
Now |q| points to the hlist that represents the current line of the 
paragraph. We need to compute the appropriate line width, pack the 
line into a box of this size, and shift the box by the appropriate 
amount of indentation. 


MODULE890
Penalties between the lines of a paragraph come from club and widow lines, 
from the |inter_line_penalty| parameter, and from lines that end at 
discretionary breaks.  Breaking between lines of a two-line paragraph gets 
both club-line and widow-line penalties. The local variable |pen| will 
be set to the sum of all relevant penalties for the current line, except 
that the final line is never penalized. 


SPECIAL MODULE 891:  \[40] Pre-hyphenation.

When the line-breaking routine is unable to find a feasible sequence of 
breakpoints, it makes a second pass over the paragraph, attempting to 
hyphenate the hyphenatable words. The goal of hyphenation is to insert 
discretionary material into the paragraph so that there are more 
potential places to break. 

The general rules for hyphenation are somewhat complex and technical, 
because we want to be able to hyphenate words that are preceded or 
followed by punctuation marks, and because we want the rules to work 
for languages other than English. We also must contend with the fact 
that hyphens might radically alter the ligature and kerning structure 
of a word. 

A sequence of characters will be considered for hyphenation only if it 
belongs to a ``potentially hyphenatable part'' of the current paragraph. 
This is a sequence of nodes $p_0p_1\ldots p_m$ where $p_0$ is a glue node, 
$p_1\ldots p_[m-1]$ are either character or ligature or whatsit or 
implicit kern nodes, and $p_m$ is a glue or penalty or insertion or adjust 
or mark or whatsit or explicit kern node.  (Therefore hyphenation is 
disabled by boxes, math formulas, and discretionary nodes already inserted 
by the user.) The ligature nodes among $p_1\ldots p_[m-1]$ are effectively 
expanded into the original non-ligature characters; the kern nodes and 
whatsits are ignored. Each character |c| is now classified as either a 
nonletter (if |lc_code(c)=0|), a lowercase letter (if 
|lc_code(c)=c|), or an uppercase letter (otherwise); an uppercase letter 
is treated as if it were |lc_code(c)| for purposes of hyphenation. The 
characters generated by $p_1\ldots p_[m-1]$ may begin with nonletters; let 
$c_1$ be the first letter that is not in the middle of a ligature. Whatsit 
nodes preceding $c_1$ are ignored; a whatsit found after $c_1$ will be the 
terminating node $p_m$. All characters that do not have the same font as 
$c_1$ will be treated as nonletters. The |hyphen_char| for that font 
must be between 0 and 255, otherwise hyphenation will not be attempted. 
\TeX\ looks ahead for as many consecutive letters $c_1\ldots c_n$ as 
possible; however, |n| must be less than 64, so a character that would 
otherwise be $c_[64]$ is effectively not a letter. Furthermore $c_n$ must 
not be in the middle of a ligature.  In this way we obtain a string of 
letters $c_1\ldots c_n$ that are generated by nodes $p_a\ldots p_b$, where 
|1<=a<=b+1<=m|. If |n>=l_hyf+r_hyf|, this string qualifies for hyphenation; 
however, |uc_hyph| must be positive, if $c_1$ is uppercase. 

The hyphenation process takes place in three stages. First, the candidate 
sequence $c_1\ldots c_n$ is found; then potential positions for hyphens 
are determined by referring to hyphenation tables; and finally, the nodes 
$p_a\ldots p_b$ are replaced by a new sequence of nodes that includes the 
discretionary breaks found. 

Fortunately, we do not have to do all this calculation very often, because 
of the way it has been taken out of \TeX's inner loop. For example, when 
the second edition of the author's 700-page book [\sl Seminumerical 
Algorithms] was typeset by \TeX, only about 1.2 hyphenations needed to be 
(*Knuth, Donald Ervin*) 
tried per paragraph, since the line breaking algorithm needed to use two 
passes on only about 5 per cent of the paragraphs. 


MODULE892
The letters $c_1\ldots c_n$ that are candidates for hyphenation are placed 
into an array called |hc|; the number |n| is placed into |hn|; pointers to 
nodes $p_[a-1]$ and~$p_b$ in the description above are placed into variables 
|ha| and |hb|; and the font number is placed into |hf|. 


MODULE893
Hyphenation routines need a few more local variables. 


MODULE894
When the following code is activated, the |line_break| procedure is in its 
second pass, and |cur_p| points to a glue node. 


MODULE895

MODULE896
The first thing we need to do is find the node |ha| just before the 
first letter. 


MODULE897
The word to be hyphenated is now moved to the |hu| and |hc| arrays. 


MODULE898
We let |j| be the index of the character being stored when a ligature node 
is being expanded, since we do not want to advance |hn| until we are sure 
that the entire ligature consists of letters. Note that it is possible 
to get to |done3| with |hn=0| and |hb| not set to any value. 


MODULE899

SPECIAL MODULE 900:  \[41] Post-hyphenation.

If a hyphen may be inserted between |hc[j]| and |hc[j+1]|, the hyphenation 
procedure will set |hyf[j]| to some small odd number. But before we look 
at \TeX's hyphenation procedure, which is independent of the rest of the 
line-breaking algorithm, let us consider what we will do with the hyphens 
it finds, since it is better to work on this part of the program before 
forgetting what |ha| and |hb|, etc., are all about. 


MODULE901

MODULE902
\TeX\ will never insert a hyphen that has fewer than 
\.[\\lefthyphenmin] letters before it or fewer than 
\.[\\righthyphenmin] after it; hence, a short word has 
comparatively little chance of being hyphenated. If no hyphens have 
been found, we can save time by not having to make any changes to the 
paragraph. 


MODULE903
If hyphens are in fact going to be inserted, \TeX\ first deletes the 
subsequence of nodes between |ha| and~|hb|. An attempt is made to 
preserve the effect that implicit boundary characters and punctuation marks 
had on ligatures inside the hyphenated word, by storing a left boundary or 
preceding character in |hu[0]| and by storing a possible right boundary 
in |bchar|. We set |j:=0| if |hu[0]| is to be part of the reconstruction; 
otherwise |j:=1|. 
The variable |s| will point to the tail of the current hlist, and 
|q| will point to the node following |hb|, so that 
things can be hooked up after we reconstitute the hyphenated word. 


MODULE904
We must now face the fact that the battle is not over, even though the 
[\def\![\kern-1pt]% 
hyphens have been found: The process of reconstituting a word can be nontrivial 
because ligatures might change when a hyphen is present. [\sl The \TeX book\/] 
discusses the difficulties of the word ``difficult'', and 
the discretionary material surrounding a 
hyphen can be considerably more complex than that. Suppose 
\.[abcdef] is a word in a font for which the only ligatures are \.[b\!c], 
\.[c\!d], \.[d\!e], and \.[e\!f]. If this word permits hyphenation 
between \.b and \.c, the two patterns with and without hyphenation are 
$\.a\,\.b\,\.-\,\.[c\!d]\,\.[e\!f]$ and $\.a\,\.[b\!c]\,\.[d\!e]\,\.f$. 
Thus the insertion of a hyphen might cause effects to ripple arbitrarily 
far into the rest of the word. A further complication arises if additional 
hyphens appear together with such rippling, e.g., if the word in the 
example just given could also be hyphenated between \.c and \.d; \TeX\ 
avoids this by simply ignoring the additional hyphens in such weird cases.] 

Still further complications arise in the presence of ligatures that do not 
delete the original characters. When punctuation precedes the word being 
hyphenated, \TeX's method is not perfect under all possible scenarios, 
because punctuation marks and letters can propagate information back and forth. 
For example, suppose the original pre-hyphenation pair 
\.[*a] changes to \.[*y] via a \.[\?=:] ligature, which changes to \.[xy] 
via a \.[=:\?] ligature; if $p_[a-1]=\.x$ and $p_a=\.y$, the reconstitution 
procedure isn't smart enough to obtain \.[xy] again. In such cases the 
font designer should include a ligature that goes from \.[xa] to \.[xy]. 


MODULE905
The processing is facilitated by a subroutine called |reconstitute|. Given 
a string of characters $x_j\ldots x_n$, there is a smallest index $m\ge j$ 
such that the ``translation'' of $x_j\ldots x_n$ by ligatures and kerning 
has the form $y_1\ldots y_t$ followed by the translation of $x_[m+1]\ldots x_n$, 
where $y_1\ldots y_t$ is some nonempty sequence of character, ligature, and 
kern nodes. We call $x_j\ldots x_m$ a ``cut prefix'' of $x_j\ldots x_n$. 
For example, if $x_1x_2x_3=\.[fly]$, and if the font contains `fl' as a 
ligature and a kern between `fl' and `y', then $m=2$, $t=2$, and $y_1$ will 
be a ligature node for `fl' followed by an appropriate kern node~$y_2$. 
In the most common case, $x_j$~forms no ligature with $x_[j+1]$ and we 
simply have $m=j$, $y_1=x_j$. If $m<n$ we can repeat the procedure on 
$x_[m+1]\ldots x_n$ until the entire translation has been found. 

The |reconstitute| function returns the integer $m$ and puts the nodes 
$y_1\ldots y_t$ into a linked list starting at |link(hold_head)|, 
getting the input $x_j\ldots x_n$ from the |hu| array. If $x_j=256$, 
we consider $x_j$ to be an implicit left boundary character; in this 
case |j| must be strictly less than~|n|. There is a 
parameter |bchar|, which is either 256 or an implicit right boundary character 
assumed to be present just following~$x_n$. (The value |hu[n+1]| is never 
explicitly examined, but the algorithm imagines that |bchar| is there.) 

If there exists an index |k| in the range $j\le k\le m$ such that |hyf[k]| 
is odd and such that the result of |reconstitute| would have been different 
if $x_[k+1]$ had been |hchar|, then |reconstitute| sets |hyphen_passed| 
to the smallest such~|k|. Otherwise it sets |hyphen_passed| to zero. 

A special convention is used in the case |j=0|: Then we assume that the 
translation of |hu[0]| appears in a special list of charnodes starting at 
|init_list|; moreover, if |init_lig| is |true|, then |hu[0]| will be 
a ligature character, involving a left boundary if |init_lft| is |true|. 
This facility is provided for cases when a hyphenated 
word is preceded by punctuation (like single or double quotes) that might 
affect the translation of the beginning of the word. 


MODULE906

MODULE907
The reconstitution procedure shares many of the global data structures 
by which \TeX\ has processed the words before they were hyphenated. 
There is an implied ``cursor'' between characters |cur_l| and |cur_r|; 
these characters will be tested for possible ligature activity. If 
|ligature_present| then |cur_l| is a ligature character formed from the 
original characters following |cur_q| in the current translation list. 
There is a ``ligature stack'' between the cursor and character |j+1|, 
consisting of pseudo-ligature nodes linked together by their |link| fields. 
This stack is normally empty unless a ligature command has created a new 
character that will need to be processed later. A pseudo-ligature is 
a special node having a |character| field that represents a potential 
ligature and a |lig_ptr| field that points to a |char_node| or is |null|. 
We have 
$$|cur_r|=\cases[|character(lig_stack)|,&if |lig_stack>null|;\cr 
  |qi(hu[j+1])|,&if |lig_stack=null| and |j<n|;\cr 
  bchar,&if |lig_stack=null| and |j=n|.\cr]$$ 


MODULE908

MODULE909
We may want to look at the lig/kern program twice, once for a hyphen 
and once for a normal letter. (The hyphen might appear after the letter 
in the program, so we'd better not try to look for both at once.) 


MODULE910

MODULE911

MODULE912
Okay, we're ready to insert the potential hyphenations that were found. 
When the following program is executed, we want to append the word 
|hu[1..hn]| after node |ha|, and node |q| should be appended to the result. 
During this process, the variable |i| will be a temporary 
index into |hu|; the variable |j| will be an index to our current position 
in |hu|; the variable |l| will be the counterpart of |j|, in a discretionary 
branch; the variable |r| will point to new nodes being created; and 
we need a few new local variables: 


MODULE913
When the following code is performed, |hyf[0]| and |hyf[hn]| will be zero. 


MODULE914
In this repeat loop we will insert another discretionary if |hyf[j-1]| is 
odd, when both branches of the previous discretionary end at position |j-1|. 
Strictly speaking, we aren't justified in doing this, because we don't know 
that a hyphen after |j-1| is truly independent of those branches. But in almost 
all applications we would rather not lose a potentially valuable hyphenation 
point. (Consider the word `difficult', where the letter `c' is in position |j|.) 


MODULE915
The new hyphen might combine with the previous character via ligature 
or kern. At this point we have |l-1<=i<j| and |i<hn|. 


MODULE916
The synchronization algorithm begins with |l=i+1<=j|. 


MODULE917

MODULE918
Ligature insertion can cause a word to grow exponentially in size. Therefore 
we must test the size of |r_count| here, even though the hyphenated text 
was at most 63 characters long. 


SPECIAL MODULE 919:  \[42] Hyphenation.

When a word |hc[1..hn]| has been set up to contain a candidate for hyphenation, 
\TeX\ first looks to see if it is in the user's exception dictionary. If not, 
hyphens are inserted based on patterns that appear within the given word, 
using an algorithm due to Frank~M. Liang. 
(*Liang, Franklin Mark*) 

Let's consider Liang's method first, since it is much more interesting than the 
exception-lookup routine.  The algorithm begins by setting |hyf[j]| to zero 
for all |j|, and invalid characters are inserted into |hc[0]| 
and |hc[hn+1]| to serve as delimiters. Then a reasonably fast method is 
used to see which of a given set of patterns occurs in the word 
|hc[0..(hn+1)]|. Each pattern $p_1\ldots p_k$ of length |k| has an associated 
sequence of |k+1| numbers $n_0\ldots n_k$; and if the pattern occurs in 
|hc[(j+1)..(j+k)]|, \TeX\ will set |hyf[j+i]:=(*max*)(hyf[j+i],(*$n_i$*))| for 
|0<=i<=k|. After this has been done for each pattern that occurs, a 
discretionary hyphen will be inserted between |hc[j]| and |hc[j+1]| when 
|hyf[j]| is odd, as we have already seen. 

The set of patterns $p_1\ldots p_k$ and associated numbers $n_0\ldots n_k$ 
depends, of course, on the language whose words are being hyphenated, and 
on the degree of hyphenation that is desired. A method for finding 
appropriate |p|'s and |n|'s, from a given dictionary of words and acceptable 
hyphenations, is discussed in Liang's Ph.D. thesis (Stanford University, 
1983); \TeX\ simply starts with the patterns and works from there. 


MODULE920
The patterns are stored in a compact table that is also efficient for 
retrieval, using a variant of ``trie memory'' [cf.\ [\sl The Art of 
Computer Programming \bf3] (1973), 481--505]. We can find each pattern 
$p_1\ldots p_k$ by letting $z_0$ be one greater than the relevant language 
index and then, for |1<=i<=k|, 
setting |(*$z_i$*):=trie_link(*$(z_[i-1])+p_i$*)|; the pattern will be 
identified by the number $z_k$. Since all the pattern information is 
packed together into a single |trie_link| array, it is necessary to 
prevent confusion between the data from inequivalent patterns, so another 
table is provided such that |trie_char(*$(z_i)=p_i$*)| for all |i|. There 
is also a table |trie_op|$(z_k)$ to identify the numbers $n_0\ldots n_k$ 
associated with $p_1\ldots p_k$. 

Comparatively few different number sequences $n_0\ldots n_k$ actually occur, 
since most of the |n|'s are generally zero. Therefore the number sequences 
are encoded in such a way that |trie_op|$(z_k)$ is only one byte long. 
If |trie_op((*$z_k$*))<>min_quarterword|, when $p_1\ldots p_k$ has matched 
the letters in |hc[(l-k+1)..l ]| of language |t|, 
we perform all of the required operations 
for this pattern by carrying out the following little program: Set 
|v:=trie_op((*$z_k$*))|. Then set |v:=v+op_start[t]|, 
|hyf[l-hyf_distance[v]]:=(*max*)(hyf[l-hyf_distance[v]], hyf_num[v])|, 
and |v:=hyf_next[v]|; repeat, if necessary, until |v=min_quarterword|. 


MODULE921

MODULE922

MODULE923
Assuming that these auxiliary tables have been set up properly, the 
hyphenation algorithm is quite short. In the following code we set |hc[hn+2]| 
to the impossible value 256, in order to guarantee that |hc[hn+3]| will 
never be fetched. 


MODULE924

MODULE925
The exception table that is built by \TeX's \.[\\hyphenation] primitive is 
organized as an ordered hash table [cf.\ Amble and Knuth, [\sl The Computer 
(*Amble, Ole*) (*Knuth, Donald Ervin*) 
Journal\/ \bf17] (1974), 135--142] using linear probing. If $\alpha$ and 
$\beta$ are words, we will say that $\alpha<\beta$ if $\vert\alpha\vert< 
\vert\beta\vert$ or if $\vert\alpha\vert=\vert\beta\vert$ and 
$\alpha$ is lexicographically smaller than $\beta$. (The notation $\vert 
\alpha\vert$ stands for the length of $\alpha$.) The idea of ordered hashing 
is to arrange the table so that a given word $\alpha$ can be sought by computing 
a hash address $h=h(\alpha)$ and then looking in table positions |h|, |h-1|, 
\dots, until encountering the first word $\L\alpha$. If this word is 
different from $\alpha$, we can conclude that $\alpha$ is not in the table. 

The words in the table point to lists in |mem| that specify hyphen positions 
in their |info| fields. The list for $c_1\ldots c_n$ contains the number |k| if 
the word $c_1\ldots c_n$ has a discretionary hyphen between $c_k$ and 
$c_[k+1]$. 


MODULE926

MODULE927

MODULE928

MODULE929
The algorithm for exception lookup is quite simple, as soon as we have 
a few more local variables to work with. 


MODULE930
First we compute the hash code |h|, then we search until we either 
find the word or we don't. Words from different languages are kept 
separate by appending the language code to the string. 


MODULE931

MODULE932

MODULE933

MODULE934
We have now completed the hyphenation routine, so the |line_break| procedure 
is finished at last. Since the hyphenation exception table is fresh in our 
minds, it's a good time to deal with the routine that adds new entries to it. 

When \TeX\ has scanned `\.[\\hyphenation]', it calls on a procedure named 
|new_hyph_exceptions| to do the right thing. 


MODULE935

MODULE936

MODULE937

MODULE938

MODULE939

MODULE940

MODULE941

SPECIAL MODULE 942:  \[43] Initializing the hyphenation tables.

The trie for \TeX's hyphenation algorithm is built from a sequence of 
patterns following a \.[\\patterns] specification. Such a specification 
is allowed only in \.[INITEX], since the extra memory for auxiliary tables 
and for the initialization program itself would only clutter up the 
production version of \TeX\ with a lot of deadwood. 

The first step is to build a trie that is linked, instead of packed 
into sequential storage, so that insertions are readily made. 
After all patterns have been processed, \.[INITEX] 
compresses the linked trie by identifying common subtries. Finally the 
trie is packed into the efficient sequential form that the hyphenation 
algorithm actually uses. 


MODULE943
Before we discuss trie building in detail, let's consider the simpler 
problem of creating the |hyf_distance|, |hyf_num|, and |hyf_next| arrays. 

Suppose, for example, that \TeX\ reads the pattern `\.[ab2cde1]'. This is 
a pattern of length 5, with $n_0\ldots n_5=0\,0\,2\,0\,0\,1$ in the 
notation above. We want the corresponding |trie_op| code |v| to have 
|hyf_distance[v]=3|, |hyf_num[v]=2|, and |hyf_next[v]=(*$v^\prime$*)|, 
where the auxiliary |trie_op| code $v^\prime$ has 
|hyf_distance[(*$v^\prime$*)]=0|, |hyf_num[(*$v^\prime$*)]=1|, and 
|hyf_next[(*$v^\prime$*)]=min_quarterword|. 

\TeX\ computes an appropriate value |v| with the |new_trie_op| subroutine 
below, by setting 
$$\hbox[|(*$v^\prime$*):=new_trie_op(0,1,min_quarterword)|,\qquad 
|v:=new_trie_op(3,2,(*$v^\prime$*))|.]$$ 
This subroutine looks up its three 
parameters in a special hash table, assigning a new value only if these 
three have not appeared before for the current language. 

The hash table is called |trie_op_hash|, and the number of entries it contains 
is |trie_op_ptr|. 


MODULE944
It's tempting to remove the |overflow| stops in the following procedure; 
|new_trie_op| could return |min_quarterword| (thereby simply ignoring 
part of a hyphenation pattern) instead of aborting the job. However, that would 
lead to different hyphenation results on different installations of \TeX\ 
using the same patterns. The |overflow| stops are necessary for portability 
of patterns. 


MODULE945
After |new_trie_op| has compressed the necessary opcode information, 
plenty of information is available to unscramble the data into the 
final form needed by our hyphenation algorithm. 


MODULE946
Before we forget how to initialize the data structures that have been 
mentioned so far, let's write down the code that gets them started. 


MODULE947
The linked trie that is used to preprocess hyphenation patterns appears 
in several global arrays. Each node represents an instruction of the form 
``if you see character |c|, then perform operation |o|, move to the 
next character, and go to node |l|; otherwise go to node |r|.'' 
The four quantities |c|, |o|, |l|, and |r| are stored in four arrays 
|trie_c|, |trie_o|, |trie_l|, and |trie_r|. The root of the trie 
is |trie_l[0]|, and the number of nodes is |trie_ptr|. Null trie 
pointers are represented by zero. To initialize the trie, we simply 
set |trie_l[0]| and |trie_ptr| to zero. We also set |trie_c[0]| to some 
arbitrary value, since the algorithm may access it. 

The algorithms maintain the condition 
$$\hbox[|trie_c[trie_r[z]]>trie_c[z]|\qquad 
whenever |z<>0| and |trie_r[z]<>0|];$$ in other words, sibling nodes are 
ordered by their |c| fields. 


MODULE948
Let us suppose that a linked trie has already been constructed. 
Experience shows that we can often reduce its size by recognizing common 
subtries; therefore another hash table is introduced for this purpose, 
somewhat similar to |trie_op_hash|. The new hash table will be 
initialized to zero. 

The function |trie_node(p)| returns |p| if |p| is distinct from other nodes 
that it has seen, otherwise it returns the number of the first equivalent 
node that it has seen. 

Notice that we might make subtries equivalent even if they correspond to 
patterns for different languages, in which the trie ops might mean quite 
different things. That's perfectly all right. 


MODULE949
A neat recursive procedure is now able to compress a trie by 
traversing it and applying |trie_node| to its nodes in ``bottom up'' 
fashion. We will compress the entire trie by clearing |trie_hash| to 
zero and then saying `|trie_root:=compress_trie(trie_root)|'. 
(*recursion*) 


MODULE950
The compressed trie will be packed into the |trie| array using a 
``top-down first-fit'' procedure. This is a little tricky, so the reader 
should pay close attention: The |trie_hash| array is cleared to zero 
again and renamed |trie_ref| for this phase of the operation; later on, 
|trie_ref[p]| will be nonzero only if the linked trie node |p| is the 
smallest character 
in a family and if the characters |c| of that family have been allocated to 
locations |trie_ref[p]+c| in the |trie| array. Locations of |trie| that 
are in use will have |trie_link=0|, while the unused holes in |trie| 
will be doubly linked with |trie_link| pointing to the next larger vacant 
location and |trie_back| pointing to the next smaller one. This double 
linking will have been carried out only as far as |trie_max|, where 
|trie_max| is the largest index of |trie| that will be needed. 
To save time at the low end of the trie, we maintain array entries 
|trie_min[c]| pointing to the smallest hole that is greater than~|c|. 
Another array |trie_taken| tells whether or not a given location is 
equal to |trie_ref[p]| for some |p|; this array is used to ensure that 
distinct nodes in the compressed trie will have distinct |trie_ref| 
entries. 


MODULE951
Each time \.[\\patterns] appears, it contributes further patterns to 
the future trie, which will be built only when hyphenation is attempted or 
when a format file is dumped. The boolean variable |trie_not_ready| 
will change to |false| when the trie is compressed; this will disable 
further patterns. 


MODULE952
Here is how the trie-compression data structures are initialized. 
If storage is tight, it would be possible to overlap |trie_op_hash|, 
|trie_op_lang|, and |trie_op_val| with |trie|, |trie_hash|, and |trie_taken|, 
because we finish with the former just before we need the latter. 


MODULE953
The |first_fit| procedure finds the smallest hole |z| in |trie| such that 
a trie family starting at a given node |p| will fit into vacant positions 
starting at |z|. If |c=trie_c[p]|, this means that location |z-c| must 
not already be taken by some other family, and that |z-c+(*$c^\prime$*)| 
must be vacant for all characters $c^\prime$ in the family. The procedure 
sets |trie_ref[p]| to |z-c| when the first fit has been found. 


MODULE954
By making sure that |trie_max| is at least |h+256|, we can be sure that 
|trie_max>z|, since |h=z-c|. It follows that location |trie_max| will 
never be occupied in |trie|, and we will have |trie_max>=trie_link(z)|. 


MODULE955

MODULE956

MODULE957
To pack the entire linked trie, we use the following recursive procedure. 
(*recursion*) 


MODULE958
When the whole trie has been allocated into the sequential table, we 
must go through it once again so that |trie| contains the correct 
information. Null pointers in the linked trie will be represented by the 
value~0, which properly implements an ``empty'' family. 


MODULE959
The fixing-up procedure is, of course, recursive. Since the linked trie 
usually has overlapping subtries, the same data may be moved several 
times; but that causes no harm, and at most as much work is done as it 
took to build the uncompressed trie. 
(*recursion*) 


MODULE960
Now let's go back to the easier problem, of building the linked 
trie.  When \.[INITEX] has scanned the `\.[\\patterns]' control 
sequence, it calls on |new_patterns| to do the right thing. 


MODULE961
Novices are not supposed to be using \.[\\patterns], so the error 
messages are terse. (Note that all error messages appear in \TeX's string 
pool, even if they are used only by \.[INITEX].) 


MODULE962

MODULE963
When the following code comes into play, the pattern $p_1\ldots p_k$ 
appears in |hc[1..k]|, and the corresponding sequence of numbers $n_0\ldots 
n_k$ appears in |hyf[0..k]|. 


MODULE964

MODULE965

MODULE966
Finally we put everything together: Here is how the trie gets to its 
final, efficient form. 
The following packing routine is rigged so that the root of the linked 
tree gets mapped into location 1 of |trie|, as required by the hyphenation 
algorithm. This happens because the first call of |first_fit| will 
``take'' location~1. 


SPECIAL MODULE 967:  \[44] Breaking vertical lists into pages.

The |vsplit| procedure, which implements \TeX's \.[\\vsplit] operation, 
is considerably simpler than |line_break| because it doesn't have to 
worry about hyphenation, and because its mission is to discover a single 
break instead of an optimum sequence of breakpoints.  But before we get 
into the details of |vsplit|, we need to consider a few more basic things. 


MODULE968
A subroutine called |prune_page_top| takes a pointer to a vlist and 
returns a pointer to a modified vlist in which all glue, kern, and penalty nodes 
have been deleted before the first box or rule node. However, the first 
box or rule is actually preceded by a newly created glue node designed so that 
the topmost baseline will be at distance |split_top_skip| from the top, 
whenever this is possible without backspacing. 

In this routine and those that follow, we make use of the fact that a 
vertical list contains no character nodes, hence the |type| field exists 
for each node in the list. 
(*data structure assumptions*) 


MODULE969

MODULE970
The next subroutine finds the best place to break a given vertical list 
so as to obtain a box of height~|h|, with maximum depth~|d|. 
A pointer to the beginning of the vertical list is given, 
and a pointer to the optimum breakpoint is returned. The list is effectively 
followed by a forced break, i.e., a penalty node with the |eject_penalty|; 
if the best break occurs at this artificial node, the value |null| is returned. 

An array of six |scaled| distances is used to keep track of the height 
from the beginning of the list to the current place, just as in |line_break|. 
In fact, we use one of the same arrays, only changing its name to reflect 
its new significance. 


MODULE971
A global variable |best_height_plus_depth| will be set to the natural size 
of the box that corresponds to the optimum breakpoint found by |vert_break|. 
(This value is used by the insertion-splitting algorithm of the page builder.) 


MODULE972
A subtle point to be noted here is that the maximum depth~|d| might be 
negative, so |cur_height| and |prev_dp| might need to be corrected even 
after a glue or kern node. 


MODULE973

MODULE974

MODULE975

MODULE976
Vertical lists that are subject to the |vert_break| procedure should not 
contain infinite shrinkability, since that would permit any amount of 
information to ``fit'' on one page. 


MODULE977
Now we are ready to consider |vsplit| itself. Most of 
its work is accomplished by the two subroutines that we have just considered. 

Given the number of a vlist box |n|, and given a desired page height |h|, 
the |vsplit| function finds the best initial segment of the vlist and 
returns a box for a page of height~|h|. The remainder of the vlist, if 
any, replaces the original box, after removing glue and penalties and 
adjusting for |split_top_skip|. Mark nodes in the split-off box are used to 
set the values of |split_first_mark| and |split_bot_mark|; we use the 
fact that |split_first_mark=null| if and only if |split_bot_mark=null|. 

The original box becomes ``void'' if and only if it has been entirely 
extracted.  The extracted box is ``void'' if and only if the original 
box was void (or if it was, erroneously, an hlist box). 


MODULE978

MODULE979
It's possible that the box begins with a penalty node that is the 
``best'' break, so we must be careful to handle this special case correctly. 


SPECIAL MODULE 980:  \[45] The page builder.

When \TeX\ appends new material to its main vlist in vertical mode, it uses 
a method something like |vsplit| to decide where a page ends, except that 
the calculations are done ``on line'' as new items come in. 
The main complication in this process is that insertions must be put 
into their boxes and removed from the vlist, in a more-or-less optimum manner. 

We shall use the term ``current page'' for that part of the main vlist that 
is being considered as a candidate for being broken off and sent to the 
user's output routine. The current page starts at |link(page_head)|, and 
it ends at |page_tail|.  We have |page_head=page_tail| if this list is empty. 
(*current page*) 

Utter chaos would reign if the user kept changing page specifications 
while a page is being constructed, so the page builder keeps the pertinent 
specifications frozen as soon as the page receives its first box or 
insertion.  The global variable |page_contents| is |empty| when the 
current page contains only mark nodes and content-less whatsit nodes; it 
is |inserts_only| if the page contains only insertion nodes in addition to 
marks and whatsits.  Glue nodes, kern nodes, and penalty nodes are 
discarded until a box or rule node appears, at which time |page_contents| 
changes to |box_there|.  As soon as |page_contents| becomes non-|empty|, 
the current |vsize| and |max_depth| are squirreled away into |page_goal| 
and |page_max_depth|; the latter values will be used until the page has 
been forwarded to the user's output routine. The \.[\\topskip] adjustment 
is made when |page_contents| changes to |box_there|. 

Although |page_goal| starts out equal to |vsize|, it is decreased by the 
scaled natural height-plus-depth of the insertions considered so far, and by 
the \.[\\skip] corrections for those insertions. Therefore it represents 
the size into which the non-inserted material should fit, assuming that 
all insertions in the current page have been made. 

The global variables |best_page_break| and |least_page_cost| correspond 
respectively to the local variables |best_place| and |least_cost| in the 
|vert_break| routine that we have already studied; i.e., they record the 
location and value of the best place currently known for breaking the 
current page. The value of |page_goal| at the time of the best break is 
stored in |best_size|. 


MODULE981
The page builder has another data structure to keep track of insertions. 
This is a list of four-word nodes, starting and ending at |page_ins_head|. 
That is, the first element of the list is node |r(*$_1$*)=link(page_ins_head)|; 
node $r_j$ is followed by |r(*$_[j+1]$*)=link(r(*$_j$*))|; and if there are 
|n| items we have |r(*$_[n+1]$*)=page_ins_head|. The |subtype| field of 
each node in this list refers to an insertion number; for example, `\.[\\insert 
250]' would correspond to a node whose |subtype| is |qi(250)| 
(the same as the |subtype| field of the relevant |ins_node|). These |subtype| 
fields are in increasing order, and |subtype(page_ins_head)= 
qi(255)|, so |page_ins_head| serves as a convenient sentinel 
at the end of the list. A record is present for each insertion number that 
appears in the current page. 

The |type| field in these nodes distinguishes two possibilities that 
might occur as we look ahead before deciding on the optimum page break. 
If |type(r)=inserting|, then |height(r)| contains the total of the 
height-plus-depth dimensions of the box and all its inserts seen so far. 
If |type(r)=split_up|, then no more insertions will be made into this box, 
because at least one previous insertion was too big to fit on the current 
page; |broken_ptr(r)| points to the node where that insertion will be 
split, if \TeX\ decides to split it, |broken_ins(r)| points to the 
insertion node that was tentatively split, and |height(r)| includes also the 
natural height plus depth of the part that would be split off. 

In both cases, |last_ins_ptr(r)| points to the last |ins_node| 
encountered for box |qo(subtype(r))| that would be at least partially 
inserted on the next page; and |best_ins_ptr(r)| points to the last 
such |ins_node| that should actually be inserted, to get the page with 
minimum badness among all page breaks considered so far. We have 
|best_ins_ptr(r)=null| if and only if no insertion for this box should 
be made to produce this optimum page. 

The data structure definitions here use the fact that the |height| field 
appears in the fourth word of a box node. 
(*data structure assumptions*) 


MODULE982
An array |page_so_far| records the heights and depths of everything 
on the current page. This array contains six |scaled| numbers, like the 
similar arrays already considered in |line_break| and |vert_break|; and it 
also contains |page_goal| and |page_depth|, since these values are 
all accessible to the user via |set_page_dimen| commands. The 
value of |page_so_far[1]| is also called |page_total|.  The stretch 
and shrink components of the \.[\\skip] corrections for each insertion are 
included in |page_so_far|, but the natural space components of these 
corrections are not, since they have been subtracted from |page_goal|. 

The variable |page_depth| records the depth of the current page; it has been 
adjusted so that it is at most |page_max_depth|. The variable 
|last_glue| points to the glue specification of the most recent node 
contributed from the contribution list, if this was a glue node; otherwise 
|last_glue=max_halfword|. (If the contribution list is nonempty, 
however, the value of |last_glue| is not necessarily accurate.) 
The variables |last_penalty| and |last_kern| are similar.  And 
finally, |insert_penalties| holds the sum of the penalties associated with 
all split and floating insertions. 


MODULE983

MODULE984

MODULE985

MODULE986

MODULE987
Here is a procedure that is called when the |page_contents| is changing 
from |empty| to |inserts_only| or |box_there|. 


MODULE988
Pages are built by appending nodes to the current list in \TeX's 
vertical mode, which is at the outermost level of the semantic nest. This 
vlist is split into two parts; the ``current page'' that we have been 
talking so much about already, and the ``contribution list'' that receives 
new nodes as they are created.  The current page contains everything that 
the page builder has accounted for in its data structures, as described 
above, while the contribution list contains other things that have been 
generated by other parts of \TeX\ but have not yet been 
seen by the page builder. 
The contribution list starts at |link(contrib_head)|, and it ends at the 
current node in \TeX's vertical mode. 

When \TeX\ has appended new material in vertical mode, it calls the procedure 
|build_page|, which tries to catch up by moving nodes from the contribution 
list to the current page. This procedure will succeed in its goal of 
emptying the contribution list, unless a page break is discovered, i.e., 
unless the current page has grown to the point where the optimum next 
page break has been determined. In the latter case, the nodes after the 
optimum break will go back onto the contribution list, and control will 
effectively pass to the user's output routine. 

We make |type(page_head)=glue_node|, so that an initial glue node on 
the current page will not be considered a valid breakpoint. 


MODULE989
The global variable |output_active| is true during the time the 
user's output routine is driving \TeX. 


MODULE990

MODULE991
The page builder is ready to start a fresh page if we initialize 
the following state variables. (However, the page insertion list is initialized 
elsewhere.) 


MODULE992
At certain times box 255 is supposed to be void (i.e., |null|), 
or an insertion box is supposed to be ready to accept a vertical list. 
If not, an error message is printed, and the following subroutine 
flushes the unwanted contents, reporting them to the user. 


MODULE993
The following procedure guarantees that a given box register 
does not contain an \.[\\hbox]. 


MODULE994
\TeX\ is not always in vertical mode at the time |build_page| 
is called; the current mode reflects what \TeX\ should return to, after 
the contribution list has been emptied. A call on |build_page| should 
be immediately followed by `|goto big_switch|', which is \TeX's central 
control point. 


MODULE995

MODULE996

MODULE997
The code here is an example of a many-way switch into routines that 
merge together in different places. Some people call this unstructured 
programming, but the author doesn't see much wrong with it, as long as 
(*Knuth, Donald Ervin*) 
the various labels have a well-understood meaning. 


MODULE998

MODULE999

MODULE1000
The title of this section is already so long, it seems best to avoid 
making it more accurate but still longer, by mentioning the fact that a 
kern node at the end of the contribution list will not be contributed until 
we know its successor. 


MODULE1001

MODULE1002

MODULE1003

MODULE1004

MODULE1005

MODULE1006

MODULE1007

MODULE1008

MODULE1009
We take note of the value of \.[\\skip] |n| and the height plus depth 
of \.[\\box]~|n| only when the first \.[\\insert]~|n| node is 
encountered for a new page. A user who changes the contents of \.[\\box]~|n| 
after that first \.[\\insert]~|n| had better be either extremely careful 
or extremely lucky, or both. 


MODULE1010
Here is the code that will split a long footnote between pages, in an 
emergency. The current situation deserves to be recapitulated: Node |p| 
is an insertion into box |n|; the insertion will not fit, in its entirety, 
either because it would make the total contents of box |n| greater than 
\.[\\dimen] |n|, or because it would make the incremental amount of growth 
|h| greater than the available space |delta|, or both. (This amount |h| has 
been weighted by the insertion scaling factor, i.e., by \.[\\count] |n| 
over 1000.) Now we will choose the best way to break the vlist of the 
insertion, using the same criteria as in the \.[\\vsplit] operation. 


MODULE1011

MODULE1012
When the page builder has looked at as much material as could appear before 
the next page break, it makes its decision. The break that gave minimum 
badness will be used to put a completed ``page'' into box 255, with insertions 
appended to their other boxes. 

We also set the values of |top_mark|, |first_mark|, and |bot_mark|. The 
program uses the fact that |bot_mark<>null| implies |first_mark<>null|; 
it also knows that |bot_mark=null| implies |top_mark=first_mark=null|. 

The |fire_up| subroutine prepares to output the current page at the best 
place; then it fires up the user's output routine, if there is one, 
or it simply ships out the page. There is one parameter, |c|, which represents 
the node that was being contributed to the page when the decision to 
force an output was made. 


MODULE1013

MODULE1014
As the page is finally being prepared for output, 
pointer |p| runs through the vlist, with |prev_p| trailing behind; 
pointer |q| is the tail of a list of insertions that 
are being held over for a subsequent page. 


MODULE1015

MODULE1016

MODULE1017
When the following code is executed, the current page runs from node 
|link(page_head)| to node |prev_p|, and the nodes from |p| to |page_tail| 
are to be placed back at the front of the contribution list. Furthermore 
the heldover insertions appear in a list from |link(hold_head)| to |q|; we 
will put them into the current page list for safekeeping while the user's 
output routine is active.  We might have |q=hold_head|; and |p=null| if 
and only if |prev_p=page_tail|. Error messages are suppressed within 
|vpackage|, since the box might appear to be overfull or underfull simply 
because the stretch and shrink from the \.[\\skip] registers for inserts 
are not actually present in the box. 


MODULE1018
If many insertions are supposed to go into the same box, we want to know 
the position of the last node in that box, so that we don't need to waste time 
when linking further information into it. The |last_ins_ptr| fields of the 
page insertion nodes are therefore used for this purpose during the 
packaging phase. 


MODULE1019

MODULE1020
We will set |best_ins_ptr:=null| and package the box corresponding to 
insertion node~|r|, just after making the final insertion into that box. 
If this final insertion is `|split_up|', the remainder after splitting 
and pruning (if any) will be carried over to the next page. 


MODULE1021

MODULE1022

MODULE1023
The list of heldover insertions, running from |link(page_head)| to 
|page_tail|, must be moved to the contribution list when the user has 
specified no output routine. 


MODULE1024

MODULE1025

MODULE1026
When the user's output routine finishes, it has constructed a vlist 
in internal vertical mode, and \TeX\ will do the following: 


MODULE1027

MODULE1028

SPECIAL MODULE 1029:  \[46] The chief executive.

We come now to the |main_control| routine, which contains the master 
switch that causes all the various pieces of \TeX\ to do their things, 
in the right order. 

In a sense, this is the grand climax of the program: It applies all the 
tools that we have worked so hard to construct. In another sense, this is 
the messiest part of the program: It necessarily refers to other pieces 
of code all over the place, so that a person can't fully understand what is 
going on without paging back and forth to be reminded of conventions that 
are defined elsewhere. We are now at the hub of the web, the central nervous 
system that touches most of the other parts and ties them together. 
(*brain*) 

The structure of |main_control| itself is quite simple. There's a label 
called |big_switch|, at which point the next token of input is fetched 
using |get_x_token|. Then the program branches at high speed into one of 
about 100 possible directions, based on the value of the current 
mode and the newly fetched command code; the sum |abs(mode)+cur_cmd| 
indicates what to do next. For example, the case `|vmode+letter|' arises 
when a letter occurs in vertical mode (or internal vertical mode); this 
case leads to instructions that initialize a new paragraph and enter 
horizontal mode. 

The big |case| statement that contains this multiway switch has been labeled 
|reswitch|, so that the program can |goto reswitch| when the next token 
has already been fetched. Most of the cases are quite short; they call 
an ``action procedure'' that does the work for that case, and then they 
either |goto reswitch| or they ``fall through'' to the end of the |case| 
statement, which returns control back to |big_switch|. Thus, |main_control| 
is not an extremely large procedure, in spite of the multiplicity of things 
it must do; it is small enough to be handled by \PASCAL\ compilers that put 
severe restrictions on procedure size. 
(*action procedure*) 

One case is singled out for special treatment, because it accounts for most 
of \TeX's activities in typical applications. The process of reading simple 
text and converting it into |char_node| records, while looking for ligatures 
and kerns, is part of \TeX's ``inner loop''; the whole program runs 
efficiently when its inner loop is fast, so this part has been written 
with particular care. 


MODULE1030
We shall concentrate first on the inner loop of |main_control|, deferring 
consideration of the other cases until later. 
(*inner loop*) 


MODULE1031
When a new token has just been fetched at |big_switch|, we have an 
ideal place to monitor \TeX's activity. 
(*debugging*) 


MODULE1032
The following part of the program was first written in a structured 
manner, according to the philosophy that ``premature optimization is 
the root of all evil.'' Then it was rearranged into pieces of 
spaghetti so that the most common actions could proceed with little or 
no redundancy. 

The original unoptimized form of this algorithm resembles the 
|reconstitute| procedure, which was described earlier in connection with 
hyphenation. Again we have an implied ``cursor'' between characters 
|cur_l| and |cur_r|. The main difference is that the |lig_stack| can now 
contain a charnode as well as pseudo-ligatures; that stack is now 
usually nonempty, because the next character of input (if any) has been 
appended to it. In |main_control| we have 
$$|cur_r|=\cases[|character(lig_stack)|,&if |lig_stack>null|;\cr 
  |font_bchar[cur_font]|,&otherwise;\cr]$$ 
except when |character(lig_stack)=font_false_bchar[cur_font]|. 
Several additional global variables are needed. 


MODULE1033
The boolean variables of the main loop are normally false, and always reset 
to false before the loop is left. That saves us the extra work of initializing 
each time. 


MODULE1034
We leave the |space_factor| unchanged if |sf_code(cur_chr)=0|; otherwise we 
set it equal to |sf_code(cur_chr)|, except that it should never change 
from a value less than 1000 to a value exceeding 1000. The most common 
case is |sf_code(cur_chr)=1000|, so we want that case to be fast. 

The overall structure of the main loop is presented here. Some program labels 
are inside the individual sections. 
(*inner loop*) 


MODULE1035
If |link(cur_q)| is nonnull when |wrapup| is invoked, |cur_q| points to 
the list of characters that were consumed while building the ligature 
character~|cur_l|. 

A discretionary break is not inserted for an explicit hyphen when we are in 
restricted horizontal mode. In particular, this avoids putting discretionary 
nodes inside of other discretionaries. 
(*inner loop*) 


MODULE1036

MODULE1037
Here we are at |main_loop_move_lig|. 
When we begin this code we have |cur_q=tail| and |cur_l=character(lig_stack)|. 


MODULE1038
The result of \.[\\char] can participate in a ligature or kern, so we must 
look ahead for it. 


MODULE1039
Even though comparatively few characters have a lig/kern program, several 
of the instructions here count as part of \TeX's inner loop, since a 
(*inner loop*) 
potentially long sequential search must be performed. For example, tests with 
Computer Modern Roman showed that about 40 per cent of all characters 
actually encountered in practice had a lig/kern program, and that about four 
lig/kern commands were investigated for every such character. 

At the beginning of this code we have |main_i=char_info(main_f)(cur_l)|. 


MODULE1040
When a ligature or kern instruction matches a character, we know from 
|read_font_info| that the character exists in the font, even though we 
haven't verified its existence in the normal way. 

This section could be made into a subroutine, if the code inside 
|main_control| needs to be shortened. 

\chardef\?='174 % vertical line to indicate character retention 


MODULE1041
The occurrence of blank spaces is almost part of \TeX's inner loop, 
(*inner loop*) 
since we usually encounter about one space for every five non-blank characters. 
Therefore |main_control| gives second-highest priority to ordinary spaces. 

When a glue parameter like \.[\\spaceskip] is set to `\.[0pt]', we will 
see to it later that the corresponding glue specification is precisely 
|zero_glue|, not merely a pointer to some specification that happens 
to be full of zeroes. Therefore it is simple to test whether a glue parameter 
is zero or~not. 


MODULE1042
Having |font_glue| allocated for each text font saves both time and memory. 
If any of the three spacing parameters are subsequently changed by the 
use of \.[\\fontdimen], the |find_font_dimen| procedure deallocates the 
|font_glue| specification allocated here. 


MODULE1043

MODULE1044

MODULE1045
Whew---that covers the main loop. We can now proceed at a leisurely 
pace through the other combinations of possibilities. 


MODULE1046
Here is a list of cases where the user has probably gotten into or out of math 
mode by mistake. \TeX\ will insert a dollar sign and rescan the current token. 


MODULE1047

MODULE1048
When erroneous situations arise, \TeX\ usually issues an error message 
specific to the particular error. For example, `\.[\\noalign]' should 
not appear in any mode, since it is recognized by the |align_peek| routine 
in all of its legitimate appearances; a special error message is given 
when `\.[\\noalign]' occurs elsewhere. But sometimes the most appropriate 
error message is simply that the user is not allowed to do what he or she 
has attempted. For example, `\.[\\moveleft]' is allowed only in vertical mode, 
and `\.[\\lower]' only in non-vertical modes.  Such cases are enumerated 
here and in the other sections referred to under `See also \dots.' 


MODULE1049
The `|you_cant|' procedure prints a line saying that the current command 
is illegal in the current mode; it identifies these things symbolically. 


MODULE1050

MODULE1051
Some operations are allowed only in privileged modes, i.e., in cases 
that |mode>0|. The |privileged| function is used to detect violations 
of this rule; it issues an error message and returns |false| if the 
current |mode| is negative. 


MODULE1052
Either \.[\\dump] or \.[\\end] will cause |main_control| to enter the 
endgame, since both of them have `|stop|' as their command code. 


MODULE1053

MODULE1054
We don't want to leave |main_control| immediately when a |stop| command 
is sensed, because it may be necessary to invoke an \.[\\output] routine 
several times before things really grind to a halt. (The output routine 
might even say `\.[\\gdef\\end\[...\]]', to prolong the life of the job.) 
Therefore |its_all_over| is |true| only when the current page 
and contribution list are empty, and when the last output was not a 
``dead cycle.'' 


SPECIAL MODULE 1055:  \[47] Building boxes and lists.

The most important parts of |main_control| are concerned with \TeX's 
chief mission of box-making. We need to control the activities that put 
entries on vlists and hlists, as well as the activities that convert 
those lists into boxes. All of the necessary machinery has already been 
developed; it remains for us to ``push the buttons'' at the right times. 


MODULE1056
As an introduction to these routines, let's consider one of the simplest 
cases: What happens when `\.[\\hrule]' occurs in vertical mode, or 
`\.[\\vrule]' in horizontal mode or math mode? The code in |main_control| 
is short, since the |scan_rule_spec| routine already does most of what is 
required; thus, there is no need for a special action procedure. 

Note that baselineskip calculations are disabled after a rule in vertical 
mode, by setting |prev_depth:=ignore_depth|. 


MODULE1057
The processing of things like \.[\\hskip] and \.[\\vskip] is slightly 
more complicated. But the code in |main_control| is very short, since 
it simply calls on the action routine |append_glue|. Similarly, \.[\\kern] 
activates |append_kern|. 


MODULE1058
The |hskip| and |vskip| command codes are used for control sequences 
like \.[\\hss] and \.[\\vfil] as well as for \.[\\hskip] and \.[\\vskip]. 
The difference is in the value of |cur_chr|. 


MODULE1059

MODULE1060
All the work relating to glue creation has been relegated to the 
following subroutine. It does not call |build_page|, because it is 
used in at least one place where that would be a mistake. 


MODULE1061

MODULE1062
Many of the actions related to box-making are triggered by the appearance 
of braces in the input. For example, when the user says `\.[\\hbox] 
\.[to] \.[100pt\[$\langle\,\hbox[hlist]\,\rangle$\]]' in vertical mode, 
the information about the box size (100pt, |exactly|) is put onto |save_stack| 
with a level boundary word just above it, and |cur_group:=adjusted_hbox_group|; 
\TeX\ enters restricted horizontal mode to process the hlist. The right 
brace eventually causes |save_stack| to be restored to its former state, 
at which time the information about the box size (100pt, |exactly|) is 
available once again; a box is packaged and we leave restricted horizontal 
mode, appending the new box to the current list of the enclosing mode 
(in this case to the current list of vertical mode), followed by any 
vertical adjustments that were removed from the box by |hpack|. 

The next few sections of the program are therefore concerned with the 
treatment of left and right curly braces. 


MODULE1063
If a left brace occurs in the middle of a page or paragraph, it simply 
introduces a new level of grouping, and the matching right brace will not have 
such a drastic effect. Such grouping affects neither the mode nor the 
current list. 


MODULE1064
We have to deal with errors in which braces and such things are not 
properly nested. Sometimes the user makes an error of commission by 
inserting an extra symbol, but sometimes the user makes an error of omission. 
\TeX\ can't always tell one from the other, so it makes a guess and tries 
to avoid getting into a loop. 

The |off_save| routine is called when the current group code is wrong. It tries 
to insert something into the user's input that will help clean off 
the top level. 


MODULE1065
At this point, |link(temp_head)=p|, a pointer to an empty one-word node. 


MODULE1066

MODULE1067
The routine for a |right_brace| character branches into many subcases, 
since a variety of things may happen, depending on |cur_group|. Some 
types of groups are not supposed to be ended by a right brace; error 
messages are given in hopes of pinpointing the problem. Most branches 
of this routine will be filled in later, when we are ready to understand 
them; meanwhile, we must prepare ourselves to deal with such errors. 


MODULE1068

MODULE1069

MODULE1070
Here is where we clear the parameters that are supposed to revert to their 
default values after every paragraph and when internal vertical mode is entered. 


MODULE1071
Now let's turn to the question of how \.[\\hbox] is treated. We actually 
need to consider also a slightly larger context, since constructions like 
`\.[\\setbox3=]\penalty0\.[\\hbox...]' and 
`\.[\\leaders]\penalty0\.[\\hbox...]' and 
`\.[\\lower3.8pt\\hbox...]' 
are supposed to invoke quite 
different actions after the box has been packaged. Conversely, 
constructions like `\.[\\setbox3=]' can be followed by a variety of 
different kinds of boxes, and we would like to encode such things in an 
efficient way. 

In other words, there are two problems: to represent the context of a box, 
and to represent its type. 

The first problem is solved by putting a ``context code'' on the |save_stack|, 
just below the two entries that give the dimensions produced by |scan_spec|. 
The context code is either a (signed) shift amount, or it is a large 
integer |>=box_flag|, where |box_flag=(*$2^[30]$*)|. Codes |box_flag| through 
|box_flag+255| represent `\.[\\setbox0]' through `\.[\\setbox255]'; 
codes |box_flag+256| through |box_flag+511| represent `\.[\\global\\setbox0]' 
through `\.[\\global\\setbox255]'; 
code |box_flag+512| represents `\.[\\shipout]'; and codes |box_flag+513| 
through |box_flag+515| represent `\.[\\leaders]', `\.[\\cleaders]', 
and `\.[\\xleaders]'. 

The second problem is solved by giving the command code |make_box| to all 
control sequences that produce a box, and by using the following |chr_code| 
values to distinguish between them: |box_code|, |copy_code|, |last_box_code|, 
|vsplit_code|, |vtop_code|, |vtop_code+vmode|, and |vtop_code+hmode|, where 
the latter two are used to denote \.[\\vbox] and \.[\\hbox], respectively. 


MODULE1072

MODULE1073
Constructions that require a box are started by calling |scan_box| with 
a specified context code. The |scan_box| routine verifies 
that a |make_box| command comes next and then it calls |begin_box|. 


MODULE1074
The global variable |cur_box| will point to a newly made box. If the box 
is void, we will have |cur_box=null|. Otherwise we will have 
|type(cur_box)=hlist_node| or |vlist_node| or |rule_node|; the |rule_node| 
case can occur only with leaders. 


MODULE1075
The |box_end| procedure does the right thing with |cur_box|, if 
|box_context| represents the context as explained above. 


MODULE1076
The global variable |adjust_tail| will be non-null if and only if the 
current box might include adjustments that should be appended to the 
current vertical list. 


MODULE1077

MODULE1078

MODULE1079
Now that we can see what eventually happens to boxes, we can consider 
the first steps in their creation. The |begin_box| routine is called when 
|box_context| is a context specification, |cur_chr| specifies the type of 
box desired, and |cur_cmd=make_box|. 


MODULE1080
Note that the condition |not is_char_node(tail)| implies that |head<>tail|, 
since |head| is a one-word node. 


MODULE1081

MODULE1082
Here we deal with things like `\.[\\vsplit 13 to 100pt]'. 


MODULE1083
Here is where we enter restricted horizontal mode or internal vertical 
mode, in order to make a box. 


MODULE1084

MODULE1085
When the right brace occurs at the end of an \.[\\hbox] or \.[\\vbox] or 
\.[\\vtop] construction, the |package| routine comes into action. We might 
also have to finish a paragraph that hasn't ended. 


MODULE1086

MODULE1087
The height of a `\.[\\vtop]' box is inherited from the first item on its list, 
if that item is an |hlist_node|, |vlist_node|, or |rule_node|; otherwise 
the \.[\\vtop] height is zero. 



MODULE1088
A paragraph begins when horizontal-mode material occurs in vertical mode, 
or when the paragraph is explicitly started by `\.[\\indent]' or 
`\.[\\noindent]'. 


MODULE1089

MODULE1090

MODULE1091

MODULE1092

MODULE1093

MODULE1094
A paragraph ends when a |par_end| command is sensed, or when we are in 
horizontal mode when reaching the right brace of vertical-mode routines 
like \.[\\vbox], \.[\\insert], or \.[\\output]. 


MODULE1095

MODULE1096

MODULE1097
Insertion and adjustment and mark nodes are constructed by the following 
pieces of the program. 


MODULE1098

MODULE1099

MODULE1100

MODULE1101

MODULE1102
Penalty nodes get into a list via the |break_penalty| command. 
(*penalties*) 


MODULE1103

MODULE1104
The |remove_item| command removes a penalty, kern, or glue node if it 
appears at the tail of the current list, using a brute-force linear scan. 
Like \.[\\lastbox], this command is not allowed in vertical mode (except 
internal vertical mode), since the current list in vertical mode is sent 
to the page builder.  But if we happen to be able to implement it in 
vertical mode, we do. 


MODULE1105
When |delete_last| is called, |cur_chr| is the |type| of node that 
will be deleted, if present. 


MODULE1106

MODULE1107

MODULE1108

MODULE1109
The |un_hbox| and |un_vbox| commands unwrap one of the 256 current boxes. 


MODULE1110

MODULE1111

INSERT: 'Forbidden... '
=vmode+ital_corr, 


MODULE1112
Italic corrections are converted to kern nodes when the |ital_corr| command 
follows a character. In math mode the same effect is achieved by appending 
a kern of zero here, since italic corrections are supplied later. 


MODULE1113

MODULE1114
Discretionary nodes are easy in the common case `\.[\\-]', but in the 
general case we must process three braces full of items. 


MODULE1115

MODULE1116

MODULE1117
The space factor does not change when we append a discretionary node, 
but it starts out as 1000 in the subsidiary lists. 


MODULE1118
The three discretionary lists are constructed somewhat as if they were 
hboxes. A~subroutine called |build_discretionary| handles the transitions. 
(This is sort of fun.) 


MODULE1119

MODULE1120

MODULE1121
During this loop, |p=link(q)| and there are |n| items preceding |p|. 


MODULE1122
We need only one more thing to complete the horizontal mode routines, namely 
the \.[\\accent] primitive. 


MODULE1123
The positioning of accents is straightforward but tedious. Given an accent 
of width |a|, designed for characters of height |x| and slant |s|; 
and given a character of width |w|, height |h|, and slant |t|: We will shift 
the accent down by |x-h|, and we will insert kern nodes that have the effect of 
centering the accent over the character and shifting the accent to the 
right by $\delta=[1\over2](w-a)+h\cdot t-x\cdot s$.  If either character is 
absent from the font, we will simply use the other, without shifting. 


MODULE1124

MODULE1125
The kern nodes appended here must be distinguished from other kerns, lest 
they be wiped away by the hyphenation algorithm or by a previous line break. 

The two kerns are computed with (machine-dependent) |real| arithmetic, but 
their sum is machine-independent; the net effect is machine-independent, 
because the user cannot remove these nodes nor access them via \.[\\lastkern]. 


MODULE1126
When `\.[\\cr]' or `\.[\\span]' or a tab mark comes through the scanner 
into |main_control|, it might be that the user has foolishly inserted 
one of them into something that has nothing to do with alignment. But it is 
far more likely that a left brace or right brace has been omitted, since 
|get_next| takes actions appropriate to alignment only when `\.[\\cr]' 
or `\.[\\span]' or tab marks occur with |align_state=0|. The following 
program attempts to make an appropriate recovery. 


MODULE1127

MODULE1128

MODULE1129
The help messages here contain a little white lie, since \.[\\noalign] 
and \.[\\omit] are allowed also after `\.[\\noalign\[...\]]'. 


MODULE1130
We've now covered most of the abuses of \.[\\halign] and \.[\\valign]. 
Let's take a look at what happens when they are used correctly. 


MODULE1131
An |align_group| code is supposed to remain on the |save_stack| 
during an entire alignment, until |fin_align| removes it. 

A devious user might force an |endv| command to occur just about anywhere; 
we must defeat such hacks. 


MODULE1132

MODULE1133

MODULE1134
Finally, \.[\\endcsname] is not supposed to get through to |main_control|. 


MODULE1135

SPECIAL MODULE 1136:  \[48] Building math lists.

The routines that \TeX\ uses to create mlists are similar to those we have 
just seen for the generation of hlists and vlists. But it is necessary to 
make ``noads'' as well as nodes, so the reader should review the 
discussion of math mode data structures before trying to make sense out of 
the following program. 

Here is a little routine that needs to be done whenever a subformula 
is about to be processed. The parameter is a code like |math_group|. 


MODULE1137
We get into math mode from horizontal mode when a `\.\$' (i.e., a 
|math_shift| character) is scanned. We must check to see whether this 
`\.\$' is immediately followed by another, in case display math mode is 
called for. 


MODULE1138

MODULE1139

MODULE1140
We get into ordinary math mode from display math mode when `\.[\\eqno]' or 
`\.[\\leqno]' appears. In such cases |cur_chr| will be 0 or~1, respectively; 
the value of |cur_chr| is placed onto |save_stack| for safe keeping. 


MODULE1141

MODULE1142
When \TeX\ is in display math mode, |cur_group=math_shift_group|, 
so it is not necessary for the |start_eq_no| procedure to test for 
this condition. 


MODULE1143

MODULE1144

INSERT: 'Forbidden... '
=non_math(eq_no), 


MODULE1145
When we enter display math mode, we need to call |line_break| to 
process the partial paragraph that has just been interrupted by the 
display. Then we can set the proper values of |display_width| and 
|display_indent| and |pre_display_size|. 


MODULE1146

MODULE1147

MODULE1148
We need to be careful that |w|, |v|, and |d| do not depend on any |glue_set| 
values, since such values are subject to system-dependent rounding. 
System-dependent numbers are not allowed to infiltrate parameters like 
|pre_display_size|, since \TeX82 is supposed to make the same decisions on all 
machines. 


MODULE1149
A displayed equation is considered to be three lines long, so we 
calculate the length and offset of line number |prev_graf+2|. 


MODULE1150
Subformulas of math formulas cause a new level of math mode to be entered, 
on the semantic nest as well as the save stack. These subformulas arise in 
several ways: (1)~A left brace by itself indicates the beginning of a 
subformula that will be put into a box, thereby freezing its glue and 
preventing line breaks. (2)~A subscript or superscript is treated as a 
subformula if it is not a single character; the same applies to 
the nucleus of things like \.[\\underline]. (3)~The \.[\\left] primitive 
initiates a subformula that will be terminated by a matching \.[\\right]. 
The group codes placed on |save_stack| in these three cases are 
|math_group|, |math_group|, and |math_left_group|, respectively. 

Here is the code that handles case (1); the other cases are not quite as 
trivial, so we shall consider them later. 


MODULE1151
Recall that the |nucleus|, |subscr|, and |supscr| fields in a noad are 
broken down into subfields called |math_type| and either |info| or 
|(fam,character)|. The job of |scan_math| is to figure out what to place 
in one of these principal fields; it looks at the subformula that 
comes next in the input, and places an encoding of that subformula 
into a given word of |mem|. 


MODULE1152
An active character that is an |outer_call| is allowed here. 


MODULE1153
The pointer |p| is placed on |save_stack| while a complex subformula 
is being scanned. 


MODULE1154
The simplest math formula is, of course, `\.[\$[ ]\$]', when no noads are 
generated. The next simplest cases involve a single character, e.g., 
`\.[\$x\$]'. Even though such cases may not seem to be very interesting, 
the reader can perhaps understand how happy the author was when `\.[\$x\$]' 
was first properly typeset by \TeX. The code in this section was used. 
(*Knuth, Donald Ervin*) 


MODULE1155
The |set_math_char| procedure creates a new noad appropriate to a given 
math code, and appends it to the current mlist. However, if the math code 
is sufficiently large, the |cur_chr| is treated as an active character and 
nothing is appended. 


MODULE1156
Primitive math operators like \.[\\mathop] and \.[\\underline] are given 
the command code |math_comp|, supplemented by the noad type that they 
generate. 


MODULE1157

MODULE1158

MODULE1159

MODULE1160
Delimiter fields of noads are filled in by the |scan_delimiter| routine. 
The first parameter of this procedure is the |mem| address where the 
delimiter is to be placed; the second tells if this delimiter follows 
\.[\\radical] or not. 


MODULE1161

MODULE1162

MODULE1163

MODULE1164

MODULE1165

MODULE1166

MODULE1167

MODULE1168

MODULE1169
The routine that inserts a |style_node| holds no surprises. 


MODULE1170

MODULE1171

MODULE1172
The routine that scans the four mlists of a \.[\\mathchoice] is very 
much like the routine that builds discretionary nodes. 


MODULE1173

MODULE1174

MODULE1175
Subscripts and superscripts are attached to the previous nucleus by the 
(*superscripts*)(*subscripts*) 
action procedure called |sub_sup|. We use the facts that |sub_mark=sup_mark+1| 
and |subscr(p)=supscr(p)+1|. 


MODULE1176

MODULE1177

MODULE1178
An operation like `\.[\\over]' causes the current mlist to go into a 
state of suspended animation: |incompleat_noad| points to a |fraction_noad| 
that contains the mlist-so-far as its numerator, while the denominator 
is yet to come. Finally when the mlist is finished, the denominator will 
go into the incompleat fraction noad, and that noad will become the 
whole formula, unless it is surrounded by `\.[\\left]' and `\.[\\right]' 
delimiters. 


MODULE1179

MODULE1180

MODULE1181

MODULE1182

MODULE1183

MODULE1184
At the end of a math formula or subformula, the |fin_mlist| routine is 
called upon to return a pointer to the newly completed mlist, and to 
pop the nest back to the enclosing semantic level. The parameter to 
|fin_mlist|, if not null, points to a |right_noad| that ends the 
current mlist; this |right_noad| has not yet been appended. 


MODULE1185

MODULE1186
Now at last we're ready to see what happens when a right brace occurs 
in a math formula. Two special cases are simplified here: Braces are effectively 
removed when they surround a single Ord without sub/superscripts, or when they 
surround an accent that is the nucleus of an Ord atom. 


MODULE1187

MODULE1188
We have dealt with all constructions of math mode except `\.[\\left]' and 
`\.[\\right]', so the picture is completed by the following sections of 
the program. 


MODULE1189

MODULE1190

MODULE1191

MODULE1192

MODULE1193
Here is the only way out of math mode. 


MODULE1194

MODULE1195

MODULE1196
The |unsave| is done after everything else here; hence an appearance of 
`\.[\\mathsurround]' inside of `\.[\$...\$]' affects the spacing at these 
particular \.\$'s. This is consistent with the conventions of 
`\.[\$\$...\$\$]', since `\.[\\abovedisplayskip]' inside a display affects the 
space above that display. 


MODULE1197
\TeX\ gets to the following part of the program when the first `\.\$' ending 
a display has been scanned. 


MODULE1198
We have saved the worst for last: The fussiest part of math mode processing 
occurs when a displayed formula is being centered and placed with an optional 
equation number. 


MODULE1199
At this time |p| points to the mlist for the formula; |a| is either 
|null| or it points to a box containing the equation number; and we are in 
vertical mode (or internal vertical mode). 


MODULE1200

MODULE1201
The user can force the equation number to go on a separate line 
by causing its width to be zero. 


MODULE1202
We try first to center the display without regard to the existence of 
the equation number. If that would make it too close (where ``too close'' 
means that the space between display and equation number is less than the 
width of the equation number), we either center it in the remaining space 
or move it as far from the equation number as possible. The latter alternative 
is taken only if the display begins with glue, since we assume that the 
user put glue there to control the spacing precisely. 


MODULE1203
If the equation number is set on a line by itself, either before or 
after the formula, we append an infinite penalty so that no page break will 
separate the display from its number; and we use the same size and 
displacement for all three potential lines of the display, even though 
`\.[\\parshape]' may specify them differently. 


MODULE1204

MODULE1205

MODULE1206
When \.[\\halign] appears in a display, the alignment routines operate 
essentially as they do in vertical mode. Then the following program is 
activated, with |p| and |q| pointing to the beginning and end of the 
resulting list, and with |aux_save| holding the |prev_depth| value. 


MODULE1207

SPECIAL MODULE 1208:  \[49] Mode-independent processing.

The long |main_control| procedure has now been fully specified, except for 
certain activities that are independent of the current mode. These activities 
do not change the current vlist or hlist or mlist; if they change anything, 
it is the value of a parameter or the meaning of a control sequence. 

Assignments to values in |eqtb| can be global or local. Furthermore, a 
control sequence can be defined to be `\.[\\long]' or `\.[\\outer]', and 
it might or might not be expanded. The prefixes `\.[\\global]', `\.[\\long]', 
and `\.[\\outer]' can occur in any order. Therefore we assign binary numeric 
codes, making it possible to accumulate the union of all specified prefixes 
by adding the corresponding codes.  (\PASCAL's |set| operations could also 
have been used.) 


MODULE1209

MODULE1210
Every prefix, and every command code that might or might not be prefixed, 
calls the action procedure |prefixed_command|. This routine accumulates 
a sequence of prefixes until coming to a non-prefix, then it carries out 
the command. 


MODULE1211
If the user says, e.g., `\.[\\global\\global]', the redundancy is 
silently accepted. 


MODULE1212

MODULE1213

MODULE1214
The previous routine does not have to adjust |a| so that |a mod 4=0|, 
since the following routines test for the \.[\\global] prefix as follows. 


MODULE1215
When a control sequence is to be defined, by \.[\\def] or \.[\\let] or 
something similar, the |get_r_token| routine will substitute a special 
control sequence for a token that is not redefinable. 


MODULE1216

MODULE1217
Here's an example of the way many of the following routines operate. 
(Unfortunately, they aren't all as simple as this.) 


MODULE1218
When a |def| command has been scanned, 
|cur_chr| is odd if the definition is supposed to be global, and 
|cur_chr>=2| if the definition is supposed to be expanded. 


MODULE1219
Both \.[\\let] and \.[\\futurelet] share the command code |let|. 


MODULE1220

MODULE1221

MODULE1222
A \.[\\chardef] creates a control sequence whose |cmd| is |char_given|; 
a \.[\\mathchardef] creates a control sequence whose |cmd| is |math_given|; 
and the corresponding |chr| is the character code or math code. A \.[\\countdef] 
or \.[\\dimendef] or \.[\\skipdef] or \.[\\muskipdef] creates a control 
sequence whose |cmd| is |assign_int| or \dots\ or |assign_mu_glue|, and the 
corresponding |chr| is the |eqtb| location of the internal register in question. 


MODULE1223

MODULE1224
We temporarily define |p| to be |relax|, so that an occurrence of |p| 
while scanning the definition will simply stop the scanning instead of 
producing an ``undefined control sequence'' error or expanding the 
previous meaning.  This allows, for instance, `\.[\\chardef\\foo=123\\foo]'. 


MODULE1225

MODULE1226
The token-list parameters, \.[\\output] and \.[\\everypar], etc., receive 
their values in the following way. (For safety's sake, we place an 
enclosing pair of braces around an \.[\\output] list.) 


MODULE1227

MODULE1228
Similar routines are used to assign values to the numeric parameters. 


MODULE1229
When a glue register or parameter becomes zero, it will always point to 
|zero_glue| because of the following procedure. (Exception: The tabskip 
glue isn't trapped while preambles are being scanned.) 


MODULE1230
The various character code tables are changed by the |def_code| commands, 
and the font families are declared by |def_family|. 


MODULE1231

MODULE1232
The different types of code values have different legal ranges; the 
following program is careful to check each case properly. 


MODULE1233

MODULE1234

MODULE1235
Next we consider changes to \TeX's numeric registers. 


MODULE1236
We use the fact that |register<advance<multiply<divide|. 


MODULE1237
Here we use the fact that the consecutive codes |int_val..mu_val| and 
|assign_int..assign_mu_glue| correspond to each other nicely. 


MODULE1238

MODULE1239

MODULE1240

MODULE1241
The processing of boxes is somewhat different, because we may need 
to scan and create an entire box before we actually change the value of the old 
one. 


MODULE1242
The |space_factor| or |prev_depth| settings are changed when a |set_aux| 
command is sensed. Similarly, |prev_graf| is changed in the presence of 
|set_prev_graf|, and |dead_cycles| or |insert_penalties| in the presence of 
|set_page_int|. These definitions are always global. 

When some dimension of a box register is changed, the change isn't exactly 
global; but \TeX\ does not look at the \.[\\global] switch. 


MODULE1243

MODULE1244

MODULE1245

MODULE1246

MODULE1247

MODULE1248
Paragraph shapes are set up in the obvious way. 


MODULE1249
Here's something that isn't quite so obvious. It guarantees that 
|info(par_shape_ptr)| can hold any positive~|n| for which |get_node(2*n+1)| 
doesn't overflow the memory capacity. 


MODULE1250
New hyphenation data is loaded by the |hyph_data| command. 


MODULE1251

MODULE1252

MODULE1253
All of \TeX's parameters are kept in |eqtb| except the font information, 
the interaction mode, and the hyphenation tables; these are strictly global. 


MODULE1254

MODULE1255

MODULE1256
Here is where the information for a new font gets loaded. 


MODULE1257

MODULE1258

MODULE1259

MODULE1260
When the user gives a new identifier to a font that was previously loaded, 
the new name becomes the font identifier of record. Font names `\.[xyz]' and 
`\.[XYZ]' are considered to be different. 


MODULE1261

MODULE1262

MODULE1263

MODULE1264

MODULE1265

MODULE1266
The \.[\\afterassignment] command puts a token into the global 
variable |after_token|. This global variable is examined just after 
every assignment has been performed. 


MODULE1267

MODULE1268

MODULE1269

MODULE1270
Here is a procedure that might be called `Get the next non-blank non-relax 
non-call non-assignment token'. 


MODULE1271

MODULE1272
Files for \.[\\read] are opened and closed by the |in_stream| command. 


MODULE1273

MODULE1274

MODULE1275

MODULE1276
The user can issue messages to the terminal, regardless of the 
current mode. 


MODULE1277

MODULE1278

MODULE1279

MODULE1280

MODULE1281
If \.[\\errmessage] occurs often in |scroll_mode|, without user-defined 
\.[\\errhelp], we don't want to give a long help message each time. So we 
give a verbose explanation only once. 


MODULE1282

INSERT: 'Set init...'
=long_help_seen:=false; 


MODULE1283

MODULE1284
The |error| routine calls on |give_err_help| if help is requested from 
the |err_help| parameter. 


MODULE1285
The \.[\\uppercase] and \.[\\lowercase] commands are implemented by 
building a token list and then changing the cases of the letters in it. 


MODULE1286

MODULE1287

MODULE1288

MODULE1289
When the case of a |chr_code| changes, we don't change the |cmd|. 
We also change active characters, using the fact that 
|cs_token_flag+active_base| is a multiple of~256. 
(*data structure assumptions*) 


MODULE1290
We come finally to the last pieces missing from |main_control|, namely the 
`\.[\\show]' commands that are useful when debugging. 


MODULE1291

MODULE1292

MODULE1293

MODULE1294

MODULE1295

MODULE1296

MODULE1297

MODULE1298

SPECIAL MODULE 1299:  \[50] Dumping and undumping the tables.

After \.[INITEX] has seen a collection of fonts and macros, it 
can write all the necessary information on an auxiliary file so 
that production versions of \TeX\ are able to initialize their 
memory at high speed. The present section of the program takes 
care of such output and input. We shall consider simultaneously 
the processes of storing and restoring, 
so that the inverse relation between them is clear. 
(*INITEX*) 

The global variable |format_ident| is a string that is printed right 
after the |banner| line when \TeX\ is ready to start. For \.[INITEX] this 
string says simply `\.[(INITEX)]'; for other versions of \TeX\ it says, 
for example, `\.[(preloaded format=plain 1982.11.19)]', showing the year, 
month, and day that the format file was created. We have |format_ident=0| 
before \TeX's tables are loaded. 


MODULE1300

MODULE1301

MODULE1302

MODULE1303
Corresponding to the procedure that dumps a format file, we have a function 
that reads one in. The function returns |false| if the dumped format is 
incompatible with the present \TeX\ table sizes, etc. 


MODULE1304
The user is not allowed to dump a format file unless |save_ptr=0|. 
This condition implies that |cur_level=level_one|, hence 
the |xeq_level| array is constant and it need not be dumped. 


MODULE1305
Format files consist of |memory_word| items, and we use the following 
macros to dump words of different types: 


MODULE1306
The inverse macros are slightly more complicated, since we need to check 
the range of the values we are reading in. We say `|undump(a)(b)(x)|' to 
read an integer value |x| that is supposed to be in the range |a<=x<=b|. 


MODULE1307
The next few sections of the program should make it clear how we use the 
dump/undump macros. 


MODULE1308
Sections of a \.[WEB] program that are ``commented out'' still contribute 
strings to the string pool; therefore \.[INITEX] and \TeX\ will have 
the same strings. (And it is, of course, a good thing that they do.) 
(*WEB*) 
(*string pool*) 


MODULE1309

MODULE1310

MODULE1311
By sorting the list of available spaces in the variable-size portion of 
|mem|, we are usually able to get by without having to dump very much 
of the dynamic memory. 

We recompute |var_used| and |dyn_used|, so that \.[INITEX] dumps valid 
information even when it has not been gathering statistics. 


MODULE1312

MODULE1313

MODULE1314

MODULE1315
The table of equivalents usually contains repeated information, so we dump it 
in compressed form: The sequence of $n+2$ values $(n,x_1,\ldots,x_n,m)$ in the 
format file represents $n+m$ consecutive entries of |eqtb|, with |m| extra 
copies of $x_n$, namely $(x_1,\ldots,x_n,x_n,\ldots,x_n)$. 


MODULE1316

MODULE1317

MODULE1318
A different scheme is used to compress the hash table, since its lower 
region is usually sparse. When |text(p)<>0| for |p<=hash_used|, we output 
two words, |p| and |hash[p]|. The hash table is, of course, densely packed 
for |p>=hash_used|, so the remaining entries are output in a~block. 


MODULE1319

MODULE1320

MODULE1321

MODULE1322

MODULE1323

MODULE1324

MODULE1325
Only ``nonempty'' parts of |op_start| need to be restored. 


MODULE1326
We have already printed a lot of statistics, so we set |tracing_stats:=0| 
to prevent them from appearing again. 


MODULE1327

MODULE1328

MODULE1329

SPECIAL MODULE 1330:  \[51] The main program.

This is it: the part of \TeX\ that executes all those procedures we have 
written. 

Well---almost. Let's leave space for a few more routines that we may 
have forgotten. 


MODULE1331
We have noted that there are two versions of \TeX82. One, called \.[INITEX], 
(*INITEX*) 
has to be run first; it initializes everything from scratch, without 
reading a format file, and it has the capability of dumping a format file. 
The other one is called `\.[VIRTEX]'; it is a ``virgin'' program that needs 
(*VIRTEX*) 
to input a format file in order to get started. \.[VIRTEX] typically has 
more memory capacity than \.[INITEX], because it does not need the space 
consumed by the auxiliary hyphenation tables and the numerous calls on 
|primitive|, etc. 

The \.[VIRTEX] program cannot read a format file instantaneously, of course; 
the best implementations therefore allow for production versions of \TeX\ that 
not only avoid the loading routine for \PASCAL\ object code, they also have 
a format file pre-loaded. This is impossible to do if we stick to standard 
\PASCAL; but there is a simple way to fool many systems into avoiding the 
initialization, as follows:\quad(1)~We declare a global integer variable 
called |ready_already|. The probability is negligible that this 
variable holds any particular value like 314159 when \.[VIRTEX] is first 
loaded.\quad(2)~After we have read in a format file and initialized 
everything, we set |ready_already:=314159|.\quad(3)~Soon \.[VIRTEX] 
will print `\.*', waiting for more input; and at this point we 
interrupt the program and save its core image in some form that the 
operating system can reload speedily.\quad(4)~When that core image is 
activated, the program starts again at the beginning; but now 
|ready_already=314159| and all the other global variables have 
their initial values too. The former chastity has vanished! 

In other words, if we allow ourselves to test the condition 
|ready_already=314159|, before |ready_already| has been 
assigned a value, we can avoid the lengthy initialization. Dirty tricks 
rarely pay off so handsomely. 
(*dirty \PASCAL*) 
(*system dependencies*) 

On systems that allow such preloading, the standard program called \.[TeX] 
should be the one that has \.[plain] format preloaded, since that agrees 
with [\sl The \TeX book]. Other versions, e.g., \.[AmSTeX], should also 
(*TeXbook][\sl The \TeX book*) 
(*AmSTeX*) 
(*plain*) 
be provided for commonly used formats. 


MODULE1332
Now this is really it: \TeX\ starts and ends here. 

The initial test involving |ready_already| should be deleted if the 
\PASCAL\ runtime system is smart enough to detect such a ``mistake.'' 
(*system dependencies*) 


MODULE1333
Here we do whatever is needed to complete \TeX's job gracefully on the 
local operating system. The code here might come into play after a fatal 
error; it must therefore consist entirely of ``safe'' operations that 
cannot produce error messages. For example, it would be a mistake to call 
|str_room| or |make_string| at this time, because a call on |overflow| 
might lead to an infinite loop. 
(*system dependencies*) 

Actually there's one way to get error messages, via |prepare_mag|; 
but that can't cause infinite recursion. 
(*recursion*) 

This program doesn't bother to close the input files that may still be open. 


MODULE1334
The present section goes directly to the log file instead of using 
|print| commands, because there's no need for these strings to take 
up |str_pool| memory when a non-[\bf stat] version of \TeX\ is being used. 


MODULE1335
We get to the |final_cleanup| routine when \.[\\end] or \.[\\dump] has 
been scanned and |its_all_over|\kern-2pt. 


MODULE1336

MODULE1337
When we begin the following code, \TeX's tables may still contain garbage; 
the strings might not even be present. Thus we must proceed cautiously to get 
bootstrapped in. 

But when we finish this part of the program, \TeX\ is ready to call on the 
|main_control| routine to do its work. 


SPECIAL MODULE 1338:  \[52] Debugging.

Once \TeX\ is working, you should be able to diagnose most errors with 
the \.[\\show] commands and other diagnostic features. But for the initial 
stages of debugging, and for the revelation of really deep mysteries, you 
can compile \TeX\ with a few more aids, including the \PASCAL\ runtime 
checks and its debugger. An additional routine called |debug_help| 
will also come into play when you type `\.D' after an error message; 
|debug_help| also occurs just before a fatal error causes \TeX\ to succumb. 
(*debugging*) 
(*system dependencies*) 

The interface to |debug_help| is primitive, but it is good enough when used 
with a \PASCAL\ debugger that allows you to set breakpoints and to read 
variables and change their values. After getting the prompt `\.[debug \#]', you 
type either a negative number (this exits |debug_help|), or zero (this 
goes to a location where you can set a breakpoint, thereby entering into 
dialog with the \PASCAL\ debugger), or a positive number |m| followed by 
an argument |n|. The meaning of |m| and |n| will be clear from the 
program below. (If |m=13|, there is an additional argument, |l|.) 
(*debug \#*) 


MODULE1339

SPECIAL MODULE 1340:  \[53] Extensions.

The program above includes a bunch of ``hooks'' that allow further 
capabilities to be added without upsetting \TeX's basic structure. 
Most of these hooks are concerned with ``whatsit'' nodes, which are 
intended to be used for special purposes; whenever a new extension to 
\TeX\ involves a new kind of whatsit node, a corresponding change needs 
to be made to the routines below that deal with such nodes, 
but it will usually be unnecessary to make many changes to the 
other parts of this program. 

In order to demonstrate how extensions can be made, we shall treat 
`\.[\\write]', `\.[\\openout]', `\.[\\closeout]', `\.[\\immediate]', 
`\.[\\special]', and `\.[\\setlanguage]' as if they were extensions. 
These commands are actually primitives of \TeX, and they should 
appear in all implementations of the system; but let's try to imagine 
that they aren't. Then the program below illustrates how a person 
could add them. 

Sometimes, of course, an extension will require changes to \TeX\ itself; 
no system of hooks could be complete enough for all conceivable extensions. 
The features associated with `\.[\\write]' are almost all confined to the 
following paragraphs, but there are small parts of the |print_ln| and 
|print_char| procedures that were introduced specifically to \.[\\write] 
characters. Furthermore one of the token lists recognized by the scanner 
is a |write_text|; and there are a few other miscellaneous places where we 
have already provided for some aspect of \.[\\write].  The goal of a \TeX\ 
extender should be to minimize alterations to the standard parts of the 
program, and to avoid them completely if possible. He or she should also 
be quite sure that there's no easy way to accomplish the desired goals 
with the standard features that \TeX\ already has. ``Think thrice before 
extending,'' because that may save a lot of work, and it will also keep 
incompatible extensions of \TeX\ from proliferating. 
(*system dependencies*) 
(*extensions to \TeX*) 


MODULE1341
First let's consider the format of whatsit nodes that are used to represent 
the data associated with \.[\\write] and its relatives. Recall that a whatsit 
has |type=whatsit_node|, and the |subtype| is supposed to distinguish 
different kinds of whatsits. Each node occupies two or more words; the 
exact number is immaterial, as long as it is readily determined from the 
|subtype| or other data. 

We shall introduce five |subtype| values here, corresponding to the 
control sequences \.[\\openout], \.[\\write], \.[\\closeout], \.[\\special], and 
\.[\\setlanguage]. The second word of I/O whatsits has a |write_stream| field 
that identifies the write-stream number (0 to 15, or 16 for out-of-range and 
positive, or 17 for out-of-range and negative). 
In the case of \.[\\write] and \.[\\special], there is also a field that 
points to the reference count of a token list that should be sent. In the 
case of \.[\\openout], we need three words and three auxiliary subfields 
to hold the string numbers for name, area, and extension. 


MODULE1342
The sixteen possible \.[\\write] streams are represented by the |write_file| 
array. The |j|th file is open if and only if |write_open[j]=true|. The last 
two streams are special; |write_open[16]| represents a stream number 
greater than 15, while |write_open[17]| represents a negative stream number, 
and both of these variables are always |false|. 


MODULE1343

MODULE1344
Extensions might introduce new command codes; but it's best to use 
|extension| with a modifier, whenever possible, so that |main_control| 
stays the same. 


MODULE1345
The variable |write_loc| just introduced is used to provide an 
appropriate error message in case of ``runaway'' write texts. 


MODULE1346

MODULE1347
When an |extension| command occurs in |main_control|, in any mode, 
the |do_extension| routine is called. 


MODULE1348

MODULE1349
Here is a subroutine that creates a whatsit node having a given |subtype| 
and a given number of words. It initializes only the first word of the whatsit, 
and appends it to the current list. 


MODULE1350
The next subroutine uses |cur_chr| to decide what sort of whatsit is 
involved, and also inserts a |write_stream| number. 


MODULE1351

MODULE1352
When `\.[\\write 12\[...\]]' appears, we scan the token list `\.[\[...\]]' 
without expanding its macros; the macros will be expanded later when this 
token list is rescanned. 


MODULE1353

MODULE1354
When `\.[\\special\[...\]]' appears, we expand the macros in the token 
list as in \.[\\xdef] and \.[\\mark]. 


MODULE1355
Each new type of node that appears in our data structure must be capable 
of being displayed, copied, destroyed, and so on. The routines that we 
need for write-oriented whatsits are somewhat like those for mark nodes; 
other extensions might, of course, involve more subtlety here. 


MODULE1356

MODULE1357

MODULE1358

MODULE1359

INSERT: 'Incorporate a whatsit node into a vbox'
=do_nothing 


MODULE1360

INSERT: 'Incorporate a whatsit node into an hbox'
=do_nothing 


MODULE1361

INSERT: 'Let |d| be the width of the whatsit |p|'
=d:=0 


MODULE1362

MODULE1363

INSERT: 'Advance \(p)past a whatsit node in the \(p)pre-hyphenation loop'
= 
adv_past(s) 


MODULE1364

MODULE1365

MODULE1366

MODULE1367

MODULE1368
After all this preliminary shuffling, we come finally to the routines 
that actually send out the requested data. Let's do \.[\\special] first 
(it's easier). 


MODULE1369
To write a token list, we must run it through \TeX's scanner, expanding 
macros and \.[\\the] and \.[\\number], etc. This might cause runaways, 
if a delimited macro parameter isn't matched, and runaways would be 
extremely confusing since we are calling on \TeX's scanner in the middle 
of a \.[\\shipout] command. Therefore we will put a dummy control sequence as 
a ``stopper,'' right after the token list. This control sequence is 
artificially defined to be \.[\\outer]. 
(*end_write_][\.[\\endwrite]*) 


MODULE1370

MODULE1371
The final line of this routine is slightly subtle; at least, the author 
didn't think about it until getting burnt! There is a used-up token list 
(*Knuth, Donald Ervin*) 
on the stack, namely the one that contained |end_write_token|. (We 
insert this artificial `\.[\\endwrite]' to prevent runaways, as explained 
above.) If it were not removed, and if there were numerous writes on a 
single page, the stack would overflow. 


MODULE1372

MODULE1373
The |out_what| procedure takes care of outputting whatsit nodes for 
|vlist_out| and |hlist_out|\kern-.3pt. 


MODULE1374
We don't implement \.[\\write] inside of leaders. (The reason is that 
the number of times a leader box appears might be different in different 
implementations, due to machine-dependent rounding in the glue calculations.) 
(*leaders*) 


MODULE1375
The presence of `\.[\\immediate]' causes the |do_extension| procedure 
to descend to one level of recursion. Nothing happens unless \.[\\immediate] 
is followed by `\.[\\openout]', `\.[\\write]', or `\.[\\closeout]'. 
(*recursion*) 


MODULE1376
The \.[\\language] extension is somewhat different. 
We need a subroutine that comes into play when a character of 
a non-|clang| language is being appended to the current paragraph. 


MODULE1377

MODULE1378

SPECIAL MODULE 1379:  \[54] System-dependent changes.

This section should be replaced, if necessary, by any special 
modifications of the program 
that are necessary to make \TeX\ work at a particular installation. 
It is usually best to design your change file so that all changes to 
previous sections preserve the section numbering; then everybody's version 
will be consistent with the published program. More extensive changes, 
which introduce new sections, can be inserted here; then only the index 
itself will get a new section number. 
(*system dependencies*) 


SPECIAL MODULE 1380:  \[55] Index.

Here is where you can find all uses of each identifier in the program, 
with underlined entries pointing to where the identifier was defined. 
If the identifier is only one letter long, however, you get to see only 
the underlined entries. [\sl All references are to section numbers instead of 
page numbers.] 

This index also lists error messages and other aspects of the program 
that you might want to look up some day. For example, the entry 
for ``system dependencies'' lists all sections that should receive 
special attention from people who are installing \TeX\ in a new 
operating environment. A list of various things that can't happen appears 
under ``this can't happen''. Approximately 40 sections are listed under 
``inner loop''; these account for about 60\pct! of \TeX's running time, 
exclusive of input and output. 
