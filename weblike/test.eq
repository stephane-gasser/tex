'Accumulate the constant until |cur_tok| is not a suitable digit'
'Accumulate the constant until |cur_tok| is not a suitable digit'
'Accumulate the constant...'
'Accumulate the constant until |cur_tok| is not a suitable digit'
'Add the width of node |s| to |act_width|'
'Add the width of node |s| to |act_width|'
'Add the width of node |s| to |b...'
'Add the width of node |s| to |break_width|'
'Add the width of node |s| to |break_width|'
'Add the width of node |s| to |break_width|'
'Add the width of node |s| to |disc_width|'
'Add the width of node |s| to |disc_width|'
'Adjust \(f)for the magnification ratio'
'Adjust \(f)for the magnification ratio'
'Adjust \(f)for the setting of \.{\\globaldefs}'
'Adjust \(f)for the setting of \.{\\globaldefs}'
'Adjust \(s)|shift_up| and |shift_down| for the case of a fraction line'
'Adjust \(s)|shift_up| and |shift_down| for the case of a fraction line'
'Adjust \(s)|shift_up| and |shift_down| for the case of no fraction line'
'Adjust \(s)|shift_up| and |shift_down| for the case of no fraction line'
'Adjust \(s)|shift_up| and |shift_down| for the case of no fraction line'
'Adjust \(s)|shift_up| and |shift_down| for the case of no fraction line'
'Advance \(c)|cur_p| to the node following the present string of characters'
'Advance \(c)|cur_p| to the node following the present string of characters'
'Advance \(c)|cur_p| to the node following the present string...'
'Advance \(c)|cur_p| to the node following the present string of characters'
'Advance \(p)past a whatsit node in the \(l)|line_break| loop'
'Advance \(p)past a whatsit node in the \(l)|line_break| loop'
'Advance \(p)past a whatsit node in the \(p)pre-hyphenation loop'
'Advance \(p)past a whatsit node in the \(p)pre-hyphenation loop'
'Advance \(r)|r|; |goto found| if the parameter delimiter has been fully matched, otherwise |goto continue|'
'Advance \(r)|r|; |goto found| if the parameter delimiter has been fully matched, otherwise |goto continue|'
'Advance \(r)|r|; |goto found| if the parameter delimiter has been fully...'
'Advance \(r)|r|; |goto found| if the parameter delimiter has been fully matched, otherwise |goto continue|'
'Allocate entire node |p| and |goto found|'
'Allocate entire node |p| and |goto found|'
'Allocate entire...'
'Allocate entire node |p| and |goto found|'
'Allocate from the top of node |p| and |goto found|'
'Allocate from the top of node |p| and |goto found|'
'Allocate from the top...'
'Allocate from the top of node |p| and |goto found|'
'Apologize for inability to do the operation now, unless \.{\\unskip} follows non-glue'
'Apologize for inability to do the operation now, unless \.{\\unskip} follows non-glue'
'Apologize for inability to do the operation...'
'Apologize for inability to do the operation now, unless \.{\\unskip} follows non-glue'
'Apologize for not loading the font, |goto done|'
'Apologize for not loading the font, |goto done|'
'Apologize for not loading...'
'Apologize for not loading the font, |goto done|'
'Append a ligature and/or kern to the translation...'
'Append a ligature and/or kern to the translation; |goto continue| if the stack of inserted ligatures is nonempty'
'Append a ligature and/or kern to the translation; |goto continue| if the stack of inserted ligatures is nonempty'
'Append a ligature and/or kern to the translation; |goto continue| if the stack of inserted ligatures is nonempty'
'Append a new leader node ...'
'Append a new leader node that uses |cur_box|'
'Append a new leader node that uses |cur_box|'
'Append a new leader node that uses |cur_box|'
'Append a new letter or a hyphen level'
'Append a new letter or a hyphen level'
'Append a new letter or hyphen'
'Append a new letter or hyphen'
'Append a normal inter-word space to the current list, then |goto big_switch|'
'Append a normal inter-word space to the current list, then |goto big_switch|'
'Append a normal inter-word space...'
'Append a normal inter-word space to the current list, then |goto big_switch|'
'Append a penalty node, if a nonzero penalty is appropriate'
'Append a penalty node, if a nonzero penalty is appropriate'
'Append an insertion to the current page and |goto contribute|'
'Append an insertion to the current page and |goto contribute|'
'Append any |new_hlist| entries for |q|, and any appropriate penalties'
'Append any |new_hlist| entries for |q|, and any appropriate penalties'
'Append box |cur_box| to the current list, shifted by |box_context|'
'Append box |cur_box| to the current list, shifted by |box_context|'
'Append box |cur_box| to the current...'
'Append box |cur_box| to the current list, shifted by |box_context|'
'Append character |cur_chr| and the following characters (if~any) to the current hlist in the current font; |goto reswitch| when a non-character has been fetched'
'Append character |cur_chr| and the following characters (if~any) to the current hlist in the current font; |goto reswitch| when a non-character has been fetched'
'Append character |cur_chr|...'
'Append character |cur_chr| and the following characters (if~any) to the current hlist in the current font; |goto reswitch| when a non-character has been fetched'
'Append characters of |hu[j..@,]| to |major_tail|, advancing~|j|'
'Append characters of |hu[j..@,]| to |major_tail|, advancing~|j|'
'Append characters of |hu[j..@,]|...'
'Append characters of |hu[j..@,]| to |major_tail|, advancing~|j|'
'Append inter-element spacing based on |r_type| and |t|'
'Append inter-element spacing based on |r_type| and |t|'
'Append tabskip glue and an empty box to list |u|, and update |s| and |t| as the prototype nodes are passed'
'Append tabskip glue and an empty box to list |u|, and update |s| and |t| as the prototype nodes are passed'
'Append tabskip glue and an empty box to list |u|...'
'Append tabskip glue and an empty box to list |u|, and update |s| and |t| as the prototype nodes are passed'
'Append the accent with appropriate kerns, then set |p:=q|'
'Append the accent with appropriate kerns, then set |p:=q|'
'Append the accent with appropriate kerns...'
'Append the accent with appropriate kerns, then set |p:=q|'
'Append the current tabskip glue to the preamble list'
'Append the current tabskip glue to the preamble list'
'Append the display and perhaps also the equation number'
'Append the display and perhaps also the equation number'
'Append the glue or equation number following the display'
'Append the glue or equation number following the display'
'Append the glue or equation number preceding the display'
'Append the glue or equation number preceding the display'
'Append the new box to the current vertical list, followed by the list of special nodes taken out of the box by the packager'
'Append the new box to the current vertical list, followed by the list of special nodes taken out of the box by the packager'
'Append the new box to the current vertical list...'
'Append the new box to the current vertical list, followed by the list of special nodes taken out of the box by the packager'
'Append the value |n| to list |p|'
'Append the value |n| to list |p|'
'Assign the values |depth_threshold:=show_box_depth| and |breadth_max:=show_box_breadth|'
'Assign the values |depth_threshold:=show_box_depth| and |breadth_max:=show_box_breadth|'
'Assign the values |depth_threshold:=show_box_depth|...'
'Assign the values |depth_threshold:=show_box_depth| and |breadth_max:=show_box_breadth|'
'Assignments '
'Assignments '
'Attach list |p| to the current list, and record its length; then finish up and |return|'
'Attach list |p| to the current list, and record its length; then finish up and |return|'
'Attach list |p| to the current...'
'Attach list |p| to the current list, and record its length; then finish up and |return|'
'Attach the limits to |y| and adjust |height(v)|, |depth(v)| to account for their presence'
'Attach the limits to |y| and adjust |height(v)|, |depth(v)| to account for their presence'
'Attach the limits to |y| and adjust |height(v)|, |depth(v)|...'
'Attach the limits to |y| and adjust |height(v)|, |depth(v)| to account for their presence'
'Back up an outer control sequence so that it can be reread'
'Back up an outer control sequence so that it can be reread'
'Basic print...'
'Basic printing procedures'
'Basic printing procedures'
'Basic printing procedures'
'Basic printing...'
'Basic printing procedures'
'Break the current page at node |p|, put it in box~255, and put the remaining nodes on the contribution list'
'Break the current page at node |p|, put it in box~255, and put the remaining nodes on the contribution list'
'Break the current page at node |p|, put it...'
'Break the current page at node |p|, put it in box~255, and put the remaining nodes on the contribution list'
'Break the paragraph at the chosen breakpoints, justify the resulting lines to the correct widths, and append them to the current vertical list'
'Break the paragraph at the chosen breakpoints, justify the resulting lines to the correct widths, and append them to the current vertical list'
'Break the paragraph at the chosen...'
'Break the paragraph at the chosen breakpoints, justify the resulting lines to the correct widths, and append them to the current vertical list'
'Calculate the length, |l|, ...'
'Calculate the length, |l|, and the shift amount, |s|, of the display lines'
'Calculate the length, |l|, and the shift amount, |s|, of the display lines'
'Calculate the length, |l|, and the shift amount, |s|, of the display lines'
'Calculate the natural width, |w|, by which the characters of the final line extend to the right of the reference point, plus two ems; or set |w:=max_dimen| if the non-blank information on that line is affected by stretching or shrinking'
'Calculate the natural width, |w|, by which the characters of the final line extend to the right of the reference point, plus two ems; or set |w:=max_dimen| if the non-blank information on that line is affected by stretching or shrinking'
'Calculate the natural width, |w|, by which...'
'Calculate the natural width, |w|, by which the characters of the final line extend to the right of the reference point, plus two ems; or set |w:=max_dimen| if the non-blank information on that line is affected by stretching or shrinking'
'Call the packaging subroutine, setting |just_box| to the justified box'
'Call the packaging subroutine, setting |just_box| to the justified box'
'Call the packaging subroutine...'
'Call the packaging subroutine, setting |just_box| to the justified box'
'Call |try_break| if |cur_p| is a legal breakpoint...'
'Call |try_break| if |cur_p| is a legal breakpoint; on the second pass, also try to hyphenate the next word, if |cur_p| is a glue node; then advance |cur_p| to the next node of the paragraph that could possibly be a legal breakpoint'
'Call |try_break| if |cur_p| is a legal breakpoint; on the second pass, also try to hyphenate the next word, if |cur_p| is a glue node; then advance |cur_p| to the next node of the paragraph that could possibly be a legal breakpoint'
'Call |try_break| if |cur_p| is a legal breakpoint; on the second pass, also try to hyphenate the next word, if |cur_p| is a glue node; then advance |cur_p| to the next node of the paragraph that could possibly be a legal breakpoint'
'Carry out a ligature replacement, updating the cursor structure and possibly advancing~|j|; |goto continue| if the cursor doesn''t advance, otherwise |goto done|'
'Carry out a ligature replacement, updating the cursor structure and possibly advancing~|j|; |goto continue| if the cursor doesn''t advance, otherwise |goto done|'
'Carry out a ligature replacement, updating the cursor structure...'
'Carry out a ligature replacement, updating the cursor structure and possibly advancing~|j|; |goto continue| if the cursor doesn''t advance, otherwise |goto done|'
'Case statement to copy different types and set |words| to the number of initial words not yet copied'
'Case statement to copy different types and set |words| to the number of initial words not yet copied'
'Case statement to copy...'
'Case statement to copy different types and set |words| to the number of initial words not yet copied'
'Cases for noads that can follow a |bin_noad|'
'Cases for noads that can follow a |bin_noad|'
'Cases for nodes that can appear in an mlist, after which we |goto done_with_node|'
'Cases for nodes that can appear in an mlist, after which we |goto done_with_node|'
'Cases for nodes that can appear in an mlist...'
'Cases for nodes that can appear in an mlist, after which we |goto done_with_node|'
'Cases of |flush_node_list| that arise in mlists only'
'Cases of |flush_node_list| that arise in mlists only'
'Cases of |flush_node_list| that arise...'
'Cases of |flush_node_list| that arise in mlists only'
'Cases of |handle...'
'Cases of |handle_right_brace| where a |right_brace| triggers a delayed action'
'Cases of |handle_right_brace| where a |right_brace| triggers a delayed action'
'Cases of |handle_right_brace| where a |right_brace| triggers a delayed action'
'Cases of |handle_right_brace|...'
'Cases of |handle_right_brace| where a |right_brace| triggers a delayed action'
'Cases of |main_control| that are for extensions to \TeX'
'Cases of |main_control| that are for extensions to \TeX'
'Cases of |main_control| that are for extensions...'
'Cases of |main_control| that are for extensions to \TeX'
'Cases of |main_control| that are not part of the inner loop'
'Cases of |main_control| that are not part of the inner loop'
'Cases of |main_control| that build boxes and lists'
'Cases of |main_control| that build boxes and lists'
'Cases of |main_control| that build...'
'Cases of |main_control| that build boxes and lists'
'Cases of |main_control| that don''t depend on |mode|'
'Cases of |main_control| that don''t depend on |mode|'
'Cases of |main_control| that don''t...'
'Cases of |main_control| that don''t depend on |mode|'
'Cases of |print_cmd_chr| for symbolic printing of primitives'
'Cases of |print_cmd_chr| for symbolic printing of primitives'
'Cases of |print_cmd_chr|...'
'Cases of |print_cmd_chr| for symbolic printing of primitives'
'Cases of |show_node_list| that arise in mlists only'
'Cases of |show_node_list| that arise in mlists only'
'Cases of |show_node_list| that arise...'
'Cases of |show_node_list| that arise in mlists only'
'Cases where character is ignored'
'Cases where character is ignored'
'Change buffered instruction to |y| or |w| and |goto found|'
'Change buffered instruction to |y| or |w| and |goto found|'
'Change buffered instruction to |z| or |x| and |goto found|'
'Change buffered instruction to |z| or |x| and |goto found|'
'Change current mode to |-vmode| for \.{\\halign}, |-hmode| for \.{\\valign}'
'Change current mode to |-vmode| for \.{\\halign}, |-hmode| for \.{\\valign}'
'Change current mode...'
'Change current mode to |-vmode| for \.{\\halign}, |-hmode| for \.{\\valign}'
'Change discretionary to compulsory and set |disc_break:=true|'
'Change discretionary to compulsory and set |disc_break:=true|'
'Change discretionary to compulsory...'
'Change discretionary to compulsory and set |disc_break:=true|'
'Change font |dvi_f| to |f|'
'Change font |dvi_f| to |f|'
'Change state if necessary, and |goto switch| if the current character should be ignored, or |goto reswitch| if the current character changes to another'
'Change state if necessary, and |goto switch| if the current character should be ignored, or |goto reswitch| if the current character changes to another'
'Change state if necessary...'
'Change state if necessary, and |goto switch| if the current character should be ignored, or |goto reswitch| if the current character changes to another'
'Change the case of the token in |p|, if a change is appropriate'
'Change the case of the token in |p|, if a change is appropriate'
'Change the current style and |goto delete_q|'
'Change the current style and |goto delete_q|'
'Change the interaction level and |return|'
'Change the interaction level and |return|'
'Change the interaction...'
'Change the interaction level and |return|'
'Change this node to a style node followed by the correct choice, then |goto done_with_node|'
'Change this node to a style node followed by the correct choice, then |goto done_with_node|'
'Change this node to a style node...'
'Change this node to a style node followed by the correct choice, then |goto done_with_node|'
'Character |k| cannot be printed'
'Character |k| cannot be printed'
'Character |s| is the current new-line character'
'Character |s| is the current new-line character'
'Check flags of unavailable nodes'
'Check flags of unavailable nodes'
'Check flags...'
'Check flags of unavailable nodes'
'Check for charlist cycle'
'Check for charlist cycle'
'Check for improper alignment in displayed math'
'Check for improper alignment in displayed math'
'Check if node |p| is a new champion breakpoint; then \(go)...'
'Check if node |p| is a new champion breakpoint; then \(go)|goto done| if |p| is a forced break or if the page-so-far is already too full'
'Check if node |p| is a new champion breakpoint; then \(go)|goto done| if |p| is a forced break or if the page-so-far is already too full'
'Check if node |p| is a new champion breakpoint; then \(go)|goto done| if |p| is a forced break or if the page-so-far is already too full'
'Check if node |p| is a new champion breakpoint; then \(if)...'
'Check if node |p| is a new champion breakpoint; then \(if)if it is time for a page break, prepare for output, and either fire up the user''s output routine and |return| or ship out the page and |goto done|'
'Check if node |p| is a new champion breakpoint; then \(if)if it is time for a page break, prepare for output, and either fire up the user''s output routine and |return| or ship out the page and |goto done|'
'Check if node |p| is a new champion breakpoint; then \(if)if it is time for a page break, prepare for output, and either fire up the user''s output routine and |return| or ship out the page and |goto done|'
'Check single-word |avail| list'
'Check single-word |avail| list'
'Check single-word...'
'Check single-word |avail| list'
'Check that another \.\$ follows'
'Check that another \.\$ follows'
'Check that the necessary fonts for math symbols are present; if not, flush the current math lists and set |danger:=true|'
'Check that the necessary fonts for math symbols are present; if not, flush the current math lists and set |danger:=true|'
'Check that the necessary fonts for math symbols are present; if not, flush the current math lists and set |danger:=true|'
'Check that the necessary fonts for math symbols are present; if not, flush the current math lists and set |danger:=true|'
'Check that the necessary fonts...'
'Check that the necessary fonts for math symbols are present; if not, flush the current math lists and set |danger:=true|'
'Check that the nodes following |hb| permit hyphenation and that at least |l_hyf+r_hyf| letters have been found, otherwise |goto done1|'
'Check that the nodes following |hb| permit hyphenation and that at least |l_hyf+r_hyf| letters have been found, otherwise |goto done1|'
'Check that the nodes following |hb| permit hyphenation...'
'Check that the nodes following |hb| permit hyphenation and that at least |l_hyf+r_hyf| letters have been found, otherwise |goto done1|'
'Check the ``constant'''' values for consistency'
'Check the ``constant'''' values for consistency'
'Check the ``constant'''' values...'
'Check the ``constant'''' values for consistency'
'Check the ``constant''''...'
'Check the ``constant'''' values for consistency'
'Check the pool check sum'
'Check the pool check sum'
'Check variable-size |avail| list'
'Check variable-size |avail| list'
'Check variable-size...'
'Check variable-size |avail| list'
'Clean up the memory by removing the break nodes'
'Clean up the memory by removing the break nodes'
'Clean... '
'Clean up the memory by removing the break nodes'
'Clear dimensions to zero'
'Clear dimensions to zero'
'Clear off top level from |save_stack|'
'Clear off top level from |save_stack|'
'Clear off...'
'Clear off top level from |save_stack|'
'Close the format file'
'Close the format file'
'Coerce glue to a dimension'
'Coerce glue to a dimension'
'Coerce glue...'
'Coerce glue to a dimension'
'Compiler directives'
'Compiler directives'
'Complain about an undefined family and set |cur_i| null'
'Complain about an undefined family and set |cur_i| null'
'Complain about an undefined family...'
'Complain about an undefined family and set |cur_i| null'
'Complain about an undefined macro'
'Complain about an undefined macro'
'Complain about missing \.{\\endcsname}'
'Complain about missing \.{\\endcsname}'
'Complain about unknown unit and |goto done2|'
'Complain about unknown unit and |goto done2|'
'Complain about unknown unit...'
'Complain about unknown unit and |goto done2|'
'Complain that \.{\\the} can''t do this; give zero result'
'Complain that \.{\\the} can''t do this; give zero result'
'Complain that the user should have said \.{\\mathaccent}'
'Complain that the user should have said \.{\\mathaccent}'
'Compleat the incompleat noad'
'Compleat the incompleat noad'
'Compleat... '
'Compleat the incompleat noad'
'Complete a potentially long \.{\\show} command'
'Complete a potentially long \.{\\show} command'
'Compute result of |multiply| or |divide|, put it in |cur_val|'
'Compute result of |multiply| or |divide|, put it in |cur_val|'
'Compute result of |multiply| or |divide|...'
'Compute result of |multiply| or |divide|, put it in |cur_val|'
'Compute result of |register| or |advance|, put it in |cur_val|'
'Compute result of |register| or |advance|, put it in |cur_val|'
'Compute result of |register| or |advance|...'
'Compute result of |register| or |advance|, put it in |cur_val|'
'Compute the amount of skew'
'Compute the amount of skew'
'Compute the badness, |b|, of the current page, using |awful_bad| if the box is too full'
'Compute the badness, |b|, of the current page, using |awful_bad| if the box is too full'
'Compute the badness, |b|, of the current page...'
'Compute the badness, |b|, of the current page, using |awful_bad| if the box is too full'
'Compute the badness, |b|, using |awful_bad| if the box is too full'
'Compute the badness, |b|, using |awful_bad| if the box is too full'
'Compute the badness, |b|, using |awful_bad| if the box is too full'
'Compute the badness, |b|, using |awful_bad| if the box is too full'
'Compute the demerits, |d|, from |r| to |cur_p|'
'Compute the demerits, |d|, from |r| to |cur_p|'
'Compute the discretionary |break...'
'Compute the discretionary |break_width| values'
'Compute the discretionary |break_width| values'
'Compute the discretionary |break_width| values'
'Compute the hash code |h|'
'Compute the hash code |h|'
'Compute the magic offset'
'Compute the magic offset'
'Compute the minimum suitable height, |w|, and the corresponding number of extension steps, |n|; also set |width(b)|'
'Compute the minimum suitable height, |w|, and the corresponding number of extension steps, |n|; also set |width(b)|'
'Compute the minimum suitable height, |w|, and...'
'Compute the minimum suitable height, |w|, and the corresponding number of extension steps, |n|; also set |width(b)|'
'Compute the new line width'
'Compute the new line width'
'Compute the register location |l| and its type |p|...'
'Compute the register location |l| and its type |p|; but |return| if invalid'
'Compute the register location |l| and its type |p|; but |return| if invalid'
'Compute the register location |l| and its type |p|; but |return| if invalid'
'Compute the sum of two glue specs'
'Compute the sum of two glue specs'
'Compute the trie op code, |v|, and set |l:=0|'
'Compute the trie op code, |v|, and set |l:=0|'
'Compute the trie op code, |v|...'
'Compute the trie op code, |v|, and set |l:=0|'
'Compute the values of |break...'
'Compute the values of |break_width|'
'Compute the values of |break_width|'
'Compute the values of |break_width|'
'Consider a node with matching width...'
'Consider a node with matching width; |goto found| if it''s a hit'
'Consider a node with matching width; |goto found| if it''s a hit'
'Consider a node with matching width; |goto found| if it''s a hit'
'Consider the demerits for a line from |r| to |cur_p|...'
'Consider the demerits for a line from |r| to |cur_p|; deactivate node |r| if it should no longer be active; then |goto continue| if a line from |r| to |cur_p| is infeasible, otherwise record a new feasible break'
'Consider the demerits for a line from |r| to |cur_p|; deactivate node |r| if it should no longer be active; then |goto continue| if a line from |r| to |cur_p| is infeasible, otherwise record a new feasible break'
'Consider the demerits for a line from |r| to |cur_p|; deactivate node |r| if it should no longer be active; then |goto continue| if a line from |r| to |cur_p| is infeasible, otherwise record a new feasible break'
'Constants in the outer block'
'Constants in the outer block'
'Constants... '
'Constants in the outer block'
'Construct a box with limits above and below it, skewed by |delta|'
'Construct a box with limits above and below it, skewed by |delta|'
'Construct a box with limits above and below it...'
'Construct a box with limits above and below it, skewed by |delta|'
'Construct a sub/superscript combination box |x|, with the superscript offset by |delta|'
'Construct a sub/superscript combination box |x|, with the superscript offset by |delta|'
'Construct a sub/superscript combination box |x|...'
'Construct a sub/superscript combination box |x|, with the superscript offset by |delta|'
'Construct a subscript box |x| when there is no superscript'
'Construct a subscript box |x| when there is no superscript'
'Construct a superscript box |x|'
'Construct a superscript box |x|'
'Construct a vlist box for the fraction, according to |shift_up| and |shift_down|'
'Construct a vlist box for the fraction, according to |shift_up| and |shift_down|'
'Construct a vlist box for the fraction...'
'Construct a vlist box for the fraction, according to |shift_up| and |shift_down|'
'Construct an extensible character in a new box |b|, using recipe |rem_byte(q)| and font |f|'
'Construct an extensible character in a new box |b|, using recipe |rem_byte(q)| and font |f|'
'Construct an extensible...'
'Construct an extensible character in a new box |b|, using recipe |rem_byte(q)| and font |f|'
'Contribute an entire group to the current parameter'
'Contribute an entire group to the current parameter'
'Contribute the recently matched tokens to the current parameter, and |goto continue| if a partial match is still in effect; but abort if |s=null|'
'Contribute the recently matched tokens to the current parameter, and |goto continue| if a partial match is still in effect; but abort if |s=null|'
'Contribute the recently matched tokens to the current parameter...'
'Contribute the recently matched tokens to the current parameter, and |goto continue| if a partial match is still in effect; but abort if |s=null|'
'Convert \(a)a final |bin_noad| to an |ord_noad|'
'Convert \(a)a final |bin_noad| to an |ord_noad|'
'Convert \(c)|cur_val| to a lower level'
'Convert \(c)|cur_val| to a lower level'
'Convert \(m)math glue to ordinary glue'
'Convert \(m)math glue to ordinary glue'
'Convert \(n)|nucleus(q)| to an hlist and attach the sub/superscripts'
'Convert \(n)|nucleus(q)| to an hlist and attach the sub/superscripts'
'Copy the tabskip glue between columns'
'Copy the tabskip glue between columns'
'Copy the tabskip glue...'
'Copy the tabskip glue between columns'
'Copy the templates from node |cur_loop| into node |p|'
'Copy the templates from node |cur_loop| into node |p|'
'Copy the token list'
'Copy the token list'
'Create a character node |p| for |nucleus(q)|, possibly followed by a kern node for the italic correction, and set |delta| to the italic correction if a subscript is present'
'Create a character node |p| for |nucleus(q)|, possibly followed by a kern node for the italic correction, and set |delta| to the italic correction if a subscript is present'
'Create a character node |p| for |nucleus(q)|...'
'Create a character node |p| for |nucleus(q)|, possibly followed by a kern node for the italic correction, and set |delta| to the italic correction if a subscript is present'
'Create a character node |q| for the next character, but set |q:=null| if problems arise'
'Create a character node |q| for the next character, but set |q:=null| if problems arise'
'Create a character node |q| for the next...'
'Create a character node |q| for the next character, but set |q:=null| if problems arise'
'Create a new glue specification whose width is |cur_val|...'
'Create a new glue specification whose width is |cur_val|; scan for its stretch and shrink components'
'Create a new glue specification whose width is |cur_val|; scan for its stretch and shrink components'
'Create a new glue specification whose width is |cur_val|; scan for its stretch and shrink components'
'Create a page insertion node with |subtype(r)=qi(n)|, and include the glue correction for box |n| in the current page state'
'Create a page insertion node with |subtype(r)=qi(n)|, and include the glue correction for box |n| in the current page state'
'Create a page insertion node...'
'Create a page insertion node with |subtype(r)=qi(n)|, and include the glue correction for box |n| in the current page state'
'Create an active breakpoint representing the beginning of the paragraph'
'Create an active breakpoint representing the beginning of the paragraph'
'Create and append a discretionary node as an alternative to the unhyphenated word, and continue to develop both branches until they become equivalent'
'Create and append a discretionary node as an alternative to the unhyphenated word, and continue to develop both branches until they become equivalent'
'Create and append a discretionary node as an alternative...'
'Create and append a discretionary node as an alternative to the unhyphenated word, and continue to develop both branches until they become equivalent'
'Create equal-width boxes |x| and |z| for the numerator and denom...'
'Create equal-width boxes |x| and |z| for the numerator and denominator, and compute the default amounts |shift_up| and |shift_down| by which they are displaced from the baseline'
'Create equal-width boxes |x| and |z| for the numerator and denominator, and compute the default amounts |shift_up| and |shift_down| by which they are displaced from the baseline'
'Create equal-width boxes |x| and |z| for the numerator and denominator, and compute the default amounts |shift_up| and |shift_down| by which they are displaced from the baseline'
'Create new active nodes for the best feasible breaks just found'
'Create new active nodes for the best feasible breaks just found'
'Create new active nodes...'
'Create new active nodes for the best feasible breaks just found'
'Create the |format_ident|, open the format file, and inform the user that dumping has begun'
'Create the |format_ident|, open the format file, and inform the user that dumping has begun'
'Create the |format_ident|...'
'Create the |format_ident|, open the format file, and inform the user that dumping has begun'
'Current |mem| equivalent of glue parameter number |n|'
'Current |mem| equivalent of glue parameter number |n|'
'Current |mem| equivalent of glue parameter...'
'Current |mem| equivalent of glue parameter number |n|'
'Deactivate node |r|'
'Deactivate node |r|'
'Declare act...'
'Declare action procedures for use by |main_control|'
'Declare action procedures for use by |main_control|'
'Declare action procedures for use by |main_control|'
'Declare action...'
'Declare action procedures for use by |main_control|'
'Declare math...'
'Declare math...'
'Declare procedures for preprocessing hyph...'
'Declare procedures for preprocessing hyphenation patterns'
'Declare procedures for preprocessing hyphenation patterns'
'Declare procedures for preprocessing hyphenation patterns'
'Declare procedures needed for displaying the elements of mlists'
'Declare procedures needed for displaying the elements of mlists'
'Declare procedures needed for displaying...'
'Declare procedures needed for displaying the elements of mlists'
'Declare procedures needed in |do_ext...'
'Declare procedures needed in |do_extension|'
'Declare procedures needed in |do_extension|'
'Declare procedures needed in |do_extension|'
'Declare procedures needed in |hlist_out|, |vlist_out|'
'Declare procedures needed in |hlist_out|, |vlist_out|'
'Declare procedures that scan font-related stuff'
'Declare procedures that scan font-related stuff'
'Declare procedures that scan restricted classes of integers'
'Declare procedures that scan restricted classes of integers'
'Declare subprocedures for |line_break|'
'Declare subprocedures for |line_break|'
'Declare subprocedures for |prefixed_command|'
'Declare subprocedures for |prefixed_command|'
'Declare subprocedures for |var_delimiter|'
'Declare subprocedures for |var_delimiter|'
'Declare the function called |fin_mlist|'
'Declare the function called |fin_mlist|'
'Declare the function called |open_fmt_file|'
'Declare the function called |open_fmt_file|'
'Declare the function called |reconstitute|'
'Declare the function called |reconstitute|'
'Declare the procedure called |align_peek|'
'Declare the procedure called |align_peek|'
'Declare the procedure called |fire_up|'
'Declare the procedure called |fire_up|'
'Declare the procedure called |get_preamble_token|'
'Declare the procedure called |get_preamble_token|'
'Declare the procedure called |handle_right_brace|'
'Declare the procedure called |handle_right_brace|'
'Declare the procedure called |init_span|'
'Declare the procedure called |init_span|'
'Declare the procedure called |insert_relax|'
'Declare the procedure called |insert_relax|'
'Declare the procedure called |macro_call|'
'Declare the procedure called |macro_call|'
'Declare the procedure called |print_cmd_chr|'
'Declare the procedure called |print_cmd_chr|'
'Declare the procedure called |print_skip_param|'
'Declare the procedure called |print_skip_param|'
'Declare the procedure called |restore_trace|'
'Declare the procedure called |restore_trace|'
'Declare the procedure called |runaway|'
'Declare the procedure called |runaway|'
'Declare the procedure called |show_token_list|'
'Declare the procedure called |show_token_list|'
'Decry the invalid character and |goto restart|'
'Decry the invalid character and |goto restart|'
'Decry the invalid...'
'Decry the invalid character and |goto restart|'
'Delete \(c)|c-''0''| tokens and |goto continue|'
'Delete \(c)|c-''0''| tokens and |goto continue|'
'Delete \(c)|c-''0''| tokens...'
'Delete \(c)|c-''0''| tokens and |goto continue|'
'Delete \(t)the page-insertion nodes'
'Delete \(t)the page-insertion nodes'
'Destroy the |t| nodes following |q|, and make |r| point to the following node'
'Destroy the |t| nodes following |q|, and make |r| point to the following node'
'Destroy the |t| nodes following |q|...'
'Destroy the |t| nodes following |q|, and make |r| point to the following node'
'Determine horizontal glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine horizontal glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine horizontal glue shrink setting...'
'Determine horizontal glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine horizontal glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Determine horizontal glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Determine horizontal glue stretch setting...'
'Determine horizontal glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Determine the displacement, |d|, of the left edge of the equation, with respect to the line size |z|, assuming that |l=false|'
'Determine the displacement, |d|, of the left edge of the equation, with respect to the line size |z|, assuming that |l=false|'
'Determine the displacement, |d|, of the left edge of the equation...'
'Determine the displacement, |d|, of the left edge of the equation, with respect to the line size |z|, assuming that |l=false|'
'Determine the shrink order'
'Determine the shrink order'
'Determine the stretch order'
'Determine the stretch order'
'Determine the value of |height(r)| and the appropriate glue setting...'
'Determine the value of |height(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine the value of |height(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine the value of |height(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine the value of |width(r)| and the appropriate glue setting...'
'Determine the value of |width(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine the value of |width(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine the value of |width(r)| and the appropriate glue setting; then |return| or |goto common_ending|'
'Determine vertical glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine vertical glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine vertical glue shrink setting...'
'Determine vertical glue shrink setting, then |return| or \hbox{|goto common_ending|}'
'Determine vertical glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Determine vertical glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Determine vertical glue stretch setting...'
'Determine vertical glue stretch setting, then |return| or \hbox{|goto common_ending|}'
'Discard erroneous prefixes and |return|'
'Discard erroneous prefixes and |return|'
'Discard erroneous...'
'Discard erroneous prefixes and |return|'
'Discard the prefixes \.{\\long} and \.{\\outer} if they are irrelevant'
'Discard the prefixes \.{\\long} and \.{\\outer} if they are irrelevant'
'Discard the prefixes...'
'Discard the prefixes \.{\\long} and \.{\\outer} if they are irrelevant'
'Dispense with trivial cases of void or bad boxes'
'Dispense with trivial cases of void or bad boxes'
'Display adjustment |p|'
'Display adjustment |p|'
'Display box |p|'
'Display box |p|'
'Display choice node |p|'
'Display choice node |p|'
'Display discretionary |p|'
'Display discretionary |p|'
'Display fraction noad |p|'
'Display fraction noad |p|'
'Display glue |p|'
'Display glue |p|'
'Display insertion |p|'
'Display insertion |p|'
'Display kern |p|'
'Display kern |p|'
'Display leaders |p|'
'Display leaders |p|'
'Display ligature |p|'
'Display ligature |p|'
'Display mark |p|'
'Display mark |p|'
'Display math node |p|'
'Display math node |p|'
'Display node |p|'
'Display node |p|'
'Display normal noad |p|'
'Display normal noad |p|'
'Display penalty |p|'
'Display penalty |p|'
'Display rule |p|'
'Display rule |p|'
'Display special fields of the unset node |p|'
'Display special fields of the unset node |p|'
'Display the current context'
'Display the current context'
'Display the insertion split cost'
'Display the insertion split cost'
'Display the page break cost'
'Display the page break cost'
'Display the token $(|m|,|c|)$'
'Display the token $(|m|,|c|)$'
'Display the token ...'
'Display the token $(|m|,|c|)$'
'Display the value of |b|'
'Display the value of |b|'
'Display the value of |glue_set(p)|'
'Display the value of |glue_set(p)|'
'Display the whatsit node |p|'
'Display the whatsit node |p|'
'Display the whatsit...'
'Display the whatsit node |p|'
'Display token |p|, and |return| if there are problems'
'Display token |p|, and |return| if there are problems'
'Display token |p|...'
'Display token |p|, and |return| if there are problems'
'Do first-pass processing based on |type(q)|; |goto done_with_noad| if a noad has been fully processed, |goto check_dimensions| if it has been translated into |new_hlist(q)|, or |goto done_with_node| if a node has been fully processed'
'Do first-pass processing based on |type(q)|; |goto done_with_noad| if a noad has been fully processed, |goto check_dimensions| if it has been translated into |new_hlist(q)|, or |goto done_with_node| if a node has been fully processed'
'Do first-pass processing...'
'Do first-pass processing based on |type(q)|; |goto done_with_noad| if a noad has been fully processed, |goto check_dimensions| if it has been translated into |new_hlist(q)|, or |goto done_with_node| if a node has been fully processed'
'Do ligature or kern command, returning to |main_lig_loop| or |main_loop_wrapup| or |main_loop_move|'
'Do ligature or kern command, returning to |main_lig_loop| or |main_loop_wrapup| or |main_loop_move|'
'Do ligature or kern command...'
'Do ligature or kern command, returning to |main_lig_loop| or |main_loop_wrapup| or |main_loop_move|'
'Do magic computation'
'Do magic computation'
'Do some work that has been queued up for \.{\\write}'
'Do some work that has been queued up for \.{\\write}'
'Do some work that has been queued up...'
'Do some work that has been queued up for \.{\\write}'
'Drop current token and complain that it was unmatched'
'Drop current token and complain that it was unmatched'
'Dump a couple more things and the closing check word'
'Dump a couple more things and the closing check word'
'Dump constants for consistency check'
'Dump constants for consistency check'
'Dump regions 1 to 4 of |eqtb|'
'Dump regions 1 to 4 of |eqtb|'
'Dump regions 5 and 6 of |eqtb|'
'Dump regions 5 and 6 of |eqtb|'
'Dump the array info for internal font number |k|'
'Dump the array info for internal font number |k|'
'Dump the dynamic memory'
'Dump the dynamic memory'
'Dump the font information'
'Dump the font information'
'Dump the hash table'
'Dump the hash table'
'Dump the hyphenation tables'
'Dump the hyphenation tables'
'Dump the string pool'
'Dump the string pool'
'Dump the table of equivalents'
'Dump the table of equivalents'
'Either append the insertion node |p| after node |q|, and remove it from the current page, or delete |node(p)|'
'Either append the insertion node |p| after node |q|, and remove it from the current page, or delete |node(p)|'
'Either append the insertion node |p|...'
'Either append the insertion node |p| after node |q|, and remove it from the current page, or delete |node(p)|'
'Either insert the material specified by node |p| into the appropriate box, or hold it for the next page; also delete node |p| from the current page'
'Either insert the material specified by node |p| into the appropriate box, or hold it for the next page; also delete node |p| from the current page'
'Either insert the material specified by node |p| into...'
'Either insert the material specified by node |p| into the appropriate box, or hold it for the next page; also delete node |p| from the current page'
'Either process \.{\\ifcase} or set |b| to the value of a boolean condition'
'Either process \.{\\ifcase} or set |b| to the value of a boolean condition'
'Either process \.{\\ifcase} or set |b|...'
'Either process \.{\\ifcase} or set |b| to the value of a boolean condition'
'Empty the last bytes out of |dvi_buf|'
'Empty the last bytes out of |dvi_buf|'
'Ensure that box 255 is empty after output'
'Ensure that box 255 is empty after output'
'Ensure that box 255 is empty before output'
'Ensure that box 255 is empty before output'
'Ensure that |trie_max>=h+256|'
'Ensure that |trie_max>=h+256|'
'Enter a hyphenation exception'
'Enter a hyphenation exception'
'Enter all of the patterns into a linked trie, until coming to a right brace'
'Enter all of the patterns into a linked trie, until coming to a right brace'
'Enter all of the patterns into a linked trie...'
'Enter all of the patterns into a linked trie, until coming to a right brace'
'Enter as many hyphenation exceptions as are listed, until coming to a right brace; then |return|'
'Enter as many hyphenation exceptions as are listed, until coming to a right brace; then |return|'
'Enter as many...'
'Enter as many hyphenation exceptions as are listed, until coming to a right brace; then |return|'
'Enter |skip_blanks| state, emit a space'
'Enter |skip_blanks| state, emit a space'
'Error hand...'
'Error handling procedures'
'Error handling procedures'
'Error handling procedures'
'Error handling...'
'Error handling procedures'
'Examine node |p| in the hlist, taking account of its effect on the dimensions of the new box, or moving it to the adjustment list; then advance |p| to the next node'
'Examine node |p| in the hlist, taking account of its effect on the dimensions of the new box, or moving it to the adjustment list; then advance |p| to the next node'
'Examine node |p| in the hlist, taking account of its effect...'
'Examine node |p| in the hlist, taking account of its effect on the dimensions of the new box, or moving it to the adjustment list; then advance |p| to the next node'
'Examine node |p| in the vlist, taking account of its effect on the dimensions of the new box; then advance |p| to the next node'
'Examine node |p| in the vlist, taking account of its effect on the dimensions of the new box; then advance |p| to the next node'
'Examine node |p| in the vlist, taking account of its effect...'
'Examine node |p| in the vlist, taking account of its effect on the dimensions of the new box; then advance |p| to the next node'
'Expand a nonmacro'
'Expand a nonmacro'
'Expand macros in the token list and make |link(def_ref)| point to the result'
'Expand macros in the token list and make |link(def_ref)| point to the result'
'Expand macros in the token list and...'
'Expand macros in the token list and make |link(def_ref)| point to the result'
'Expand the next part of the input'
'Expand the next part of the input'
'Expand the token after the next token'
'Expand the token after the next token'
'Expand the token after...'
'Expand the token after the next token'
'Explain that too many dead cycles have occurred in a row'
'Explain that too many dead cycles have occurred in a row'
'Express astonishment that no number was here'
'Express astonishment that no number was here'
'Express astonishment...'
'Express astonishment that no number was here'
'Express consternation over the fact that no alignment is in progress'
'Express consternation over the fact that no alignment is in progress'
'Express consternation...'
'Express consternation over the fact that no alignment is in progress'
'Express shock at the missing left brace; |goto found|'
'Express shock at the missing left brace; |goto found|'
'Express shock...'
'Express shock at the missing left brace; |goto found|'
'Feed the macro body and its parameters to the scanner'
'Feed the macro body and its parameters to the scanner'
'Fetch a box dimension'
'Fetch a box dimension'
'Fetch a character code from some table'
'Fetch a character code from some table'
'Fetch a font dimension'
'Fetch a font dimension'
'Fetch a font integer'
'Fetch a font integer'
'Fetch a register'
'Fetch a register'
'Fetch a token list or font identifier, provided that |level=tok_val|'
'Fetch a token list or font identifier, provided that |level=tok_val|'
'Fetch a token list...'
'Fetch a token list or font identifier, provided that |level=tok_val|'
'Fetch an internal dimension and |goto attach_sign|, or fetch an internal integer'
'Fetch an internal dimension and |goto attach_sign|, or fetch an internal integer'
'Fetch an internal dimension and |goto attach_sign|...'
'Fetch an internal dimension and |goto attach_sign|, or fetch an internal integer'
'Fetch an item in the current node, if appropriate'
'Fetch an item in the current node, if appropriate'
'Fetch an item in the current node...'
'Fetch an item in the current node, if appropriate'
'Fetch something on the |page_so_far|'
'Fetch something on the |page_so_far|'
'Fetch the |dead_cycles| or the |insert_penalties|'
'Fetch the |dead_cycles| or the |insert_penalties|'
'Fetch the |par_shape| size'
'Fetch the |par_shape| size'
'Fetch the |prev_graf|'
'Fetch the |prev_graf|'
'Fetch the |space_factor| or the |prev_depth|'
'Fetch the |space_factor| or the |prev_depth|'
'Find an active node with fewest demerits'
'Find an active node with fewest demerits'
'Find an active node...'
'Find an active node with fewest demerits'
'Find hyphen locations for the word in |hc|, or |return|'
'Find hyphen locations for the word in |hc|, or |return|'
'Find hyphen locations for the word in |hc|...'
'Find hyphen locations for the word in |hc|, or |return|'
'Find optimal breakpoints'
'Find optimal breakpoints'
'Find the best active node for the desired looseness'
'Find the best active node for the desired looseness'
'Find the best active node...'
'Find the best active node for the desired looseness'
'Find the best way to split the insertion, and change |type(r)| to |split_up|'
'Find the best way to split the insertion, and change |type(r)| to |split_up|'
'Find the best way to split the insertion...'
'Find the best way to split the insertion, and change |type(r)| to |split_up|'
'Find the glue specification, |main_p|, for text spaces in the current font'
'Find the glue specification, |main_p|, for text spaces in the current font'
'Find the glue specification...'
'Find the glue specification, |main_p|, for text spaces in the current font'
'Finish an alignment in a display'
'Finish an alignment in a display'
'Finish displayed math'
'Finish displayed math'
'Finish issuing a diagnostic message for an overfull or underfull hbox'
'Finish issuing a diagnostic message for an overfull or underfull hbox'
'Finish issuing a diagnostic message for an overfull or underfull hbox'
'Finish issuing a diagnostic message for an overfull or underfull hbox'
'Finish issuing a diagnostic message for an overfull or underfull vbox'
'Finish issuing a diagnostic message for an overfull or underfull vbox'
'Finish issuing a diagnostic message for an overfull or underfull vbox'
'Finish issuing a diagnostic message for an overfull or underfull vbox'
'Finish line, emit a \.{\\par}'
'Finish line, emit a \.{\\par}'
'Finish line, emit a space'
'Finish line, emit a space'
'Finish line, |goto switch|'
'Finish line, |goto switch|'
'Finish math in text'
'Finish math in text'
'Finish the \.{DVI} file'
'Finish the \.{DVI} file'
'Finish the extensions'
'Finish the extensions'
'Fire up the user''s output routine and |return|'
'Fire up the user''s output routine and |return|'
'Fix the reference count, if any, ...'
'Fix the reference count, if any, and negate |cur_val| if |negative|'
'Fix the reference count, if any, and negate |cur_val| if |negative|'
'Fix the reference count, if any, and negate |cur_val| if |negative|'
'Flush the box from memory, showing statistics if requested'
'Flush the box from memory, showing statistics if requested'
'Forbidden cases detected in |main_control|'
'Forbidden cases detected in |main_control|'
'Forbidden cases...'
'Forbidden cases detected in |main_control|'
'Forbidden... '
'Forbidden cases detected in |main_control|'
'Generate a |down| or |right| command for |w| and |return|'
'Generate a |down| or |right| command for |w| and |return|'
'Generate a |down| or |right|...'
'Generate a |down| or |right| command for |w| and |return|'
'Generate a |y0| or |z0| command in order to reuse a previous appearance of~|w|'
'Generate a |y0| or |z0| command in order to reuse a previous appearance of~|w|'
'Generate a |y0| or |z0| command...'
'Generate a |y0| or |z0| command in order to reuse a previous appearance of~|w|'
'Get ready to compress the trie'
'Get ready to compress the trie'
'Get ready to start line breaking'
'Get ready to start line breaking'
'Get ready to start...'
'Get ready to start line breaking'
'Get the first line of input and prepare to start'
'Get the first line of input and prepare to start'
'Get the first line...'
'Get the first line of input and prepare to start'
'Get the next non-blank non-call token'
'Get the next non-blank non-call token'
'Get the next non-blank non-call...'
'Get the next non-blank non-call token'
'Get the next non-blank non-relax non-call token'
'Get the next non-blank non-relax non-call token'
'Get the next non-blank non-relax...'
'Get the next non-blank non-relax non-call token'
'Get the next non-blank non-sign token...'
'Get the next non-blank non-sign token; set |negative| appropriately'
'Get the next non-blank non-sign token; set |negative| appropriately'
'Get the next non-blank non-sign token; set |negative| appropriately'
'Get the next non-blank non-sign...'
'Get the next non-blank non-sign token; set |negative| appropriately'
'Get the next token, suppressing expansion'
'Get the next token, suppressing expansion'
'Get user''s advice and |return|'
'Get user''s advice and |return|'
'Get user''s advice...'
'Get user''s advice and |return|'
'Give diagnostic information, if requested'
'Give diagnostic information, if requested'
'Give improper \.{\\hyph...'
'Give improper \.{\\hyphenation} error'
'Give improper \.{\\hyphenation} error'
'Give improper \.{\\hyphenation} error'
'Glob... '
'Global variables'
'Glob...'
'Global variables'
'Global variables'
'Global variables'
'Global... '
'Global variables'
'Go into display math mode'
'Go into display math mode'
'Go into ordinary math mode'
'Go into ordinary math mode'
'Go through the preamble list, determining the column widths and changing the alignrecords to dummy unset boxes'
'Go through the preamble list, determining the column widths and changing the alignrecords to dummy unset boxes'
'Go through the preamble list,...'
'Go through the preamble list, determining the column widths and changing the alignrecords to dummy unset boxes'
'Grow more variable-size memory and |goto restart|'
'Grow more variable-size memory and |goto restart|'
'Handle situations involving spaces, braces, changes of state'
'Handle situations involving spaces, braces, changes of state'
'If a line number class has ended, create new active nodes for the best feasible breaks in that class; then |return| if |r=last_active|, otherwise compute the new |line_width|'
'If a line number class has ended, create new active nodes for the best feasible breaks in that class; then |return| if |r=last_active|, otherwise compute the new |line_width|'
'If a line number class...'
'If a line number class has ended, create new active nodes for the best feasible breaks in that class; then |return| if |r=last_active|, otherwise compute the new |line_width|'
'If all characters of the family fit relative to |h|, then |goto found|,\30\ otherwise |goto not_found|'
'If all characters of the family fit relative to |h|, then |goto found|,\30\ otherwise |goto not_found|'
'If all characters of the family fit relative to |h|...'
'If all characters of the family fit relative to |h|, then |goto found|,\30\ otherwise |goto not_found|'
'If an alignment entry has just ended, take appropriate action'
'If an alignment entry has just ended, take appropriate action'
'If an expanded code is present, reduce it and |goto start_cs|'
'If an expanded code is present, reduce it and |goto start_cs|'
'If an expanded...'
'If an expanded code is present, reduce it and |goto start_cs|'
'If dumping is not allowed, abort'
'If dumping is not allowed, abort'
'If instruction |cur_i| is a kern with |cur_c|, ...'
'If instruction |cur_i| is a kern with |cur_c|, attach the kern after~|q|; or if it is a ligature with |cur_c|, combine noads |q| and~|p| appropriately; then |return| if the cursor has moved past a noad, or |goto restart|'
'If instruction |cur_i| is a kern with |cur_c|, attach the kern after~|q|; or if it is a ligature with |cur_c|, combine noads |q| and~|p| appropriately; then |return| if the cursor has moved past a noad, or |goto restart|'
'If instruction |cur_i| is a kern with |cur_c|, attach the kern after~|q|; or if it is a ligature with |cur_c|, combine noads |q| and~|p| appropriately; then |return| if the cursor has moved past a noad, or |goto restart|'
'If no hyphens were found, |return|'
'If no hyphens were found, |return|'
'If node |cur_p| is a legal breakpoint, call |try_break|; then update the active widths by including the glue in |glue_ptr(cur_p)|'
'If node |cur_p| is a legal breakpoint, call |try_break|; then update the active widths by including the glue in |glue_ptr(cur_p)|'
'If node |cur_p| is a legal breakpoint, call...'
'If node |cur_p| is a legal breakpoint, call |try_break|; then update the active widths by including the glue in |glue_ptr(cur_p)|'
'If node |p| is a legal breakpoint, check if this break is the best known, and |goto done| if |p| is null or if the page-so-far is already too full to accept more stuff'
'If node |p| is a legal breakpoint, check if this break is the best known, and |goto done| if |p| is null or if the page-so-far is already too full to accept more stuff'
'If node |p| is a legal breakpoint, check...'
'If node |p| is a legal breakpoint, check if this break is the best known, and |goto done| if |p| is null or if the page-so-far is already too full to accept more stuff'
'If node |q| is a style node, change the style and |goto delete_q|; otherwise if it is not a noad, put it into the hlist, advance |q|, and |goto done|; otherwise set |s| to the size of noad |q|, set |t| to the associated type (|ord_noad.. inner_noad|), and set |pen| to the associated penalty'
'If node |q| is a style node, change the style and |goto delete_q|; otherwise if it is not a noad, put it into the hlist, advance |q|, and |goto done|; otherwise set |s| to the size of noad |q|, set |t| to the associated type (|ord_noad.. inner_noad|), and set |pen| to the associated penalty'
'If node |q| is a style node, change the style...'
'If node |q| is a style node, change the style and |goto delete_q|; otherwise if it is not a noad, put it into the hlist, advance |q|, and |goto done|; otherwise set |s| to the size of noad |q|, set |t| to the associated type (|ord_noad.. inner_noad|), and set |pen| to the associated penalty'
'If node |r| is of type |delta_node|, update |cur_active_width|, set |prev_r| and |prev_prev_r|, then |goto continue|'
'If node |r| is of type |delta_node|, update |cur_active_width|, set |prev_r| and |prev_prev_r|, then |goto continue|'
'If node |r|...'
'If node |r| is of type |delta_node|, update |cur_active_width|, set |prev_r| and |prev_prev_r|, then |goto continue|'
'If the current list ends with a box node, delete it from the list and make |cur_box| point to it; otherwise set |cur_box:=null|'
'If the current list ends with a box node, delete it from the list and make |cur_box| point to it; otherwise set |cur_box:=null|'
'If the current list ends with a box node, delete it...'
'If the current list ends with a box node, delete it from the list and make |cur_box| point to it; otherwise set |cur_box:=null|'
'If the current page is empty and node |p| is to be deleted, |goto done1|; otherwise use node |p| to update the state of the current page; if this node is an insertion, |goto contribute|; otherwise if this node is not a legal breakpoint, |goto contribute| or |update_heights|; otherwise set |pi| to the penalty associated with this breakpoint'
'If the current page is empty and node |p| is to be deleted, |goto done1|; otherwise use node |p| to update the state of the current page; if this node is an insertion, |goto contribute|; otherwise if this node is not a legal breakpoint, |goto contribute| or |update_heights|; otherwise set |pi| to the penalty associated with this breakpoint'
'If the current page is empty...'
'If the current page is empty and node |p| is to be deleted, |goto done1|; otherwise use node |p| to update the state of the current page; if this node is an insertion, |goto contribute|; otherwise if this node is not a legal breakpoint, |goto contribute| or |update_heights|; otherwise set |pi| to the penalty associated with this breakpoint'
'If the cursor is immediately followed by the right boundary, |goto reswitch|; if it''s followed by an invalid character, |goto big_switch|; otherwise move the cursor one step to the right and |goto main_lig_loop|'
'If the cursor is immediately followed by the right boundary, |goto reswitch|; if it''s followed by an invalid character, |goto big_switch|; otherwise move the cursor one step to the right and |goto main_lig_loop|'
'If the cursor is immediately followed by the right boundary...'
'If the cursor is immediately followed by the right boundary, |goto reswitch|; if it''s followed by an invalid character, |goto big_switch|; otherwise move the cursor one step to the right and |goto main_lig_loop|'
'If the next character is a parameter number, make |cur_tok| a |match| token; but if it is a left brace, store `|left_brace|, |end_match|'', set |hash_brace|, and |goto done|'
'If the next character is a parameter number, make |cur_tok| a |match| token; but if it is a left brace, store `|left_brace|, |end_match|'', set |hash_brace|, and |goto done|'
'If the next character is a parameter number...'
'If the next character is a parameter number, make |cur_tok| a |match| token; but if it is a left brace, store `|left_brace|, |end_match|'', set |hash_brace|, and |goto done|'
'If the preamble list has been traversed, check that the row has ended'
'If the preamble list has been traversed, check that the row has ended'
'If the right-hand side is a token parameter or token register, finish the assignment and |goto done|'
'If the right-hand side is a token parameter or token register, finish the assignment and |goto done|'
'If the right-hand side is a token parameter...'
'If the right-hand side is a token parameter or token register, finish the assignment and |goto done|'
'If the string |hyph_word[h]| is less than \(hc)...'
'If the string |hyph_word[h]| is less than \(hc)|hc[1..hn]|, |goto not_found|; but if the two strings are equal, set |hyf| to the hyphen positions and |goto found|'
'If the string |hyph_word[h]| is less than \(hc)|hc[1..hn]|, |goto not_found|; but if the two strings are equal, set |hyf| to the hyphen positions and |goto found|'
'If the string |hyph_word[h]| is less than \(hc)|hc[1..hn]|, |goto not_found|; but if the two strings are equal, set |hyf| to the hyphen positions and |goto found|'
'If the string |hyph_word[h]| is less than \(or)...'
'If the string |hyph_word[h]| is less than \(or)or equal to |s|, interchange |(hyph_word[h],hyph_list[h])| with |(s,p)|'
'If the string |hyph_word[h]| is less than \(or)or equal to |s|, interchange |(hyph_word[h],hyph_list[h])| with |(s,p)|'
'If the string |hyph_word[h]| is less than \(or)or equal to |s|, interchange |(hyph_word[h],hyph_list[h])| with |(s,p)|'
'If there''s a ligature or kern at the cursor position, update the data structures, possibly advancing~|j|; continue until the cursor moves'
'If there''s a ligature or kern at the cursor position, update the data structures, possibly advancing~|j|; continue until the cursor moves'
'If there''s a ligature or kern at the cursor position, update...'
'If there''s a ligature or kern at the cursor position, update the data structures, possibly advancing~|j|; continue until the cursor moves'
'If there''s a ligature/kern command relevant to |cur_l| and |cur_r|, adjust the text appropriately; exit to |main_loop_wrapup|'
'If there''s a ligature/kern command relevant to |cur_l| and |cur_r|, adjust the text appropriately; exit to |main_loop_wrapup|'
'If there''s a ligature/kern command...'
'If there''s a ligature/kern command relevant to |cur_l| and |cur_r|, adjust the text appropriately; exit to |main_loop_wrapup|'
'If this font has already been loaded, set |f| to the internal font number and |goto common_ending|'
'If this font has already been loaded, set |f| to the internal font number and |goto common_ending|'
'If this font has already been loaded...'
'If this font has already been loaded, set |f| to the internal font number and |goto common_ending|'
'If this |sup_mark| starts an expanded character like~\.{\^\^A} or~\.{\^\^df}, then |goto reswitch|, otherwise set |state:=mid_line|'
'If this |sup_mark| starts an expanded character like~\.{\^\^A} or~\.{\^\^df}, then |goto reswitch|, otherwise set |state:=mid_line|'
'If this |sup_mark| starts an expanded character...'
'If this |sup_mark| starts an expanded character like~\.{\^\^A} or~\.{\^\^df}, then |goto reswitch|, otherwise set |state:=mid_line|'
'Ignore the fraction operation and complain about this ambiguous case'
'Ignore the fraction operation and complain about this ambiguous case'
'Ignore the fraction...'
'Ignore the fraction operation and complain about this ambiguous case'
'Implement \.{\\closeout}'
'Implement \.{\\closeout}'
'Implement \.{\\immediate}'
'Implement \.{\\immediate}'
'Implement \.{\\openout}'
'Implement \.{\\openout}'
'Implement \.{\\setlanguage}'
'Implement \.{\\setlanguage}'
'Implement \.{\\special}'
'Implement \.{\\special}'
'Implement \.{\\write}'
'Implement \.{\\write}'
'Incorporate a whatsit node into a vbox'
'Incorporate a whatsit node into a vbox'
'Incorporate a whatsit node into an hbox'
'Incorporate a whatsit node into an hbox'
'Incorporate box dimensions into the dimensions of the hbox that will contain~it'
'Incorporate box dimensions into the dimensions of the hbox that will contain~it'
'Incorporate box dimensions into the dimensions of the hbox...'
'Incorporate box dimensions into the dimensions of the hbox that will contain~it'
'Incorporate box dimensions into the dimensions of the vbox that will contain~it'
'Incorporate box dimensions into the dimensions of the vbox that will contain~it'
'Incorporate box dimensions into the dimensions of the vbox...'
'Incorporate box dimensions into the dimensions of the vbox that will contain~it'
'Incorporate character dimensions into the dimensions of the hbox that will contain~it, then move to the next node'
'Incorporate character dimensions into the dimensions of the hbox that will contain~it, then move to the next node'
'Incorporate character dimensions into the dimensions of the hbox...'
'Incorporate character dimensions into the dimensions of the hbox that will contain~it, then move to the next node'
'Incorporate glue into the horizontal totals'
'Incorporate glue into the horizontal totals'
'Incorporate glue into the vertical totals'
'Incorporate glue into the vertical totals'
'Increase the number of parameters in the last font'
'Increase the number of parameters in the last font'
'Increase the number of parameters...'
'Increase the number of parameters in the last font'
'Initialize for hyphenating a paragraph'
'Initialize for hyphenating a paragraph'
'Initialize for hyphenating...'
'Initialize for hyphenating a paragraph'
'Initialize table entries (done by \.{INITEX} only)'
'Initialize table entries (done by \.{INITEX} only)'
'Initialize table entries...'
'Initialize table entries (done by \.{INITEX} only)'
'Initialize table...'
'Initialize table entries (done by \.{INITEX} only)'
'Initialize the current page, insert the \.{\\topskip} glue ahead of |p|, and |goto continue|'
'Initialize the current page, insert the \.{\\topskip} glue ahead of |p|, and |goto continue|'
'Initialize the current page, insert the \.{\\topskip} glue...'
'Initialize the current page, insert the \.{\\topskip} glue ahead of |p|, and |goto continue|'
'Initialize the input routines'
'Initialize the input routines'
'Initialize the output routines'
'Initialize the output routines'
'Initialize the output...'
'Initialize the output routines'
'Initialize the print |selector| based on |interaction|'
'Initialize the print |selector| based on |interaction|'
'Initialize the print |selector|...'
'Initialize the print |selector| based on |interaction|'
'Initialize the special list heads and constant nodes'
'Initialize the special list heads and constant nodes'
'Initialize the special list heads...'
'Initialize the special list heads and constant nodes'
'Initialize the special list...'
'Initialize the special list heads and constant nodes'
'Initialize the special...'
'Initialize the special list heads and constant nodes'
'Initialize variables as |ship_out| begins'
'Initialize variables as |ship_out| begins'
'Initialize whatever \TeX\ might access'
'Initialize whatever \TeX\ might access'
'Initialize whatever...'
'Initialize whatever \TeX\ might access'
'Initiate or terminate input from a file'
'Initiate or terminate input from a file'
'Initiate or terminate input...'
'Initiate or terminate input from a file'
'Initiate the construction of an hbox or vbox, then |return|'
'Initiate the construction of an hbox or vbox, then |return|'
'Input and store tokens from the next line of the file'
'Input and store tokens from the next line of the file'
'Input for \.{\\read} from the terminal'
'Input for \.{\\read} from the terminal'
'Input from external file, |goto restart| if no input found'
'Input from external file, |goto restart| if no input found'
'Input from token list, |goto restart| if end of list or if a parameter needs to be expanded'
'Input from token list, |goto restart| if end of list or if a parameter needs to be expanded'
'Input the first line of |read_file[m]|'
'Input the first line of |read_file[m]|'
'Input the next line of |read_file[m]|'
'Input the next line of |read_file[m]|'
'Insert a delta node to prepare for breaks at |cur_p|'
'Insert a delta node to prepare for breaks at |cur_p|'
'Insert a delta node to prepare for the next active node'
'Insert a delta node to prepare for the next active node'
'Insert a dummy noad to be sub/superscripted'
'Insert a dummy noad to be sub/superscripted'
'Insert a dummy...'
'Insert a dummy noad to be sub/superscripted'
'Insert a new active node from |best_place[fit_class]| to |cur_p|'
'Insert a new active node from |best_place[fit_class]| to |cur_p|'
'Insert a new active node from |best_place[fit_class]| to |cur_p|'
'Insert a new active node from |best_place[fit_class]| to |cur_p|'
'Insert a new control sequence after |p|, then make |p| point to it'
'Insert a new control sequence after |p|, then make |p| point to it'
'Insert a new control...'
'Insert a new control sequence after |p|, then make |p| point to it'
'Insert a new pattern into the linked trie'
'Insert a new pattern into the linked trie'
'Insert a new trie node between |q| and |p|, and make |p| point to it'
'Insert a new trie node between |q| and |p|, and make |p| point to it'
'Insert a new trie node between |q| and |p|...'
'Insert a new trie node between |q| and |p|, and make |p| point to it'
'Insert a token containing |frozen_endv|'
'Insert a token containing |frozen_endv|'
'Insert a token saved by \.{\\afterassignment}, if any'
'Insert a token saved by \.{\\afterassignment}, if any'
'Insert glue for |split_top_skip| and set~|p:=null|'
'Insert glue for |split_top_skip| and set~|p:=null|'
'Insert glue for |split_top_skip|...'
'Insert glue for |split_top_skip| and set~|p:=null|'
'Insert hyphens as specified in |hyph_list[h]|'
'Insert hyphens as specified in |hyph_list[h]|'
'Insert hyphens as specified...'
'Insert hyphens as specified in |hyph_list[h]|'
'Insert macro parameter and |goto restart|'
'Insert macro parameter and |goto restart|'
'Insert macro parameter...'
'Insert macro parameter and |goto restart|'
'Insert the \(a)appropriate mark text into the scanner'
'Insert the \(a)appropriate mark text into the scanner'
'Insert the \(c)current list into its environment'
'Insert the \(c)current list into its environment'
'Insert the \(p)pair |(s,p)| into the exception table'
'Insert the \(p)pair |(s,p)| into the exception table'
'Insert the \(p)pair |(s,p)|...'
'Insert the \(p)pair |(s,p)| into the exception table'
'Insert the \(v)\<v_j> template and |goto restart|'
'Insert the \(v)\<v_j> template and |goto restart|'
'Insert the \(v)\<v_j>...'
'Insert the \(v)\<v_j> template and |goto restart|'
'Insert token |p| into \TeX''s input'
'Insert token |p| into \TeX''s input'
'Interpret code |c| and |return| if done'
'Interpret code |c| and |return| if done'
'Introduce new material from the terminal and |return|'
'Introduce new material from the terminal and |return|'
'Introduce new material...'
'Introduce new material from the terminal and |return|'
'Issue an error message if |cur_val=fmem_ptr|'
'Issue an error message if |cur_val=fmem_ptr|'
'Justify the line ending at breakpoint |cur_p|, and append it to the current vertical list, together with associated penalties and other insertions'
'Justify the line ending at breakpoint |cur_p|, and append it to the current vertical list, together with associated penalties and other insertions'
'Justify the line ending at breakpoint |cur_p|, and append it...'
'Justify the line ending at breakpoint |cur_p|, and append it to the current vertical list, together with associated penalties and other insertions'
'Labels in the out...'
'Labels in the outer block'
'Labels in the outer block'
'Labels in the outer block'
'Last-minute procedures'
'Last-minute procedures'
'Last-minute... '
'Last-minute procedures'
'Lengthen the preamble periodically'
'Lengthen the preamble periodically'
'Lengthen the preamble...'
'Lengthen the preamble periodically'
'Let |cur_h| be the position of the first box, ...'
'Let |cur_h| be the position of the first box, and set |leader_wd+lx| to the spacing between corresponding parts of boxes'
'Let |cur_h| be the position of the first box, and set |leader_wd+lx| to the spacing between corresponding parts of boxes'
'Let |cur_h| be the position of the first box, and set |leader_wd+lx| to the spacing between corresponding parts of boxes'
'Let |cur_v| be the position of the first box, ...'
'Let |cur_v| be the position of the first box, and set |leader_ht+lx| to the spacing between corresponding parts of boxes'
'Let |cur_v| be the position of the first box, and set |leader_ht+lx| to the spacing between corresponding parts of boxes'
'Let |cur_v| be the position of the first box, and set |leader_ht+lx| to the spacing between corresponding parts of boxes'
'Let |d| be the natural width of node |p|...'
'Let |d| be the natural width of node |p|; if the node is ``visible,'''' |goto found|; if the node is glue that stretches or shrinks, set |v:=max_dimen|'
'Let |d| be the natural width of node |p|; if the node is ``visible,'''' |goto found|; if the node is glue that stretches or shrinks, set |v:=max_dimen|'
'Let |d| be the natural width of node |p|; if the node is ``visible,'''' |goto found|; if the node is glue that stretches or shrinks, set |v:=max_dimen|'
'Let |d| be the natural width of this glue...'
'Let |d| be the natural width of this glue; if stretching or shrinking, set |v:=max_dimen|; |goto found| in the case of leaders'
'Let |d| be the natural width of this glue; if stretching or shrinking, set |v:=max_dimen|; |goto found| in the case of leaders'
'Let |d| be the natural width of this glue; if stretching or shrinking, set |v:=max_dimen|; |goto found| in the case of leaders'
'Let |d| be the width of the whatsit |p|'
'Let |d| be the width of the whatsit |p|'
'Let |n| be the largest legal code value, based on |cur_chr|'
'Let |n| be the largest legal code value, based on |cur_chr|'
'Let |n| be the largest...'
'Let |n| be the largest legal code value, based on |cur_chr|'
'Link node |p| into the current page and |goto done|'
'Link node |p| into the current page and |goto done|'
'Local variables for dimension calculations'
'Local variables for dimension calculations'
'Local variables for finishing a displayed formula'
'Local variables for finishing a displayed formula'
'Local variables for finishing...'
'Local variables for finishing a displayed formula'
'Local variables for formatting calculations'
'Local variables for formatting calculations'
'Local variables for formatting...'
'Local variables for formatting calculations'
'Local variables for hyph...'
'Local variables for hyphenation'
'Local variables for hyphenation'
'Local variables for hyphenation'
'Local variables for init...'
'Local variables for initialization'
'Local variables for initialization'
'Local variables for initialization'
'Local variables for line breaking'
'Local variables for line breaking'
'Local variables for line...'
'Local variables for line breaking'
'Look ahead for another character, or leave |lig_stack| empty if there''s none there'
'Look ahead for another character, or leave |lig_stack| empty if there''s none there'
'Look ahead for another character...'
'Look ahead for another character, or leave |lig_stack| empty if there''s none there'
'Look at all the marks in nodes before the break, and set the final link to |null| at the break'
'Look at all the marks in nodes before the break, and set the final link to |null| at the break'
'Look at all the marks...'
'Look at all the marks in nodes before the break, and set the final link to |null| at the break'
'Look at the list of characters starting with |x| in font |g|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look at the list of characters starting with |x| in font |g|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look at the list of characters starting with |x|...'
'Look at the list of characters starting with |x| in font |g|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look at the other stack entries until deciding what sort of \.{DVI} command to generate; |goto found| if node |p| is a ``hit'''''
'Look at the other stack entries until deciding what sort of \.{DVI} command to generate; |goto found| if node |p| is a ``hit'''''
'Look at the other stack entries until deciding...'
'Look at the other stack entries until deciding what sort of \.{DVI} command to generate; |goto found| if node |p| is a ``hit'''''
'Look at the variants of |(z,x)|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look at the variants of |(z,x)|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look at the variants of |(z,x)|; set |f| and |c|...'
'Look at the variants of |(z,x)|; set |f| and |c| whenever a better character is found; |goto found| as soon as a large enough variant is encountered'
'Look for parameter number or \.{\#\#}'
'Look for parameter number or \.{\#\#}'
'Look for parameter number...'
'Look for parameter number or \.{\#\#}'
'Look for the word |hc[1...'
'Look for the word |hc[1..hn]| in the exception table, and |goto found| (with |hyf| containing the hyphens) if an entry is found'
'Look for the word |hc[1..hn]| in the exception table, and |goto found| (with |hyf| containing the hyphens) if an entry is found'
'Look for the word |hc[1..hn]| in the exception table, and |goto found| (with |hyf| containing the hyphens) if an entry is found'
'Look up the characters of list |r| in the hash table, and set |cur_cs|'
'Look up the characters of list |r| in the hash table, and set |cur_cs|'
'Look up the characters of list |r| in the hash table...'
'Look up the characters of list |r| in the hash table, and set |cur_cs|'
'Make a copy of node |p| in node |r|'
'Make a copy of node |p| in node |r|'
'Make a copy of node |p|...'
'Make a copy of node |p| in node |r|'
'Make a ligature node, if |ligature_present|; insert a null discretionary, if appropriate'
'Make a ligature node, if |ligature_present|; insert a null discretionary, if appropriate'
'Make a ligature node, if |ligature_present|;...'
'Make a ligature node, if |ligature_present|; insert a null discretionary, if appropriate'
'Make a partial copy of the whatsit node |p| and make |r| point to it; set |words| to the number of initial words not yet copied'
'Make a partial copy of the whatsit node |p| and make |r| point to it; set |words| to the number of initial words not yet copied'
'Make a partial copy of the whatsit...'
'Make a partial copy of the whatsit node |p| and make |r| point to it; set |words| to the number of initial words not yet copied'
'Make a second pass over the mlist, ...'
'Make a second pass over the mlist, removing all noads and inserting the proper spacing and penalties'
'Make a second pass over the mlist, removing all noads and inserting the proper spacing and penalties'
'Make a second pass over the mlist, removing all noads and inserting the proper spacing and penalties'
'Make final adjustments and |goto done|'
'Make final adjustments and |goto done|'
'Make final adjustments...'
'Make final adjustments and |goto done|'
'Make node |p| look like a |char_node| and |goto reswitch|'
'Make node |p| look like a |char_node| and |goto reswitch|'
'Make node |p| look like a |char_node| and |goto reswitch|'
'Make node |p| look like a |char_node| and |goto reswitch|'
'Make node |p| look like a |char_node|...'
'Make node |p| look like a |char_node| and |goto reswitch|'
'Make sure that |page_max_depth| is not exceeded'
'Make sure that |page_max_depth| is not exceeded'
'Make sure that |pi| is in the proper range'
'Make sure that |pi| is in the proper range'
'Make the contribution list empty by setting its tail to |contrib_head|'
'Make the contribution list empty by setting its tail to |contrib_head|'
'Make the contribution list empty...'
'Make the contribution list empty by setting its tail to |contrib_head|'
'Make the first 256 strings'
'Make the first 256 strings'
'Make the first 256...'
'Make the first 256 strings'
'Make the height of box |y| equal to |h|'
'Make the height of box |y| equal to |h|'
'Make the height of box |y|...'
'Make the height of box |y| equal to |h|'
'Make the running dimensions in rule |q| extend to the boundaries of the alignment'
'Make the running dimensions in rule |q| extend to the boundaries of the alignment'
'Make the running dimensions in rule |q| extend...'
'Make the running dimensions in rule |q| extend to the boundaries of the alignment'
'Make the unset node |r| into a |vlist_node| of height |w|, setting the glue as if the height were |t|'
'Make the unset node |r| into a |vlist_node| of height |w|, setting the glue as if the height were |t|'
'Make the unset node |r| into a |vlist_node| of height |w|...'
'Make the unset node |r| into a |vlist_node| of height |w|, setting the glue as if the height were |t|'
'Make the unset node |r| into an |hlist_node| of width |w|, setting the glue as if the width were |t|'
'Make the unset node |r| into an |hlist_node| of width |w|, setting the glue as if the width were |t|'
'Make the unset node |r| into an |hlist_node| of width |w|...'
'Make the unset node |r| into an |hlist_node| of width |w|, setting the glue as if the width were |t|'
'Make variable |b| point to a box for |(f,c)|'
'Make variable |b| point to a box for |(f,c)|'
'Manufacture a control sequence name'
'Manufacture a control sequence name'
'Manufacture a control...'
'Manufacture a control sequence name'
'Math-only cases in non-math modes, or vice versa'
'Math-only cases in non-math modes, or vice versa'
'Math-only cases in non-math modes...'
'Math-only cases in non-math modes, or vice versa'
'Merge the widths in the span nodes of |q| with those of |p|, destroying the span nodes of |q|'
'Merge the widths in the span nodes of |q| with those of |p|, destroying the span nodes of |q|'
'Merge the widths...'
'Merge the widths in the span nodes of |q| with those of |p|, destroying the span nodes of |q|'
'Modify the end of the line to reflect the nature of the break and to include \.{\\rightskip}; also set the proper value of |disc_break|'
'Modify the end of the line to reflect the nature of the break and to include \.{\\rightskip}; also set the proper value of |disc_break|'
'Modify the end of the line...'
'Modify the end of the line to reflect the nature of the break and to include \.{\\rightskip}; also set the proper value of |disc_break|'
'Modify the glue specification in |main_p| according to the space factor'
'Modify the glue specification in |main_p| according to the space factor'
'Move down or output leaders'
'Move down or output leaders'
'Move node |p| to the current page; ...'
'Move node |p| to the current page; if it is time for a page break, put the nodes following the break back onto the contribution list, and |return| to the user''s output routine if there is one'
'Move node |p| to the current page; if it is time for a page break, put the nodes following the break back onto the contribution list, and |return| to the user''s output routine if there is one'
'Move node |p| to the current page; if it is time for a page break, put the nodes following the break back onto the contribution list, and |return| to the user''s output routine if there is one'
'Move pointer |s| to the end of the current list, and set |replace_count(r)| appropriately'
'Move pointer |s| to the end of the current list, and set |replace_count(r)| appropriately'
'Move pointer |s| to the end of the current list...'
'Move pointer |s| to the end of the current list, and set |replace_count(r)| appropriately'
'Move right or output leaders'
'Move right or output leaders'
'Move the characters of a ligature node to |hu| and |hc|...'
'Move the characters of a ligature node to |hu| and |hc|; but |goto done3| if they are not all letters'
'Move the characters of a ligature node to |hu| and |hc|; but |goto done3| if they are not all letters'
'Move the characters of a ligature node to |hu| and |hc|; but |goto done3| if they are not all letters'
'Move the cursor past a pseudo-ligature, then |goto main_loop_lookahead| or |main_lig_loop|'
'Move the cursor past a pseudo-ligature, then |goto main_loop_lookahead| or |main_lig_loop|'
'Move the cursor past a pseudo-ligature...'
'Move the cursor past a pseudo-ligature, then |goto main_loop_lookahead| or |main_lig_loop|'
'Move the data into |trie|'
'Move the data into |trie|'
'Move to next line of file, or |goto restart| if there is no next line, or |return| if a \.{\\read} line has finished'
'Move to next line of file, or |goto restart| if there is no next line, or |return| if a \.{\\read} line has finished'
'Move to next line of file, or |goto restart|...'
'Move to next line of file, or |goto restart| if there is no next line, or |return| if a \.{\\read} line has finished'
'Negate all three glue components of |cur_val|'
'Negate all three glue components of |cur_val|'
'Negate all three...'
'Negate all three glue components of |cur_val|'
'Nullify |width(q)| and the tabskip glue following this column'
'Nullify |width(q)| and the tabskip glue following this column'
'Numbered cases for |debug_help|'
'Numbered cases for |debug_help|'
'Numbered cases...'
'Numbered cases for |debug_help|'
'Open |tfm_file| for input'
'Open |tfm_file| for input'
'Other local variables for |try_break|'
'Other local variables for |try_break|'
'Output a box in a vlist'
'Output a box in a vlist'
'Output a box in an hlist'
'Output a box in an hlist'
'Output a leader box at |cur_h|, then advance |cur_h| by |leader_wd+lx|'
'Output a leader box at |cur_h|, then advance |cur_h| by |leader_wd+lx|'
'Output a leader box at |cur_h|, ...'
'Output a leader box at |cur_h|, then advance |cur_h| by |leader_wd+lx|'
'Output a leader box at |cur_v|, then advance |cur_v| by |leader_ht+lx|'
'Output a leader box at |cur_v|, then advance |cur_v| by |leader_ht+lx|'
'Output a leader box at |cur_v|, ...'
'Output a leader box at |cur_v|, then advance |cur_v| by |leader_ht+lx|'
'Output a rule in a vlist, |goto next_p|'
'Output a rule in a vlist, |goto next_p|'
'Output a rule in a vlist...'
'Output a rule in a vlist, |goto next_p|'
'Output a rule in an hlist'
'Output a rule in an hlist'
'Output leaders in a vlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output leaders in a vlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output leaders in a vlist...'
'Output leaders in a vlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output leaders in an hlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output leaders in an hlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output leaders in an hlist...'
'Output leaders in an hlist, |goto fin_rule| if a rule or to |next_p| if done'
'Output node |p| for |hlist_out| and move to the next node, maintaining the condition |cur_v=base_line|'
'Output node |p| for |hlist_out| and move to the next node, maintaining the condition |cur_v=base_line|'
'Output node |p| for |hlist_out|...'
'Output node |p| for |hlist_out| and move to the next node, maintaining the condition |cur_v=base_line|'
'Output node |p| for |vlist_out| and move to the next node, maintaining the condition |cur_h=left_edge|'
'Output node |p| for |vlist_out| and move to the next node, maintaining the condition |cur_h=left_edge|'
'Output node |p| for |vlist_out|...'
'Output node |p| for |vlist_out| and move to the next node, maintaining the condition |cur_h=left_edge|'
'Output statistics about this job'
'Output statistics about this job'
'Output statistics...'
'Output statistics about this job'
'Output the font definitions for all fonts that were used'
'Output the font definitions for all fonts that were used'
'Output the font definitions...'
'Output the font definitions for all fonts that were used'
'Output the font name whose internal number is |f|'
'Output the font name whose internal number is |f|'
'Output the non-|char_node| |p| for |hlist_out| and move to the next node'
'Output the non-|char_node| |p| for |hlist_out| and move to the next node'
'Output the non-|char_node| |p| for |hlist_out|...'
'Output the non-|char_node| |p| for |hlist_out| and move to the next node'
'Output the non-|char_node| |p| for |vlist_out|'
'Output the non-|char_node| |p| for |vlist_out|'
'Output the whatsit node |p| in a vlist'
'Output the whatsit node |p| in a vlist'
'Output the whatsit node |p| in an hlist'
'Output the whatsit node |p| in an hlist'
'Pack the family into |trie| relative to |h|'
'Pack the family into |trie| relative to |h|'
'Package an unset box for the current column and record its width'
'Package an unset box for the current column and record its width'
'Package an unset...'
'Package an unset box for the current column and record its width'
'Package the preamble list, to determine the actual tabskip glue amounts, and let |p| point to this prototype box'
'Package the preamble list, to determine the actual tabskip glue amounts, and let |p| point to this prototype box'
'Package the preamble list...'
'Package the preamble list, to determine the actual tabskip glue amounts, and let |p| point to this prototype box'
'Perform the default output routine'
'Perform the default output routine'
'Pontificate about improper alignment in display'
'Pontificate about improper alignment in display'
'Pontificate... '
'Pontificate about improper alignment in display'
'Pop the condition stack'
'Pop the condition stack'
'Prepare all the boxes involved in insertions to act as queues'
'Prepare all the boxes involved in insertions to act as queues'
'Prepare to deactivate node~|r|, and |goto deactivate| unless there is a reason to consider lines of text from |r| to |cur_p|'
'Prepare to deactivate node~|r|, and |goto deactivate| unless there is a reason to consider lines of text from |r| to |cur_p|'
'Prepare to deactivate node~|r|, and |goto deactivate| unless...'
'Prepare to deactivate node~|r|, and |goto deactivate| unless there is a reason to consider lines of text from |r| to |cur_p|'
'Prepare to insert a token that matches |cur_group|, and print what it is'
'Prepare to insert a token that matches |cur_group|, and print what it is'
'Prepare to insert a token that matches |cur_group|...'
'Prepare to insert a token that matches |cur_group|, and print what it is'
'Prepare to move a box or rule node to the current page, then |goto contribute|'
'Prepare to move a box or rule node to the current page, then |goto contribute|'
'Prepare to move a box or rule node to the current page...'
'Prepare to move a box or rule node to the current page, then |goto contribute|'
'Prepare to move whatsit |p| to the current page, then |goto contribute|'
'Prepare to move whatsit |p| to the current page, then |goto contribute|'
'Prepare to move whatsit |p| to the current page, then |goto contribute|'
'Prepare to move whatsit |p| to the current page, then |goto contribute|'
'Print a short indication of the contents of node |p|'
'Print a short indication of the contents of node |p|'
'Print a symbolic description of the new break node'
'Print a symbolic description of the new break node'
'Print a symbolic description of this feasible break'
'Print a symbolic description of this feasible break'
'Print either `\.{definition}'' or ...'
'Print either `\.{definition}'' or `\.{use}'' or `\.{preamble}'' or `\.{text}'', and insert tokens that should lead to recovery'
'Print either `\.{definition}'' or `\.{use}'' or `\.{preamble}'' or `\.{text}'', and insert tokens that should lead to recovery'
'Print either `\.{definition}'' or `\.{use}'' or `\.{preamble}'' or `\.{text}'', and insert tokens that should lead to recovery'
'Print location of current line'
'Print location of current line'
'Print newly busy locations'
'Print newly busy locations'
'Print newly busy...'
'Print newly busy locations'
'Print string |s| as an error message'
'Print string |s| as an error message'
'Print string |s| on the terminal'
'Print string |s| on the terminal'
'Print the banner line, including the date and time'
'Print the banner line, including the date and time'
'Print the banner...'
'Print the banner line, including the date and time'
'Print the font identifier for |font(p)|'
'Print the font identifier for |font(p)|'
'Print the help info...'
'Print the help information and |goto continue|'
'Print the help information and |goto continue|'
'Print the help information and |goto continue|'
'Print the list between |printed_node| and |cur_p|, then set |printed_node:=cur_p|'
'Print the list between |printed_node| and |cur_p|, then set |printed_node:=cur_p|'
'Print the list between |printed_node| and |cur_p|...'
'Print the list between |printed_node| and |cur_p|, then set |printed_node:=cur_p|'
'Print the menu of available options'
'Print the menu of available options'
'Print the menu...'
'Print the menu of available options'
'Print the result of command |c|'
'Print the result of command |c|'
'Print two lines using the tricky pseudoprinted information'
'Print two lines using the tricky pseudoprinted information'
'Print type of token list'
'Print type of token list'
'Process an active-character control sequence and set |state:=mid_line|'
'Process an active-character control sequence and set |state:=mid_line|'
'Process an active-character...'
'Process an active-character control sequence and set |state:=mid_line|'
'Process node-or-noad |q| as much as possible in preparation for the second pass of |mlist_to_hlist|, then move to the next item in the mlist'
'Process node-or-noad |q| as much as possible in preparation for the second pass of |mlist_to_hlist|, then move to the next item in the mlist'
'Process node-or-noad...'
'Process node-or-noad |q| as much as possible in preparation for the second pass of |mlist_to_hlist|, then move to the next item in the mlist'
'Process whatsit |p| in |vert_break| loop, |goto not_found|'
'Process whatsit |p| in |vert_break| loop, |goto not_found|'
'Prune the current list, if necessary, until it contains only |char_node|, |kern_node|, |hlist_node|, |vlist_node|, |rule_node|, and |ligature_node| items; set |n| to the length of the list, and set |q| to the list''s tail'
'Prune the current list, if necessary, until it contains only |char_node|, |kern_node|, |hlist_node|, |vlist_node|, |rule_node|, and |ligature_node| items; set |n| to the length of the list, and set |q| to the list''s tail'
'Prune the current list, if necessary...'
'Prune the current list, if necessary, until it contains only |char_node|, |kern_node|, |hlist_node|, |vlist_node|, |rule_node|, and |ligature_node| items; set |n| to the length of the list, and set |q| to the list''s tail'
'Prune unwanted nodes at the beginning of the next line'
'Prune unwanted nodes at the beginning of the next line'
'Pseudoprint the line'
'Pseudoprint the line'
'Pseudoprint the token list'
'Pseudoprint the token list'
'Push the condition stack'
'Push the condition stack'
'Put each of \TeX''s primitives into the hash table'
'Put each of \TeX''s primitives into the hash table'
'Put each...'
'Put each of \TeX''s primitives into the hash table'
'Put help message on the transcript file'
'Put help message on the transcript file'
'Put the \(c)characters |hu[i+1..@,]| into |post_break(r)|, appending to this list and to |major_tail| until synchronization has been achieved'
'Put the \(c)characters |hu[i+1..@,]| into |post_break(r)|, appending to this list and to |major_tail| until synchronization has been achieved'
'Put the \(c)characters |hu[i+1..@,]| into |post_break(r)|...'
'Put the \(c)characters |hu[i+1..@,]| into |post_break(r)|, appending to this list and to |major_tail| until synchronization has been achieved'
'Put the \(c)characters |hu[l..i]| and a hyphen into |pre_break(r)|'
'Put the \(c)characters |hu[l..i]| and a hyphen into |pre_break(r)|'
'Put the \(f)fraction into a box with its delimiters, and make |new_hlist(q)| point to it'
'Put the \(f)fraction into a box with its delimiters, and make |new_hlist(q)| point to it'
'Put the \(f)fraction into a box with its delimiters...'
'Put the \(f)fraction into a box with its delimiters, and make |new_hlist(q)| point to it'
'Put the \(l)\.{\\leftskip} glue at the left and detach this line'
'Put the \(l)\.{\\leftskip} glue at the left and detach this line'
'Put the \(l)\.{\\leftskip} glue at the left...'
'Put the \(l)\.{\\leftskip} glue at the left and detach this line'
'Put the \(o)optimal current page into box 255, update |first_mark| and |bot_mark|, append insertions to their boxes, and put the remaining nodes back on the contribution list'
'Put the \(o)optimal current page into box 255, update |first_mark| and |bot_mark|, append insertions to their boxes, and put the remaining nodes back on the contribution list'
'Put the \(o)optimal current page into box 255...'
'Put the \(o)optimal current page into box 255, update |first_mark| and |bot_mark|, append insertions to their boxes, and put the remaining nodes back on the contribution list'
'Put the \(p)(positive) `at'' size into |s|'
'Put the \(p)(positive) `at'' size into |s|'
'Put the \(p)(positive) `at'''' size into |s|'
'Put the \(p)(positive) `at'''' size into |s|'
'Put the \(r)\.{\\rightskip} glue after node |q|'
'Put the \(r)\.{\\rightskip} glue after node |q|'
'Read and check the font data; |abort| if the \.{TFM} file is malformed; if there''s no room for this font, say so and |goto done|; otherwise |incr(font_ptr)| and |goto done|'
'Read and check the font data; |abort| if the \.{TFM} file is malformed; if there''s no room for this font, say so and |goto done|; otherwise |incr(font_ptr)| and |goto done|'
'Read and check...'
'Read and check the font data; |abort| if the \.{TFM} file is malformed; if there''s no room for this font, say so and |goto done|; otherwise |incr(font_ptr)| and |goto done|'
'Read box dimensions'
'Read box dimensions'
'Read character data'
'Read character data'
'Read extensible character recipes'
'Read extensible character recipes'
'Read font parameters'
'Read font parameters'
'Read ligature/kern program'
'Read ligature/kern program'
'Read next line of file into |buffer|, or |goto restart| if the file has ended'
'Read next line of file into |buffer|, or |goto restart| if the file has ended'
'Read one string, but return |false| if the string memory space is getting too tight for comfort'
'Read one string, but return |false| if the string memory space is getting too tight for comfort'
'Read one string...'
'Read one string, but return |false| if the string memory space is getting too tight for comfort'
'Read the first line of the new file'
'Read the first line of the new file'
'Read the first line...'
'Read the first line of the new file'
'Read the other strings from the \.{TEX.POOL} file and return |true|, or give an error message and return |false|'
'Read the other strings from the \.{TEX.POOL} file and return |true|, or give an error message and return |false|'
'Read the other strings...'
'Read the other strings from the \.{TEX.POOL} file and return |true|, or give an error message and return |false|'
'Read the {\.{TFM}} header'
'Read the {\.{TFM}} header'
'Read the {\.{TFM}} size fields'
'Read the {\.{TFM}} size fields'
'Readjust the height and depth of |cur_box|, for \.{\\vtop}'
'Readjust the height and depth of |cur_box|, for \.{\\vtop}'
'Readjust the height...'
'Readjust the height and depth of |cur_box|, for \.{\\vtop}'
'Reconstitute nodes for the hyphenated word, inserting discretionary hyphens'
'Reconstitute nodes for the hyphenated word, inserting discretionary hyphens'
'Reconstitute nodes for the hyphenated word...'
'Reconstitute nodes for the hyphenated word, inserting discretionary hyphens'
'Record a new feasible break'
'Record a new feasible break'
'Recover from an unbalanced output routine'
'Recover from an unbalanced output routine'
'Recover from an unbalanced write command'
'Recover from an unbalanced write command'
'Recycle node |p|'
'Recycle node |p|'
'Remove the last box, unless it''s part of a discretionary'
'Remove the last box, unless it''s part of a discretionary'
'Remove the last box...'
'Remove the last box, unless it''s part of a discretionary'
'Replace nodes |ha..hb| by a sequence of nodes that includes the discretionary hyphens'
'Replace nodes |ha..hb| by a sequence of nodes that includes the discretionary hyphens'
'Replace nodes |ha..hb| by a sequence of nodes...'
'Replace nodes |ha..hb| by a sequence of nodes that includes the discretionary hyphens'
'Replace the tail of the list by |p|'
'Replace the tail of the list by |p|'
'Replace the tail...'
'Replace the tail of the list by |p|'
'Replace |z| by $|z|^\prime$ and compute $\alpha,\beta$'
'Replace |z| by $|z|^\prime$ and compute $\alpha,\beta$'
'Replace |z|...'
'Replace |z| by $|z|^\prime$ and compute $\alpha,\beta$'
'Report a runaway argument and abort'
'Report a runaway argument and abort'
'Report a tight hbox and |goto common_ending|, if this box is sufficiently bad'
'Report a tight hbox and |goto common_ending|, if this box is sufficiently bad'
'Report a tight hbox and |goto common_ending|, if...'
'Report a tight hbox and |goto common_ending|, if this box is sufficiently bad'
'Report a tight vbox and |goto common_ending|, if this box is sufficiently bad'
'Report a tight vbox and |goto common_ending|, if this box is sufficiently bad'
'Report a tight vbox and |goto common_ending|, if...'
'Report a tight vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an extra right brace and |goto continue|'
'Report an extra right brace and |goto continue|'
'Report an improper use of the macro and abort'
'Report an improper use of the macro and abort'
'Report an improper use...'
'Report an improper use of the macro and abort'
'Report an overfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an overfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an overfull hbox and |goto common_ending|, if...'
'Report an overfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an overfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an overfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an overfull vbox and |goto common_ending|, if...'
'Report an overfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull hbox and |goto common_ending|, if...'
'Report an underfull hbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report an underfull vbox and |goto common_ending|, if...'
'Report an underfull vbox and |goto common_ending|, if this box is sufficiently bad'
'Report overflow of the input buffer, and abort'
'Report overflow of the input buffer, and abort'
'Report that an invalid delimiter code is being changed to null; set~|cur_val:=0|'
'Report that an invalid delimiter code is being changed to null; set~|cur_val:=0|'
'Report that an invalid delimiter...'
'Report that an invalid delimiter code is being changed to null; set~|cur_val:=0|'
'Report that the font won''t be loaded'
'Report that the font won''t be loaded'
'Report that this dimension is out of range'
'Report that this dimension is out of range'
'Resume the page builder after an output routine has come to an end'
'Resume the page builder after an output routine has come to an end'
'Resume the page builder...'
'Resume the page builder after an output routine has come to an end'
'Reverse the links of the relevant passive nodes, setting |cur_p| to the first breakpoint'
'Reverse the links of the relevant passive nodes, setting |cur_p| to the first breakpoint'
'Reverse the links of the relevant passive nodes...'
'Reverse the links of the relevant passive nodes, setting |cur_p| to the first breakpoint'
'Scan a control sequence and set |state:=skip_blanks| or |mid_line|'
'Scan a control sequence and set |state:=skip_blanks| or |mid_line|'
'Scan a control...'
'Scan a control sequence and set |state:=skip_blanks| or |mid_line|'
'Scan a numeric constant'
'Scan a numeric constant'
'Scan a parameter until its delimiter string has been found; or, ...'
'Scan a parameter until its delimiter string has been found; or, if |s=null|, simply scan the delimiter string'
'Scan a parameter until its delimiter string has been found; or, if |s=null|, simply scan the delimiter string'
'Scan a parameter until its delimiter string has been found; or, if |s=null|, simply scan the delimiter string'
'Scan a subformula enclosed in braces and |return|'
'Scan a subformula enclosed in braces and |return|'
'Scan a subformula...'
'Scan a subformula enclosed in braces and |return|'
'Scan ahead in the buffer until finding a nonletter; if an expanded code is encountered, reduce it and |goto start_cs|; otherwise if a multiletter control sequence is found, adjust |cur_cs| and |loc|, and |goto found|'
'Scan ahead in the buffer until finding a nonletter; if an expanded code is encountered, reduce it and |goto start_cs|; otherwise if a multiletter control sequence is found, adjust |cur_cs| and |loc|, and |goto found|'
'Scan ahead in the buffer...'
'Scan ahead in the buffer until finding a nonletter; if an expanded code is encountered, reduce it and |goto start_cs|; otherwise if a multiletter control sequence is found, adjust |cur_cs| and |loc|, and |goto found|'
'Scan an alphabetic character code into |cur_val|'
'Scan an alphabetic character code into |cur_val|'
'Scan an optional space'
'Scan an optional space'
'Scan and build the body of the token list; |goto found| when finished'
'Scan and build the body of the token list; |goto found| when finished'
'Scan and build the parameter part of the macro definition'
'Scan and build the parameter part of the macro definition'
'Scan and build the parameter part...'
'Scan and build the parameter part of the macro definition'
'Scan decimal fraction'
'Scan decimal fraction'
'Scan file name in the buffer'
'Scan file name in the buffer'
'Scan for \(a)all other units and adjust |cur_val| and |f| accordingly; |goto done| in the case of scaled points'
'Scan for \(a)all other units and adjust |cur_val| and |f| accordingly; |goto done| in the case of scaled points'
'Scan for \(a)all other units and adjust |cur_val| and |f|...'
'Scan for \(a)all other units and adjust |cur_val| and |f| accordingly; |goto done| in the case of scaled points'
'Scan for \(f)\.{fil} units...'
'Scan for \(f)\.{fil} units; |goto attach_fraction| if found'
'Scan for \(f)\.{fil} units; |goto attach_fraction| if found'
'Scan for \(f)\.{fil} units; |goto attach_fraction| if found'
'Scan for \(m)\.{mu} units and |goto attach_fraction|'
'Scan for \(m)\.{mu} units and |goto attach_fraction|'
'Scan for \(u)units that are internal dimensions...'
'Scan for \(u)units that are internal dimensions; |goto attach_sign| with |cur_val| set if found'
'Scan for \(u)units that are internal dimensions; |goto attach_sign| with |cur_val| set if found'
'Scan for \(u)units that are internal dimensions; |goto attach_sign| with |cur_val| set if found'
'Scan preamble text until |cur_cmd| is |tab_mark| or |car_ret|, looking for changes in the tabskip glue; append an alignrecord to the preamble list'
'Scan preamble text until |cur_cmd| is |tab_mark| or |car_ret|, looking for changes in the tabskip glue; append an alignrecord to the preamble list'
'Scan preamble text until |cur_cmd| is |tab_mark| or |car_ret|...'
'Scan preamble text until |cur_cmd| is |tab_mark| or |car_ret|, looking for changes in the tabskip glue; append an alignrecord to the preamble list'
'Scan the argument for command |c|'
'Scan the argument for command |c|'
'Scan the font size specification'
'Scan the font size specification'
'Scan the parameters and make |link(r)| point to the macro body...'
'Scan the parameters and make |link(r)| point to the macro body; but |return| if an illegal \.{\\par} is detected'
'Scan the parameters and make |link(r)| point to the macro body; but |return| if an illegal \.{\\par} is detected'
'Scan the parameters and make |link(r)| point to the macro body; but |return| if an illegal \.{\\par} is detected'
'Scan the preamble and record it in the |preamble| list'
'Scan the preamble and record it in the |preamble| list'
'Scan the template \<u_j>, putting the resulting token list in |hold_head|'
'Scan the template \<u_j>, putting the resulting token list in |hold_head|'
'Scan the template \<u_j>...'
'Scan the template \<u_j>, putting the resulting token list in |hold_head|'
'Scan the template \<v_j>, putting the resulting token list in |hold_head|'
'Scan the template \<v_j>, putting the resulting token list in |hold_head|'
'Scan the template \<v_j>...'
'Scan the template \<v_j>, putting the resulting token list in |hold_head|'
'Scan units and set |cur_val| to $x\cdot(|cur_val|+f/2^{16})$, where there are |x| sp per unit; |goto attach_sign| if the units are internal'
'Scan units and set |cur_val| to $x\cdot(|cur_val|+f/2^{16})$, where there are |x| sp per unit; |goto attach_sign| if the units are internal'
'Scan units and set |cur_val| to $x\cdot(|cur_val|+f/2^{16})$...'
'Scan units and set |cur_val| to $x\cdot(|cur_val|+f/2^{16})$, where there are |x| sp per unit; |goto attach_sign| if the units are internal'
'Search |eqtb| for equivalents equal to |p|'
'Search |eqtb| for equivalents equal to |p|'
'Search |hyph_list| for pointers to |p|'
'Search |hyph_list| for pointers to |p|'
'Search |save_stack| for equivalents that point to |p|'
'Search |save_stack| for equivalents that point to |p|'
'Select the appropriate case and |return| or |goto common_ending|'
'Select the appropriate case and |return| or |goto common_ending|'
'Select the appropriate case and |return| or |goto common_ending|'
'Select the appropriate case and |return| or |goto common_ending|'
'Set init...'
'Set initial values of key variables'
'Set initial values of key variables'
'Set initial values of key variables'
'Set initial...'
'Set initial values of key variables'
'Set line length parameters in preparation for hanging indentation'
'Set line length parameters in preparation for hanging indentation'
'Set the glue in all the unset boxes of the current list'
'Set the glue in all the unset boxes of the current list'
'Set the glue in all the unset...'
'Set the glue in all the unset boxes of the current list'
'Set the glue in node |r| and change it from an unset node'
'Set the glue in node |r| and change it from an unset node'
'Set the glue in node |r|...'
'Set the glue in node |r| and change it from an unset node'
'Set the unset box |q| and the unset boxes in it'
'Set the unset box |q| and the unset boxes in it'
'Set the value of |b| to the badness for shrinking the line, and compute the corresponding |fit_class|'
'Set the value of |b| to the badness for shrinking the line, and compute the corresponding |fit_class|'
'Set the value of |b| to the badness for shrinking...'
'Set the value of |b| to the badness for shrinking the line, and compute the corresponding |fit_class|'
'Set the value of |b| to the badness for stretching the line, and compute the corresponding |fit_class|'
'Set the value of |b| to the badness for stretching the line, and compute the corresponding |fit_class|'
'Set the value of |b| to the badness for stretching...'
'Set the value of |b| to the badness for stretching the line, and compute the corresponding |fit_class|'
'Set the value of |output_penalty|'
'Set the value of |output_penalty|'
'Set up data structures with the cursor following position |j|'
'Set up data structures with the cursor following position |j|'
'Set up the values of |cur_size| and |cur_mu|, based on |cur_style|'
'Set up the values of |cur_size| and |cur_mu|, based on |cur_style|'
'Set up the values...'
'Set up the values of |cur_size| and |cur_mu|, based on |cur_style|'
'Set variable |c| to the current escape character'
'Set variable |c| to the current escape character'
'Ship box |p| out'
'Ship box |p| out'
'Show equivalent |n|, in region 1 or 2'
'Show equivalent |n|, in region 1 or 2'
'Show equivalent |n|, in region 3'
'Show equivalent |n|, in region 3'
'Show equivalent |n|, in region 4'
'Show equivalent |n|, in region 4'
'Show equivalent |n|, in region 5'
'Show equivalent |n|, in region 5'
'Show equivalent |n|, in region 6'
'Show equivalent |n|, in region 6'
'Show the auxiliary field, |a|'
'Show the auxiliary field, |a|'
'Show the auxiliary...'
'Show the auxiliary field, |a|'
'Show the current contents of a box'
'Show the current contents of a box'
'Show the current meaning of a token, then |goto common_ending|'
'Show the current meaning of a token, then |goto common_ending|'
'Show the current meaning of a token...'
'Show the current meaning of a token, then |goto common_ending|'
'Show the current value of some parameter or register, then |goto common_ending|'
'Show the current value of some parameter or register, then |goto common_ending|'
'Show the current value of some parameter...'
'Show the current value of some parameter or register, then |goto common_ending|'
'Show the font identifier in |eqtb[n]|'
'Show the font identifier in |eqtb[n]|'
'Show the halfword code in |eqtb[n]|'
'Show the halfword code in |eqtb[n]|'
'Show the status of the current page'
'Show the status of the current page'
'Show the text of the macro being expanded'
'Show the text of the macro being expanded'
'Simplify a trivial box'
'Simplify a trivial box'
'Skip to \.{\\else} or \.{\\fi}, then |goto common_ending|'
'Skip to \.{\\else} or \.{\\fi}, then |goto common_ending|'
'Skip to \.{\\else} or \.{\\fi}...'
'Skip to \.{\\else} or \.{\\fi}, then |goto common_ending|'
'Skip to node |ha|, or |goto done1| if no hyphenation should be attempted'
'Skip to node |ha|, or |goto done1| if no hyphenation should be attempted'
'Skip to node |ha|, or |goto done1|...'
'Skip to node |ha|, or |goto done1| if no hyphenation should be attempted'
'Skip to node |hb|, putting letters into |hu| and |hc|'
'Skip to node |hb|, putting letters into |hu| and |hc|'
'Skip to node |hb|, putting letters...'
'Skip to node |hb|, putting letters into |hu| and |hc|'
'Sort \(p)|p| into the list starting at |rover| and advance |p| to |rlink(p)|'
'Sort \(p)|p| into the list starting at |rover| and advance |p| to |rlink(p)|'
'Sort \(p)|p|...'
'Sort \(p)|p| into the list starting at |rover| and advance |p| to |rlink(p)|'
'Sort \(t)the hyphenation op tables into proper order'
'Sort \(t)the hyphenation op tables into proper order'
'Sort \(t)the hyphenation...'
'Sort \(t)the hyphenation op tables into proper order'
'Split off part of a vertical box, make |cur_box| point to it'
'Split off part of a vertical box, make |cur_box| point to it'
'Squeeze the equation as much as possible...'
'Squeeze the equation as much as possible; if there is an equation number that should go on a separate line by itself, set~|e:=0|'
'Squeeze the equation as much as possible; if there is an equation number that should go on a separate line by itself, set~|e:=0|'
'Squeeze the equation as much as possible; if there is an equation number that should go on a separate line by itself, set~|e:=0|'
'Start a new current page'
'Start a new current page'
'Store \(c)|cur_box| in a box register'
'Store \(c)|cur_box| in a box register'
'Store \(m)maximum values in the |hyf| table'
'Store \(m)maximum values in the |hyf| table'
'Store \(s)|save...'
'Store \(s)|save_stack[save_ptr]| in |eqtb[p]|, unless |eqtb[p]| holds a global value'
'Store \(s)|save_stack[save_ptr]| in |eqtb[p]|, unless |eqtb[p]| holds a global value'
'Store \(s)|save_stack[save_ptr]| in |eqtb[p]|, unless |eqtb[p]| holds a global value'
'Store the current token, but |goto continue| if it is a blank space that would become an undelimited parameter'
'Store the current token, but |goto continue| if it is a blank space that would become an undelimited parameter'
'Store the current token, but |goto continue| if it is...'
'Store the current token, but |goto continue| if it is a blank space that would become an undelimited parameter'
'Subtract glue from |break...'
'Subtract glue from |break_width|'
'Subtract glue from |break_width|'
'Subtract glue from |break_width|'
'Subtract the width of node |v| from |break_width|'
'Subtract the width of node |v| from |break_width|'
'Subtract the width of node |v|...'
'Subtract the width of node |v| from |break_width|'
'Suppress expansion of the next token'
'Suppress expansion of the next token'
'Suppress expansion...'
'Suppress expansion of the next token'
'Swap the subscript and superscript into box |x|'
'Swap the subscript and superscript into box |x|'
'Switch to a larger accent if available and appropriate'
'Switch to a larger accent if available and appropriate'
'Tell the user what has run away and try to recover'
'Tell the user what has run away and try to recover'
'Tell the user what has run away...'
'Tell the user what has run away and try to recover'
'Terminate the current conditional and skip to \.{\\fi}'
'Terminate the current conditional and skip to \.{\\fi}'
'Test box register status'
'Test box register status'
'Test if an integer is odd'
'Test if an integer is odd'
'Test if two characters match'
'Test if two characters match'
'Test if two macro texts match'
'Test if two macro texts match'
'Test if two tokens match'
'Test if two tokens match'
'Test relation between integers or dimensions'
'Test relation between integers or dimensions'
'The em width for |cur_font|'
'The em width for |cur_font|'
'The x-height for |cur_font|'
'The x-height for |cur_font|'
'Tidy up the parameter just scanned, and tuck it away'
'Tidy up the parameter just scanned, and tuck it away'
'Transfer node |p| to the adjustment list'
'Transfer node |p| to the adjustment list'
'Transplant the post-break list'
'Transplant the post-break list'
'Transplant the pre-break list'
'Transplant the pre-break list'
'Treat |cur_chr| as an active character'
'Treat |cur_chr| as an active character'
'Treat |cur_chr|...'
'Treat |cur_chr| as an active character'
'Try the final line break at the end of the paragraph, and |goto done| if the desired breakpoints have been found'
'Try the final line break at the end of the paragraph, and |goto done| if the desired breakpoints have been found'
'Try the final line break at the end of the paragraph...'
'Try the final line break at the end of the paragraph, and |goto done| if the desired breakpoints have been found'
'Try to allocate within node |p| and its physical successors, and |goto found| if allocation was possible'
'Try to allocate within node |p| and its physical successors, and |goto found| if allocation was possible'
'Try to allocate...'
'Try to allocate within node |p| and its physical successors, and |goto found| if allocation was possible'
'Try to break after a discretionary fragment, then |goto done5|'
'Try to break after a discretionary fragment, then |goto done5|'
'Try to break after a discretionary fragment...'
'Try to break after a discretionary fragment, then |goto done5|'
'Try to get a different log file name'
'Try to get a different log file name'
'Try to hyphenate the following word'
'Try to hyphenate the following word'
'Try to hyphenate...'
'Try to hyphenate the following word'
'Try to recover from mismatch...'
'Try to recover from mismatched \.{\\right}'
'Try to recover from mismatched \.{\\right}'
'Try to recover from mismatched \.{\\right}'
'Types in the outer block'
'Types in the outer block'
'Types... '
'Types in the outer block'
'Undump a couple more things and the closing check word'
'Undump a couple more things and the closing check word'
'Undump constants for consistency check'
'Undump constants for consistency check'
'Undump regions 1 to 6 of |eqtb|'
'Undump regions 1 to 6 of |eqtb|'
'Undump the array info for internal font number |k|'
'Undump the array info for internal font number |k|'
'Undump the dynamic memory'
'Undump the dynamic memory'
'Undump the font information'
'Undump the font information'
'Undump the hash table'
'Undump the hash table'
'Undump the hyphenation tables'
'Undump the hyphenation tables'
'Undump the string pool'
'Undump the string pool'
'Undump the table of equivalents'
'Undump the table of equivalents'
'Update the active widths, since the first active node has been deleted'
'Update the active widths, since the first active node has been deleted'
'Update the active widths,...'
'Update the active widths, since the first active node has been deleted'
'Update the current height and depth measurements with respect to a glue or kern node~|p|'
'Update the current height and depth measurements with respect to a glue or kern node~|p|'
'Update the current height and depth measurements with...'
'Update the current height and depth measurements with respect to a glue or kern node~|p|'
'Update the current page measurements with respect to the glue or kern specified by node~|p|'
'Update the current page measurements with respect to the glue or kern specified by node~|p|'
'Update the current page measurements with respect to the glue...'
'Update the current page measurements with respect to the glue or kern specified by node~|p|'
'Update the value of |printed_node| for symbolic displays'
'Update the value of |printed_node| for symbolic displays'
'Update the value of |printed_node|...'
'Update the value of |printed_node| for symbolic displays'
'Update the values of |first_mark| and |bot_mark|'
'Update the values of |first_mark| and |bot_mark|'
'Update the values of |first_mark| and |bot_mark|'
'Update the values of |first_mark| and |bot_mark|'
'Update the values of |last_glue|, |last_penalty|, and |last_kern|'
'Update the values of |last_glue|, |last_penalty|, and |last_kern|'
'Update the values of |last_glue|...'
'Update the values of |last_glue|, |last_penalty|, and |last_kern|'
'Update the values of |max_h| and |max_v|; but if the page is too large, |goto done|'
'Update the values of |max_h| and |max_v|; but if the page is too large, |goto done|'
'Update the values of |max_h| and |max_v|; but if the page is too large...'
'Update the values of |max_h| and |max_v|; but if the page is too large, |goto done|'
'Update width entry for spanned columns'
'Update width entry for spanned columns'
'Use code |c| to distinguish between generalized fractions'
'Use code |c| to distinguish between generalized fractions'
'Use code |c|...'
'Use code |c| to distinguish between generalized fractions'
'Use node |p| to update the current height and depth measurements...'
'Use node |p| to update the current height and depth measurements; if this node is not a legal breakpoint, |goto not_found| or |update_heights|, otherwise set |pi| to the associated penalty at the break'
'Use node |p| to update the current height and depth measurements; if this node is not a legal breakpoint, |goto not_found| or |update_heights|, otherwise set |pi| to the associated penalty at the break'
'Use node |p| to update the current height and depth measurements; if this node is not a legal breakpoint, |goto not_found| or |update_heights|, otherwise set |pi| to the associated penalty at the break'
'Use size fields to allocate font information'
'Use size fields to allocate font information'
'Wipe out the whatsit node |p| and |goto done|'
'Wipe out the whatsit node |p| and |goto done|'
'Wipe out the whatsit...'
'Wipe out the whatsit node |p| and |goto done|'
'Wrap up the box specified by node |r|, splitting node |p| if called for; set |wait:=true| if node |p| holds a remainder after splitting'
'Wrap up the box specified by node |r|, splitting node |p| if called for; set |wait:=true| if node |p| holds a remainder after splitting'
'Wrap up the box specified by node |r|, splitting node |p| if...'
'Wrap up the box specified by node |r|, splitting node |p| if called for; set |wait:=true| if node |p| holds a remainder after splitting'
