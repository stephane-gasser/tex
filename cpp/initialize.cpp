#include "initialize.h"
#include "constantes.h"

void Initialize(void)
{
	for (int i = 0; i < 32; i++)
		xchr[i] = ' ';
	for (int i = 32; i < 127; i++)
		xchr[i] = i;
	for (int i = 127; i < 256; i++)
		xchr[i] = ' ';
	for (int i = 0; i < 256; i++)
	    xord[char(i)] = 127;
	for (int i = 128; i < 256; i++)
		xord[xchr[i]] = i;
	for (int i = 0; i < 127; i++)
		xord[xchr[i]] = i;
	interaction = 3;
	deletionsallowed = true;
	setboxallowed = true;
	errorcount = 0;
	helpptr = 0;
	useerrhelp = false;
	interrupt = 0;
	OKtointerrupt = true;
	nestptr = 0;
	maxneststack = 0;
	curlist.modefield = 1;
	curlist.headfield = 29999;
	curlist.tailfield = 29999;
	curlist.auxfield.int_ = -65536000;
	curlist.mlfield = 0;
	curlist.pgfield = 0;
	shownmode = 0;
	pagecontents = 0;
	pagetail = 29998;
	mem[29998].hh.rh = 0;
	lastglue = 65535;
	lastpenalty = 0;
	lastkern = 0;
	pagesofar[7] = 0;
	pagemaxdepth = 0;
	for (int k = int_base; k < 6107; k++)
    	xeqlevel[k] = 1;
	nonewcontrolsequence = true;
	hash[514].lh = 0;
	hash[514].rh = 0;
	for (int k = 515; k <2881; k++)
	    hash[k] = hash[514];
	saveptr = 0;
	curlevel = 1;
	curgroup = 0;
	curboundary = 0;
	maxsavestack = 0;
	magset = 0;
	curmark[0] = 0;
	curmark[1] = 0;
	curmark[2] = 0;
	curmark[3] = 0;
	curmark[4] = 0;
	curval = 0;
	curvallevel = 0;
	radix = 0;
	curorder = 0;
	for (int k = 0; k < 17; k++)
	    readopen[k] = 2;
	condptr = 0;
	iflimit = 0;
	curif = 0;
	ifline = 0;
	TEXformatdefault = "TeXformats:plain.fmt";
	for (int k = 0; k <= fontmax; k++)
		fontused[k] = false;
	nullcharacter.b0 = 0;
	nullcharacter.b1 = 0;
	nullcharacter.b2 = 0;
	nullcharacter.b3 = 0;
	totalpages = 0;
	maxv = 0;
	maxh = 0;
	maxpush = 0;
	lastbop = -1;
	doingleaders = false;
	deadcycles = 0;
	curs = -1;
	halfbuf = dvibufsize/2;
	dvilimit = dvibufsize;
	dviptr = 0;
	dvioffset = 0;
	dvigone = 0;
	downptr = 0;
	rightptr = 0;
	adjusttail = 0;
	lastbadness = 0;
	packbeginline = 0;
	emptyfield.rh = 0;
	emptyfield.lh = 0;
	nulldelimiter.b0 = 0;
	nulldelimiter.b1 = 0;
	nulldelimiter.b2 = 0;
	nulldelimiter.b3 = 0;
	alignptr = 0;
	curalign = 0;
	curspan = 0;
	curloop = 0;
	curhead = 0;
	curtail = 0;
	for (int z = 0; z < 308; z++)
	{
		hyphword[z] = 0;
		hyphlist[z] = 0;
	}
	hyphcount = 0;
	outputactive = false;
	insertpenalties = 0;
	ligaturepresent = false;
	cancelboundary = false;
	lfthit = false;
	rthit = false;
	insdisc = false;
	aftertoken = 0;
	longhelpseen = false;
	formatident = 0;
	for (int k = 0; k < 18; k++)
		writeopen[k] = false;
	for (int k = 1; k < 20; k++)
		mem[k].int_ = 0;
	for (int k = 0; k <= 19; k += 4)
	{
		mem[k].hh.rh = 1;
		mem[k].hh.b0 = 0;
		mem[k].hh.b1 = 0;
	}
	mem[6].int_ = 65536;
	mem[4].hh.b0 = 1;
	mem[10].int_ = 65536;
	mem[8].hh.b0 = 2;
	mem[14].int_ = 65536;
	mem[12].hh.b0 = 1;
	mem[15].int_ = 65536;
	mem[12].hh.b1 = 1;
	mem[18].int_ = -65536;
	mem[16].hh.b0 = 1;
	rover = 20;
	mem[rover].hh.rh = 65535;
	mem[rover].hh.lh = 1000;
	mem[rover + 1].hh.lh = rover;
	mem[rover + 1].hh.rh = rover;
	lomemmax = rover + 1000;
	mem[lomemmax].hh.rh = 0;
	mem[lomemmax].hh.lh = 0;
	for (int k = 29987; k < 30001; k++)
		mem[k] = mem[lomemmax];
	mem[29990].hh.lh = 6714;
	mem[29991].hh.rh = 256;
	mem[29991].hh.lh = 0;
	mem[29993].hh.b0 = 1;
	mem[29994].hh.lh = 65535;
	mem[29993].hh.b1 = 0;
	mem[30000].hh.b1 = 255;
	mem[30000].hh.b0 = 1;
	mem[30000].hh.rh = 30000;
	mem[29998].hh.b0 = 10;
	mem[29998].hh.b1 = 0;
	avail = 0;
	memend = 30000;
	himemmin = 29987;
	varused = 20;
	dynused = 14;
	eqtb[undefined_control_sequence].hh.b0 = 101;
	eqtb[undefined_control_sequence].hh.rh = 0;
	eqtb[undefined_control_sequence].hh.b1 = 0;
	for (int k = 1; k < undefined_control_sequence; k++)
		eqtb[k] = eqtb[undefined_control_sequence];
	eqtb[glue_base].hh.rh = 0;
	eqtb[glue_base].hh.b1 = 1;
	eqtb[glue_base].hh.b0 = 117;
	for (int k = glue_base+1; k < local_base; k++)
		eqtb[k] = eqtb[glue_base];
	mem[0].hh.rh = mem[0].hh.rh + 530;
	eqtb[local_base].hh.rh = 0;
	eqtb[local_base].hh.b0 = 118;
	eqtb[local_base].hh.b1 = 1;
	for (int k = local_base+1; k < box_base; k++)
		eqtb[k] = eqtb[undefined_control_sequence];
	eqtb[box_base].hh.rh = 0;
	eqtb[box_base].hh.b0 = 119;
	eqtb[box_base].hh.b1 = 1;
	for (int k = box_base+1; k < cur_font_loc; k++)
		eqtb[k] = eqtb[box_base];
	eqtb[cur_font_loc].hh.rh = 0;
	eqtb[cur_font_loc].hh.b0 = 120;
	eqtb[cur_font_loc].hh.b1 = 1;
	for (int k = cur_font_loc+1; k < cat_code_base; k++)
		eqtb[k] = eqtb[cur_font_loc];
	eqtb[cat_code_base].hh.rh = 0;
	eqtb[cat_code_base].hh.b0 = 120;
	eqtb[cat_code_base].hh.b1 = 1;
	for (int k = cat_code_base+1; k < int_base; k++)
		eqtb[k] = eqtb[cat_code_base];
	for (int k = 0; k < 256; k++)
	{
		eqtb[cat_code_base+k].hh.rh = other_char;
		eqtb[math_code_base+k].hh.rh = k;
		eqtb[sf_code_base+k].hh.rh = 1000;
	}
	eqtb[cat_code_base+'\r'].hh.rh = car_ret;
	eqtb[cat_code_base+' '].hh.rh = spacer;
	eqtb[cat_code_base+'\\'].hh.rh = escape;
	eqtb[cat_code_base+'%'].hh.rh = comment;
	eqtb[cat_code_base+127].hh.rh = invalid_char;
	eqtb[cat_code_base].hh.rh = ignore;
	for (int k = '0'; k <= '9'; k++)
		eqtb[math_code_base+k].hh.rh = k+0x7000;
	for (int k = 'A'; k <= 'Z'; k++)
	{
		eqtb[cat_code_base+k].hh.rh = letter;
		eqtb[cat_code_base+k+'a'-'A'].hh.rh = letter;
		eqtb[math_code_base+k].hh.rh = k+0x7100;
		eqtb[math_code_base+k+'a'-'A'].hh.rh = k+0x7100+'a'-'A';
		eqtb[lc_code_base+k].hh.rh = k+'a'-'A';
		eqtb[lc_code_base+k+'a'-'A'].hh.rh = k+'a'-'A';
		eqtb[uc_code_base+k].hh.rh = k;
		eqtb[uc_code_base+k+'a'-'A'].hh.rh = k;
		eqtb[sf_code_base+k].hh.rh = 999;
	}
	for (int k = int_base; k < del_code_base; k++)
		eqtb[k].int_ = 0;
	eqtb[int_base+mag_code].int_ = 1000;
	eqtb[int_base+tolerance_code].int_ = 10000;
	eqtb[int_base+hang_after_code].int_ = 1;
	eqtb[int_base+max_dead_cycles_code].int_ = 25;
	eqtb[int_base+escape_char_code].int_ = '\\';
	eqtb[int_base+end_line_char_code].int_ = '\r';
	for (int k = 0; k < 256; k++)
		eqtb[del_code_base+k].int_ = -1;
	eqtb[del_code_base+'.'].int_ = 0;
	for (int k = dimen_base; k <= eqtb_size; k++)
		eqtb[k].int_ = 0;
	hashused = frozen_control_sequence;
	cscount = 0;
	eqtb[frozen_dont_expand].hh.b0 = 116;
	hash[frozen_dont_expand].rh = 502;
	fontptr = 0;
	fmemptr = 7;
	fontname[0] = 800;
	fontarea[0] = 338;
	hyphenchar[0] = 45;
	skewchar[0] = -1;
	bcharlabel[0] = 0;
	fontbchar[0] = 256;
	fontfalsebchar[0] = 256;
	fontbc[0] = 1;
	fontec[0] = 0;
	fontsize[0] = 0;
	fontdsize[0] = 0;
	charbase[0] = 0;
	widthbase[0] = 0;
	heightbase[0] = 0;
	depthbase[0] = 0;
	italicbase[0] = 0;
	ligkernbase[0] = 0;
	kernbase[0] = 0;
	extenbase[0] = 0;
	fontglue[0] = 0;
	fontparams[0] = 7;
	parambase[0] = -1;
	for (int k = 0; k < 7; k++)
		fontinfo[k].int_ = 0;
	for (int k = -trieopsize; k <= trieopsize; k++)
		trieophash[k] = 0;
	for (int k = 0; k < 256; k++)
		trieused[k] = 0;
	trieopptr = 0;
	trienotready = true;
	triel[0] = 0;
	triec[0] = 0;
	trieptr = 0;
	hash[frozen_control_sequence].rh = 1189;
	formatident = 1256;
	hash[end_write].rh = 1295;
	eqtb[end_write].hh.b1 = 1;
	eqtb[end_write].hh.b0 = 113;
	eqtb[end_write].hh.rh = 0;
}
